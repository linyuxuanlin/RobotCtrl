
Init_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002134  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080022bc  080022bc  000122bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023bc  080023bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023bc  080023bc  000123bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023c4  080023c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023c4  080023c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023c8  080023c8  000123c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000074  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000079f9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014c2  00000000  00000000  00027a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00028ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  000295e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f6b7  00000000  00000000  00029c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c01  00000000  00000000  000492ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be69b  00000000  00000000  00052f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011159b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b38  00000000  00000000  001115f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022a4 	.word	0x080022a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080022a4 	.word	0x080022a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a31      	ldr	r2, [pc, #196]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004e0:	f043 0320 	orr.w	r3, r3, #32
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0320 	and.w	r3, r3, #32
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a2a      	ldr	r2, [pc, #168]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a23      	ldr	r2, [pc, #140]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_GPIO_Init+0xe4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0310 	and.w	r3, r3, #16
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054c:	4816      	ldr	r0, [pc, #88]	; (80005a8 <MX_GPIO_Init+0xe8>)
 800054e:	f000 fe87 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	480f      	ldr	r0, [pc, #60]	; (80005a8 <MX_GPIO_Init+0xe8>)
 800056c:	f000 fb72 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000570:	2302      	movs	r3, #2
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000574:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800057a:	2301      	movs	r3, #1
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <MX_GPIO_Init+0xec>)
 8000586:	f000 fb65 	bl	8000c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2101      	movs	r1, #1
 800058e:	2007      	movs	r0, #7
 8000590:	f000 fb10 	bl	8000bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000594:	2007      	movs	r0, #7
 8000596:	f000 fb39 	bl	8000c0c <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40021000 	.word	0x40021000

080005b0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C2_Init+0x50>)
 80005b6:	4a13      	ldr	r2, [pc, #76]	; (8000604 <MX_I2C2_Init+0x54>)
 80005b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C2_Init+0x50>)
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <MX_I2C2_Init+0x58>)
 80005be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C2_Init+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_I2C2_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_I2C2_Init+0x50>)
 80005ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_I2C2_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_I2C2_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_I2C2_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_I2C2_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_I2C2_Init+0x50>)
 80005ee:	f000 fea9 	bl	8001344 <HAL_I2C_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80005f8:	f000 f8ba 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000028 	.word	0x20000028
 8000604:	40005800 	.word	0x40005800
 8000608:	000186a0 	.word	0x000186a0

0800060c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a19      	ldr	r2, [pc, #100]	; (8000690 <HAL_I2C_MspInit+0x84>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d12b      	bne.n	8000686 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800064a:	2303      	movs	r3, #3
 800064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800064e:	2312      	movs	r3, #18
 8000650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800065a:	2304      	movs	r3, #4
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <HAL_I2C_MspInit+0x8c>)
 8000666:	f000 faf5 	bl	8000c54 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_I2C_MspInit+0x88>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40005800 	.word	0x40005800
 8000694:	40023800 	.word	0x40023800
 8000698:	40021400 	.word	0x40021400

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 f926 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f806 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f7ff ff0a 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80006ac:	f7ff ff80 	bl	80005b0 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x14>
	...

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fde6 	bl	8002294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xb4>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xb4>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xb4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <SystemClock_Config+0xb8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <SystemClock_Config+0xb8>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <SystemClock_Config+0xb8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 ffd9 	bl	80016dc <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000730:	f000 f81e 	bl	8000770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f001 faec 	bl	8001d2c <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800075a:	f000 f809 	bl	8000770 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>

0800077a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_MspInit+0x4c>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 f8b2 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000838:	2002      	movs	r0, #2
 800083a:	f000 fd6b 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	80fb      	strh	r3, [r7, #6]

        if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 0)
 800084e:	2102      	movs	r1, #2
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000852:	f000 fcdf 	bl	8001214 <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d104      	bne.n	8000866 <HAL_GPIO_EXTI_Callback+0x22>
        {
            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 800085c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <HAL_GPIO_EXTI_Callback+0x30>)
 8000862:	f000 fd2f 	bl	80012c4 <HAL_GPIO_TogglePin>
        }

}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	40020000 	.word	0x40020000

08000878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008a2:	490e      	ldr	r1, [pc, #56]	; (80008dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008b8:	4c0b      	ldr	r4, [pc, #44]	; (80008e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008c6:	f7ff ffd7 	bl	8000878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f001 fcbf 	bl	800224c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fee5 	bl	800069c <main>
  bx  lr    
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e0:	080023cc 	.word	0x080023cc
  ldr r2, =_sbss
 80008e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e8:	20000080 	.word	0x20000080

080008ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_Init+0x40>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_Init+0x40>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x40>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f92b 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	200f      	movs	r0, #15
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff ff34 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023c00 	.word	0x40023c00

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f972 	bl	8000c3c <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f920 	bl	8000bb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	2000007c 	.word	0x2000007c

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000007c 	.word	0x2000007c

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <__NVIC_EnableIRQ+0x38>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff8e 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	d00f      	beq.n	8000ba2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b06      	cmp	r3, #6
 8000b86:	d00c      	beq.n	8000ba2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d009      	beq.n	8000ba2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d006      	beq.n	8000ba2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d003      	beq.n	8000ba2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b9a:	2192      	movs	r1, #146	; 0x92
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000b9e:	f7ff fdec 	bl	800077a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ff16 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	080022bc 	.word	0x080022bc

08000bb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d903      	bls.n	8000bd4 <HAL_NVIC_SetPriority+0x20>
 8000bcc:	21aa      	movs	r1, #170	; 0xaa
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <HAL_NVIC_SetPriority+0x54>)
 8000bd0:	f7ff fdd3 	bl	800077a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d903      	bls.n	8000be2 <HAL_NVIC_SetPriority+0x2e>
 8000bda:	21ab      	movs	r1, #171	; 0xab
 8000bdc:	480a      	ldr	r0, [pc, #40]	; (8000c08 <HAL_NVIC_SetPriority+0x54>)
 8000bde:	f7ff fdcc 	bl	800077a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be2:	f7ff ff1b 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	6978      	ldr	r0, [r7, #20]
 8000bee:	f7ff ff6b 	bl	8000ac8 <NVIC_EncodePriority>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff3a 	bl	8000a74 <__NVIC_SetPriority>
}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	080022bc 	.word	0x080022bc

08000c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	da03      	bge.n	8000c26 <HAL_NVIC_EnableIRQ+0x1a>
 8000c1e:	21be      	movs	r1, #190	; 0xbe
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_NVIC_EnableIRQ+0x2c>)
 8000c22:	f7ff fdaa 	bl	800077a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff04 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	080022bc 	.word	0x080022bc

08000c3c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff73 	bl	8000b30 <SysTick_Config>
 8000c4a:	4603      	mov	r3, r0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a39      	ldr	r2, [pc, #228]	; (8000d54 <HAL_GPIO_Init+0x100>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d023      	beq.n	8000cba <HAL_GPIO_Init+0x66>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a38      	ldr	r2, [pc, #224]	; (8000d58 <HAL_GPIO_Init+0x104>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d01f      	beq.n	8000cba <HAL_GPIO_Init+0x66>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a37      	ldr	r2, [pc, #220]	; (8000d5c <HAL_GPIO_Init+0x108>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d01b      	beq.n	8000cba <HAL_GPIO_Init+0x66>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a36      	ldr	r2, [pc, #216]	; (8000d60 <HAL_GPIO_Init+0x10c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d017      	beq.n	8000cba <HAL_GPIO_Init+0x66>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a35      	ldr	r2, [pc, #212]	; (8000d64 <HAL_GPIO_Init+0x110>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d013      	beq.n	8000cba <HAL_GPIO_Init+0x66>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a34      	ldr	r2, [pc, #208]	; (8000d68 <HAL_GPIO_Init+0x114>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d00f      	beq.n	8000cba <HAL_GPIO_Init+0x66>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a33      	ldr	r2, [pc, #204]	; (8000d6c <HAL_GPIO_Init+0x118>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d00b      	beq.n	8000cba <HAL_GPIO_Init+0x66>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a32      	ldr	r2, [pc, #200]	; (8000d70 <HAL_GPIO_Init+0x11c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d007      	beq.n	8000cba <HAL_GPIO_Init+0x66>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <HAL_GPIO_Init+0x120>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x66>
 8000cb2:	21ac      	movs	r1, #172	; 0xac
 8000cb4:	4830      	ldr	r0, [pc, #192]	; (8000d78 <HAL_GPIO_Init+0x124>)
 8000cb6:	f7ff fd60 	bl	800077a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d005      	beq.n	8000cd0 <HAL_GPIO_Init+0x7c>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	0c1b      	lsrs	r3, r3, #16
 8000cca:	041b      	lsls	r3, r3, #16
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x84>
 8000cd0:	21ad      	movs	r1, #173	; 0xad
 8000cd2:	4829      	ldr	r0, [pc, #164]	; (8000d78 <HAL_GPIO_Init+0x124>)
 8000cd4:	f7ff fd51 	bl	800077a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d035      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d031      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b11      	cmp	r3, #17
 8000cee:	d02d      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d029      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b12      	cmp	r3, #18
 8000cfe:	d025      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000d08:	d020      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000d12:	d01b      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000d1c:	d016      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000d26:	d011      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000d30:	d00c      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000d3a:	d007      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0xf8>
 8000d44:	21ae      	movs	r1, #174	; 0xae
 8000d46:	480c      	ldr	r0, [pc, #48]	; (8000d78 <HAL_GPIO_Init+0x124>)
 8000d48:	f7ff fd17 	bl	800077a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	e240      	b.n	80011d4 <HAL_GPIO_Init+0x580>
 8000d52:	bf00      	nop
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	40020c00 	.word	0x40020c00
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40021400 	.word	0x40021400
 8000d6c:	40021800 	.word	0x40021800
 8000d70:	40021c00 	.word	0x40021c00
 8000d74:	40022000 	.word	0x40022000
 8000d78:	080022f8 	.word	0x080022f8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	f040 821a 	bne.w	80011ce <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d005      	beq.n	8000db2 <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d144      	bne.n	8000e3c <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00f      	beq.n	8000dda <HAL_GPIO_Init+0x186>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d00b      	beq.n	8000dda <HAL_GPIO_Init+0x186>
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d007      	beq.n	8000dda <HAL_GPIO_Init+0x186>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x186>
 8000dd2:	21c0      	movs	r1, #192	; 0xc0
 8000dd4:	4892      	ldr	r0, [pc, #584]	; (8001020 <HAL_GPIO_Init+0x3cc>)
 8000dd6:	f7ff fcd0 	bl	800077a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d027      	beq.n	8000e98 <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00b      	beq.n	8000e68 <HAL_GPIO_Init+0x214>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d007      	beq.n	8000e68 <HAL_GPIO_Init+0x214>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x214>
 8000e60:	21d1      	movs	r1, #209	; 0xd1
 8000e62:	486f      	ldr	r0, [pc, #444]	; (8001020 <HAL_GPIO_Init+0x3cc>)
 8000e64:	f7ff fc89 	bl	800077a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	f040 80bf 	bne.w	8001024 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8093 	beq.w	8000fd6 <HAL_GPIO_Init+0x382>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	2b09      	cmp	r3, #9
 8000eb6:	f000 808e 	beq.w	8000fd6 <HAL_GPIO_Init+0x382>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8089 	beq.w	8000fd6 <HAL_GPIO_Init+0x382>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 8084 	beq.w	8000fd6 <HAL_GPIO_Init+0x382>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d07f      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d07b      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d077      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d073      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d06f      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d06b      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d067      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d063      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d05f      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d05b      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	d057      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	d053      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	d04f      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	2b09      	cmp	r3, #9
 8000f3c:	d04b      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d047      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2b09      	cmp	r3, #9
 8000f4c:	d043      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	2b07      	cmp	r3, #7
 8000f54:	d03f      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	d03b      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d037      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d033      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d02f      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d02b      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	2b09      	cmp	r3, #9
 8000f84:	d027      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	2b09      	cmp	r3, #9
 8000f8c:	d023      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	2b0a      	cmp	r3, #10
 8000f94:	d01f      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	2b0a      	cmp	r3, #10
 8000f9c:	d01b      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b0b      	cmp	r3, #11
 8000fa4:	d017      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	2b0c      	cmp	r3, #12
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	2b0c      	cmp	r3, #12
 8000fb4:	d00f      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b0d      	cmp	r3, #13
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	2b0c      	cmp	r3, #12
 8000fc4:	d007      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x382>
 8000fce:	21de      	movs	r1, #222	; 0xde
 8000fd0:	4813      	ldr	r0, [pc, #76]	; (8001020 <HAL_GPIO_Init+0x3cc>)
 8000fd2:	f7ff fbd2 	bl	800077a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	69b9      	ldr	r1, [r7, #24]
 800101a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800101e:	e001      	b.n	8001024 <HAL_GPIO_Init+0x3d0>
 8001020:	080022f8 	.word	0x080022f8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80b4 	beq.w	80011ce <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <HAL_GPIO_Init+0x594>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a5e      	ldr	r2, [pc, #376]	; (80011e8 <HAL_GPIO_Init+0x594>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <HAL_GPIO_Init+0x594>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a5a      	ldr	r2, [pc, #360]	; (80011ec <HAL_GPIO_Init+0x598>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a51      	ldr	r2, [pc, #324]	; (80011f0 <HAL_GPIO_Init+0x59c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x4b2>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a50      	ldr	r2, [pc, #320]	; (80011f4 <HAL_GPIO_Init+0x5a0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d025      	beq.n	8001102 <HAL_GPIO_Init+0x4ae>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <HAL_GPIO_Init+0x5a4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d01f      	beq.n	80010fe <HAL_GPIO_Init+0x4aa>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4e      	ldr	r2, [pc, #312]	; (80011fc <HAL_GPIO_Init+0x5a8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x4a6>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4d      	ldr	r2, [pc, #308]	; (8001200 <HAL_GPIO_Init+0x5ac>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x4a2>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4c      	ldr	r2, [pc, #304]	; (8001204 <HAL_GPIO_Init+0x5b0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x49e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4b      	ldr	r2, [pc, #300]	; (8001208 <HAL_GPIO_Init+0x5b4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x49a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4a      	ldr	r2, [pc, #296]	; (800120c <HAL_GPIO_Init+0x5b8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x496>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00e      	b.n	8001108 <HAL_GPIO_Init+0x4b4>
 80010ea:	2308      	movs	r3, #8
 80010ec:	e00c      	b.n	8001108 <HAL_GPIO_Init+0x4b4>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x4b4>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x4b4>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x4b4>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x4b4>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x4b4>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x4b4>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4934      	ldr	r1, [pc, #208]	; (80011ec <HAL_GPIO_Init+0x598>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <HAL_GPIO_Init+0x5bc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114a:	4a31      	ldr	r2, [pc, #196]	; (8001210 <HAL_GPIO_Init+0x5bc>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_GPIO_Init+0x5bc>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <HAL_GPIO_Init+0x5bc>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_GPIO_Init+0x5bc>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_GPIO_Init+0x5bc>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_GPIO_Init+0x5bc>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_GPIO_Init+0x5bc>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f add0 	bls.w	8000d7c <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	40021000 	.word	0x40021000
 8001204:	40021400 	.word	0x40021400
 8001208:	40021800 	.word	0x40021800
 800120c:	40021c00 	.word	0x40021c00
 8001210:	40013c00 	.word	0x40013c00

08001214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <HAL_GPIO_ReadPin+0x1c>
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	041b      	lsls	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <HAL_GPIO_ReadPin+0x26>
 8001230:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <HAL_GPIO_ReadPin+0x48>)
 8001236:	f7ff faa0 	bl	800077a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8001246:	2301      	movs	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e001      	b.n	8001250 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	080022f8 	.word	0x080022f8

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <HAL_GPIO_WritePin+0x20>
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	0c1b      	lsrs	r3, r3, #16
 800127a:	041b      	lsls	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <HAL_GPIO_WritePin+0x2a>
 8001280:	f240 119d 	movw	r1, #413	; 0x19d
 8001284:	480e      	ldr	r0, [pc, #56]	; (80012c0 <HAL_GPIO_WritePin+0x60>)
 8001286:	f7ff fa78 	bl	800077a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800128a:	787b      	ldrb	r3, [r7, #1]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <HAL_GPIO_WritePin+0x40>
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d004      	beq.n	80012a0 <HAL_GPIO_WritePin+0x40>
 8001296:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <HAL_GPIO_WritePin+0x60>)
 800129c:	f7ff fa6d 	bl	800077a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	080022f8 	.word	0x080022f8

080012c4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <HAL_GPIO_TogglePin+0x1c>
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	0c1b      	lsrs	r3, r3, #16
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <HAL_GPIO_TogglePin+0x26>
 80012e0:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80012e4:	480a      	ldr	r0, [pc, #40]	; (8001310 <HAL_GPIO_TogglePin+0x4c>)
 80012e6:	f7ff fa48 	bl	800077a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f0:	887a      	ldrh	r2, [r7, #2]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	400b      	ands	r3, r1
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	080022f8 	.word	0x080022f8

08001314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fa86 	bl	8000844 <HAL_GPIO_EXTI_Callback>
  }
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013c00 	.word	0x40013c00

08001344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1be      	b.n	80016d4 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a9f      	ldr	r2, [pc, #636]	; (80015d8 <HAL_I2C_Init+0x294>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00e      	beq.n	800137e <HAL_I2C_Init+0x3a>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a9d      	ldr	r2, [pc, #628]	; (80015dc <HAL_I2C_Init+0x298>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d009      	beq.n	800137e <HAL_I2C_Init+0x3a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a9c      	ldr	r2, [pc, #624]	; (80015e0 <HAL_I2C_Init+0x29c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d004      	beq.n	800137e <HAL_I2C_Init+0x3a>
 8001374:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001378:	489a      	ldr	r0, [pc, #616]	; (80015e4 <HAL_I2C_Init+0x2a0>)
 800137a:	f7ff f9fe 	bl	800077a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <HAL_I2C_Init+0x4c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4a97      	ldr	r2, [pc, #604]	; (80015e8 <HAL_I2C_Init+0x2a4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d904      	bls.n	800139a <HAL_I2C_Init+0x56>
 8001390:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001394:	4893      	ldr	r0, [pc, #588]	; (80015e4 <HAL_I2C_Init+0x2a0>)
 8001396:	f7ff f9f0 	bl	800077a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_I2C_Init+0x72>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013aa:	d004      	beq.n	80013b6 <HAL_I2C_Init+0x72>
 80013ac:	f240 11c1 	movw	r1, #449	; 0x1c1
 80013b0:	488c      	ldr	r0, [pc, #560]	; (80015e4 <HAL_I2C_Init+0x2a0>)
 80013b2:	f7ff f9e2 	bl	800077a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <HAL_I2C_Init+0x8c>
 80013c6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80013ca:	4886      	ldr	r0, [pc, #536]	; (80015e4 <HAL_I2C_Init+0x2a0>)
 80013cc:	f7ff f9d5 	bl	800077a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013d8:	d009      	beq.n	80013ee <HAL_I2C_Init+0xaa>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80013e2:	d004      	beq.n	80013ee <HAL_I2C_Init+0xaa>
 80013e4:	f240 11c3 	movw	r1, #451	; 0x1c3
 80013e8:	487e      	ldr	r0, [pc, #504]	; (80015e4 <HAL_I2C_Init+0x2a0>)
 80013ea:	f7ff f9c6 	bl	800077a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <HAL_I2C_Init+0xc4>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d004      	beq.n	8001408 <HAL_I2C_Init+0xc4>
 80013fe:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001402:	4878      	ldr	r0, [pc, #480]	; (80015e4 <HAL_I2C_Init+0x2a0>)
 8001404:	f7ff f9b9 	bl	800077a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <HAL_I2C_Init+0xda>
 8001414:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001418:	4872      	ldr	r0, [pc, #456]	; (80015e4 <HAL_I2C_Init+0x2a0>)
 800141a:	f7ff f9ae 	bl	800077a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_I2C_Init+0xf4>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	2b40      	cmp	r3, #64	; 0x40
 800142c:	d004      	beq.n	8001438 <HAL_I2C_Init+0xf4>
 800142e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001432:	486c      	ldr	r0, [pc, #432]	; (80015e4 <HAL_I2C_Init+0x2a0>)
 8001434:	f7ff f9a1 	bl	800077a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <HAL_I2C_Init+0x10e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	2b80      	cmp	r3, #128	; 0x80
 8001446:	d004      	beq.n	8001452 <HAL_I2C_Init+0x10e>
 8001448:	f240 11c7 	movw	r1, #455	; 0x1c7
 800144c:	4865      	ldr	r0, [pc, #404]	; (80015e4 <HAL_I2C_Init+0x2a0>)
 800144e:	f7ff f994 	bl	800077a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff f8d0 	bl	800060c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2224      	movs	r2, #36	; 0x24
 8001470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a4:	f000 febe 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 80014a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <HAL_I2C_Init+0x2a8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d807      	bhi.n	80014c4 <HAL_I2C_Init+0x180>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4a4e      	ldr	r2, [pc, #312]	; (80015f0 <HAL_I2C_Init+0x2ac>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	bf94      	ite	ls
 80014bc:	2301      	movls	r3, #1
 80014be:	2300      	movhi	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	e006      	b.n	80014d2 <HAL_I2C_Init+0x18e>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a4b      	ldr	r2, [pc, #300]	; (80015f4 <HAL_I2C_Init+0x2b0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	bf94      	ite	ls
 80014cc:	2301      	movls	r3, #1
 80014ce:	2300      	movhi	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0fc      	b.n	80016d4 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4a46      	ldr	r2, [pc, #280]	; (80015f8 <HAL_I2C_Init+0x2b4>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0c9b      	lsrs	r3, r3, #18
 80014e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a38      	ldr	r2, [pc, #224]	; (80015ec <HAL_I2C_Init+0x2a8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d802      	bhi.n	8001514 <HAL_I2C_Init+0x1d0>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3301      	adds	r3, #1
 8001512:	e009      	b.n	8001528 <HAL_I2C_Init+0x1e4>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	4a37      	ldr	r2, [pc, #220]	; (80015fc <HAL_I2C_Init+0x2b8>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	3301      	adds	r3, #1
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	430b      	orrs	r3, r1
 800152e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800153a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	492a      	ldr	r1, [pc, #168]	; (80015ec <HAL_I2C_Init+0x2a8>)
 8001544:	428b      	cmp	r3, r1
 8001546:	d819      	bhi.n	800157c <HAL_I2C_Init+0x238>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1e59      	subs	r1, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fbb1 f3f3 	udiv	r3, r1, r3
 8001556:	1c59      	adds	r1, r3, #1
 8001558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800155c:	400b      	ands	r3, r1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00a      	beq.n	8001578 <HAL_I2C_Init+0x234>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1e59      	subs	r1, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001570:	3301      	adds	r3, #1
 8001572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001576:	e066      	b.n	8001646 <HAL_I2C_Init+0x302>
 8001578:	2304      	movs	r3, #4
 800157a:	e064      	b.n	8001646 <HAL_I2C_Init+0x302>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <HAL_I2C_Init+0x264>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1e58      	subs	r0, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	440b      	add	r3, r1
 8001592:	fbb0 f3f3 	udiv	r3, r0, r3
 8001596:	3301      	adds	r3, #1
 8001598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	e012      	b.n	80015ce <HAL_I2C_Init+0x28a>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1e58      	subs	r0, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	0099      	lsls	r1, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80015be:	3301      	adds	r3, #1
 80015c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d016      	beq.n	8001600 <HAL_I2C_Init+0x2bc>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e037      	b.n	8001646 <HAL_I2C_Init+0x302>
 80015d6:	bf00      	nop
 80015d8:	40005400 	.word	0x40005400
 80015dc:	40005800 	.word	0x40005800
 80015e0:	40005c00 	.word	0x40005c00
 80015e4:	08002334 	.word	0x08002334
 80015e8:	00061a80 	.word	0x00061a80
 80015ec:	000186a0 	.word	0x000186a0
 80015f0:	001e847f 	.word	0x001e847f
 80015f4:	003d08ff 	.word	0x003d08ff
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	10624dd3 	.word	0x10624dd3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10e      	bne.n	8001626 <HAL_I2C_Init+0x2e2>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1e58      	subs	r0, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	440b      	add	r3, r1
 8001616:	fbb0 f3f3 	udiv	r3, r0, r3
 800161a:	3301      	adds	r3, #1
 800161c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001624:	e00f      	b.n	8001646 <HAL_I2C_Init+0x302>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e58      	subs	r0, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	0099      	lsls	r1, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	fbb0 f3f3 	udiv	r3, r0, r3
 800163c:	3301      	adds	r3, #1
 800163e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	6809      	ldr	r1, [r1, #0]
 800164a:	4313      	orrs	r3, r2
 800164c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001674:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6911      	ldr	r1, [r2, #16]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	68d2      	ldr	r2, [r2, #12]
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	430b      	orrs	r3, r1
 8001688:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0201 	orr.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e316      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	d903      	bls.n	80016fe <HAL_RCC_OscConfig+0x22>
 80016f6:	21e8      	movs	r1, #232	; 0xe8
 80016f8:	48a3      	ldr	r0, [pc, #652]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	f7ff f83e 	bl	800077a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8088 	beq.w	800181c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00d      	beq.n	8001730 <HAL_RCC_OscConfig+0x54>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d008      	beq.n	8001730 <HAL_RCC_OscConfig+0x54>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001726:	d003      	beq.n	8001730 <HAL_RCC_OscConfig+0x54>
 8001728:	21ed      	movs	r1, #237	; 0xed
 800172a:	4897      	ldr	r0, [pc, #604]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	f7ff f825 	bl	800077a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001730:	4b96      	ldr	r3, [pc, #600]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b04      	cmp	r3, #4
 800173a:	d00c      	beq.n	8001756 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173c:	4b93      	ldr	r3, [pc, #588]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001744:	2b08      	cmp	r3, #8
 8001746:	d112      	bne.n	800176e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001748:	4b90      	ldr	r3, [pc, #576]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001754:	d10b      	bne.n	800176e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001756:	4b8d      	ldr	r3, [pc, #564]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d05b      	beq.n	800181a <HAL_RCC_OscConfig+0x13e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d157      	bne.n	800181a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e2d6      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0xaa>
 8001778:	4b84      	ldr	r3, [pc, #528]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a83      	ldr	r2, [pc, #524]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800177e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e01d      	b.n	80017c2 <HAL_RCC_OscConfig+0xe6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178e:	d10c      	bne.n	80017aa <HAL_RCC_OscConfig+0xce>
 8001790:	4b7e      	ldr	r3, [pc, #504]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a7d      	ldr	r2, [pc, #500]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001796:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b7b      	ldr	r3, [pc, #492]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a7a      	ldr	r2, [pc, #488]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e00b      	b.n	80017c2 <HAL_RCC_OscConfig+0xe6>
 80017aa:	4b78      	ldr	r3, [pc, #480]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a77      	ldr	r2, [pc, #476]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80017b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b75      	ldr	r3, [pc, #468]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a74      	ldr	r2, [pc, #464]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80017bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d013      	beq.n	80017f2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff f8f7 	bl	80009bc <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d2:	f7ff f8f3 	bl	80009bc <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b64      	cmp	r3, #100	; 0x64
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e29b      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e4:	4b69      	ldr	r3, [pc, #420]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0xf6>
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff f8e3 	bl	80009bc <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fa:	f7ff f8df 	bl	80009bc <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b64      	cmp	r3, #100	; 0x64
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e287      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180c:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x11e>
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d079      	beq.n	800191c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_RCC_OscConfig+0x166>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d004      	beq.n	8001842 <HAL_RCC_OscConfig+0x166>
 8001838:	f240 111f 	movw	r1, #287	; 0x11f
 800183c:	4852      	ldr	r0, [pc, #328]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800183e:	f7fe ff9c 	bl	800077a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b1f      	cmp	r3, #31
 8001848:	d904      	bls.n	8001854 <HAL_RCC_OscConfig+0x178>
 800184a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800184e:	484e      	ldr	r0, [pc, #312]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001850:	f7fe ff93 	bl	800077a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001854:	4b4d      	ldr	r3, [pc, #308]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001860:	4b4a      	ldr	r3, [pc, #296]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001868:	2b08      	cmp	r3, #8
 800186a:	d11c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186c:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d116      	bne.n	80018a6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001878:	4b44      	ldr	r3, [pc, #272]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x1b4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e245      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b3e      	ldr	r3, [pc, #248]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	493b      	ldr	r1, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a4:	e03a      	b.n	800191c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d020      	beq.n	80018f0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_RCC_OscConfig+0x2b4>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f882 	bl	80009bc <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff f87e 	bl	80009bc <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e226      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4928      	ldr	r1, [pc, #160]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x2b4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f861 	bl	80009bc <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff f85d 	bl	80009bc <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e205      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d046      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_OscConfig+0x266>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d004      	beq.n	8001942 <HAL_RCC_OscConfig+0x266>
 8001938:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800193c:	4812      	ldr	r0, [pc, #72]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800193e:	f7fe ff1c 	bl	800077a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d016      	beq.n	8001978 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_OscConfig+0x2b8>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff f834 	bl	80009bc <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff f830 	bl	80009bc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1d8      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x27c>
 8001976:	e01e      	b.n	80019b6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x2b8>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff f81d 	bl	80009bc <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e011      	b.n	80019aa <HAL_RCC_OscConfig+0x2ce>
 8001986:	bf00      	nop
 8001988:	0800236c 	.word	0x0800236c
 800198c:	40023800 	.word	0x40023800
 8001990:	42470000 	.word	0x42470000
 8001994:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff f810 	bl	80009bc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1b8      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019aa:	4b97      	ldr	r3, [pc, #604]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 80019ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80a8 	beq.w	8001b14 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00c      	beq.n	80019ea <HAL_RCC_OscConfig+0x30e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d008      	beq.n	80019ea <HAL_RCC_OscConfig+0x30e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d004      	beq.n	80019ea <HAL_RCC_OscConfig+0x30e>
 80019e0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80019e4:	4889      	ldr	r0, [pc, #548]	; (8001c0c <HAL_RCC_OscConfig+0x530>)
 80019e6:	f7fe fec8 	bl	800077a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ea:	4b87      	ldr	r3, [pc, #540]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10f      	bne.n	8001a16 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	4b83      	ldr	r3, [pc, #524]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a82      	ldr	r2, [pc, #520]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a12:	2301      	movs	r3, #1
 8001a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b7e      	ldr	r3, [pc, #504]	; (8001c10 <HAL_RCC_OscConfig+0x534>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d118      	bne.n	8001a54 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a22:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x534>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x534>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7fe ffc5 	bl	80009bc <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7fe ffc1 	bl	80009bc <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e169      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	4b71      	ldr	r3, [pc, #452]	; (8001c10 <HAL_RCC_OscConfig+0x534>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x38e>
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
 8001a68:	e01c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x3b0>
 8001a72:	4b65      	ldr	r3, [pc, #404]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	4a64      	ldr	r2, [pc, #400]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7e:	4b62      	ldr	r3, [pc, #392]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	4a61      	ldr	r2, [pc, #388]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c8>
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a90:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	6713      	str	r3, [r2, #112]	; 0x70
 8001a98:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001a9e:	f023 0304 	bic.w	r3, r3, #4
 8001aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d015      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7fe ff86 	bl	80009bc <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7fe ff82 	bl	80009bc <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e128      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aca:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0ee      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x3d8>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad8:	f7fe ff70 	bl	80009bc <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7fe ff6c 	bl	80009bc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e112      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af6:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ee      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a3e      	ldr	r2, [pc, #248]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x45a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_OscConfig+0x45a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d004      	beq.n	8001b36 <HAL_RCC_OscConfig+0x45a>
 8001b2c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001b30:	4836      	ldr	r0, [pc, #216]	; (8001c0c <HAL_RCC_OscConfig+0x530>)
 8001b32:	f7fe fe22 	bl	800077a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80ed 	beq.w	8001d1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b40:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <HAL_RCC_OscConfig+0x52c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	f000 80ae 	beq.w	8001caa <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	f040 8092 	bne.w	8001c7c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_RCC_OscConfig+0x498>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b68:	d004      	beq.n	8001b74 <HAL_RCC_OscConfig+0x498>
 8001b6a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001b6e:	4827      	ldr	r0, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x530>)
 8001b70:	f7fe fe03 	bl	800077a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	2b3f      	cmp	r3, #63	; 0x3f
 8001b7a:	d904      	bls.n	8001b86 <HAL_RCC_OscConfig+0x4aa>
 8001b7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001b80:	4822      	ldr	r0, [pc, #136]	; (8001c0c <HAL_RCC_OscConfig+0x530>)
 8001b82:	f7fe fdfa 	bl	800077a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2b31      	cmp	r3, #49	; 0x31
 8001b8c:	d904      	bls.n	8001b98 <HAL_RCC_OscConfig+0x4bc>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001b96:	d904      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x4c6>
 8001b98:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001b9c:	481b      	ldr	r0, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x530>)
 8001b9e:	f7fe fdec 	bl	800077a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d010      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4f0>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d00c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4f0>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d008      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4f0>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d004      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4f0>
 8001bc2:	f240 11db 	movw	r1, #475	; 0x1db
 8001bc6:	4811      	ldr	r0, [pc, #68]	; (8001c0c <HAL_RCC_OscConfig+0x530>)
 8001bc8:	f7fe fdd7 	bl	800077a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d903      	bls.n	8001bdc <HAL_RCC_OscConfig+0x500>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d904      	bls.n	8001be6 <HAL_RCC_OscConfig+0x50a>
 8001bdc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001be0:	480a      	ldr	r0, [pc, #40]	; (8001c0c <HAL_RCC_OscConfig+0x530>)
 8001be2:	f7fe fdca 	bl	800077a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_OscConfig+0x538>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7fe fee6 	bl	80009bc <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	e011      	b.n	8001c18 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7fe fee2 	bl	80009bc <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d90a      	bls.n	8001c18 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e08a      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	0800236c 	.word	0x0800236c
 8001c10:	40007000 	.word	0x40007000
 8001c14:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c18:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <HAL_RCC_OscConfig+0x648>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e7      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69da      	ldr	r2, [r3, #28]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	019b      	lsls	r3, r3, #6
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	085b      	lsrs	r3, r3, #1
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	041b      	lsls	r3, r3, #16
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	061b      	lsls	r3, r3, #24
 8001c48:	4936      	ldr	r1, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x648>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_RCC_OscConfig+0x64c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe feb2 	bl	80009bc <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe feae 	bl	80009bc <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e056      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_OscConfig+0x648>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x580>
 8001c7a:	e04e      	b.n	8001d1a <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x64c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7fe fe9b 	bl	80009bc <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7fe fe97 	bl	80009bc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e03f      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_RCC_OscConfig+0x648>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5ae>
 8001ca8:	e037      	b.n	8001d1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e032      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x648>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d028      	beq.n	8001d16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d121      	bne.n	8001d16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d11a      	bne.n	8001d16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d111      	bne.n	8001d16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	42470060 	.word	0x42470060

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e174      	b.n	800202a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x24>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d904      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x2e>
 8001d50:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8001d54:	487b      	ldr	r0, [pc, #492]	; (8001f44 <HAL_RCC_ClockConfig+0x218>)
 8001d56:	f7fe fd10 	bl	800077a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d019      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d016      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d013      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d010      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d00d      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d00a      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b06      	cmp	r3, #6
 8001d82:	d007      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b07      	cmp	r3, #7
 8001d88:	d004      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
 8001d8a:	f240 215d 	movw	r1, #605	; 0x25d
 8001d8e:	486d      	ldr	r0, [pc, #436]	; (8001f44 <HAL_RCC_ClockConfig+0x218>)
 8001d90:	f7fe fcf3 	bl	800077a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <HAL_RCC_ClockConfig+0x21c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d90c      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <HAL_RCC_ClockConfig+0x21c>)
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <HAL_RCC_ClockConfig+0x21c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e136      	b.n	800202a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d049      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd4:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	4a5c      	ldr	r2, [pc, #368]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dec:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d024      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x11e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b80      	cmp	r3, #128	; 0x80
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x11e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b90      	cmp	r3, #144	; 0x90
 8001e0e:	d01c      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x11e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2ba0      	cmp	r3, #160	; 0xa0
 8001e16:	d018      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x11e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2bb0      	cmp	r3, #176	; 0xb0
 8001e1e:	d014      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x11e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2bc0      	cmp	r3, #192	; 0xc0
 8001e26:	d010      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x11e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2bd0      	cmp	r3, #208	; 0xd0
 8001e2e:	d00c      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x11e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2be0      	cmp	r3, #224	; 0xe0
 8001e36:	d008      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x11e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2bf0      	cmp	r3, #240	; 0xf0
 8001e3e:	d004      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x11e>
 8001e40:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001e44:	483f      	ldr	r0, [pc, #252]	; (8001f44 <HAL_RCC_ClockConfig+0x218>)
 8001e46:	f7fe fc98 	bl	800077a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	493d      	ldr	r1, [pc, #244]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d059      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d010      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x166>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d00c      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x166>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x166>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d004      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x166>
 8001e88:	f240 2187 	movw	r1, #647	; 0x287
 8001e8c:	482d      	ldr	r0, [pc, #180]	; (8001f44 <HAL_RCC_ClockConfig+0x218>)
 8001e8e:	f7fe fc74 	bl	800077a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d119      	bne.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0bf      	b.n	800202a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d003      	beq.n	8001eba <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0af      	b.n	800202a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0a7      	b.n	800202a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f023 0203 	bic.w	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4919      	ldr	r1, [pc, #100]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eec:	f7fe fd66 	bl	80009bc <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f7fe fd62 	bl	80009bc <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e08f      	b.n	800202a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_RCC_ClockConfig+0x220>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 020c 	and.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1eb      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x21c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d212      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCC_ClockConfig+0x21c>)
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_ClockConfig+0x21c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d007      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e072      	b.n	800202a <HAL_RCC_ClockConfig+0x2fe>
 8001f44:	0800236c 	.word	0x0800236c
 8001f48:	40023c00 	.word	0x40023c00
 8001f4c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d025      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d018      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x26a>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6c:	d013      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x26a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001f76:	d00e      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x26a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x26a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001f8a:	d004      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x26a>
 8001f8c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8001f90:	4828      	ldr	r0, [pc, #160]	; (8002034 <HAL_RCC_ClockConfig+0x308>)
 8001f92:	f7fe fbf2 	bl	800077a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_RCC_ClockConfig+0x30c>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	4925      	ldr	r1, [pc, #148]	; (8002038 <HAL_RCC_ClockConfig+0x30c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d026      	beq.n	8002002 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d018      	beq.n	8001fee <HAL_RCC_ClockConfig+0x2c2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc4:	d013      	beq.n	8001fee <HAL_RCC_ClockConfig+0x2c2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001fce:	d00e      	beq.n	8001fee <HAL_RCC_ClockConfig+0x2c2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x2c2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001fe2:	d004      	beq.n	8001fee <HAL_RCC_ClockConfig+0x2c2>
 8001fe4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8001fe8:	4812      	ldr	r0, [pc, #72]	; (8002034 <HAL_RCC_ClockConfig+0x308>)
 8001fea:	f7fe fbc6 	bl	800077a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x30c>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_RCC_ClockConfig+0x30c>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002002:	f000 f821 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002006:	4602      	mov	r2, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x30c>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	490a      	ldr	r1, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x310>)
 8002014:	5ccb      	ldrb	r3, [r1, r3]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x314>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x318>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fc86 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	0800236c 	.word	0x0800236c
 8002038:	40023800 	.word	0x40023800
 800203c:	080023a4 	.word	0x080023a4
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	2300      	movs	r3, #0
 800205a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002060:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d00d      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x40>
 800206c:	2b08      	cmp	r3, #8
 800206e:	f200 80bd 	bhi.w	80021ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x34>
 8002076:	2b04      	cmp	r3, #4
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x3a>
 800207a:	e0b7      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800207e:	60bb      	str	r3, [r7, #8]
       break;
 8002080:	e0b7      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002082:	4b61      	ldr	r3, [pc, #388]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002084:	60bb      	str	r3, [r7, #8]
      break;
 8002086:	e0b4      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002088:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002090:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002092:	4b5b      	ldr	r3, [pc, #364]	; (8002200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d04d      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	4b58      	ldr	r3, [pc, #352]	; (8002200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	461a      	mov	r2, r3
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	ea02 0800 	and.w	r8, r2, r0
 80020b6:	ea03 0901 	and.w	r9, r3, r1
 80020ba:	4640      	mov	r0, r8
 80020bc:	4649      	mov	r1, r9
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	014b      	lsls	r3, r1, #5
 80020c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020cc:	0142      	lsls	r2, r0, #5
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	ebb0 0008 	subs.w	r0, r0, r8
 80020d6:	eb61 0109 	sbc.w	r1, r1, r9
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	018b      	lsls	r3, r1, #6
 80020e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020e8:	0182      	lsls	r2, r0, #6
 80020ea:	1a12      	subs	r2, r2, r0
 80020ec:	eb63 0301 	sbc.w	r3, r3, r1
 80020f0:	f04f 0000 	mov.w	r0, #0
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	00d9      	lsls	r1, r3, #3
 80020fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020fe:	00d0      	lsls	r0, r2, #3
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	eb12 0208 	adds.w	r2, r2, r8
 8002108:	eb43 0309 	adc.w	r3, r3, r9
 800210c:	f04f 0000 	mov.w	r0, #0
 8002110:	f04f 0100 	mov.w	r1, #0
 8002114:	0259      	lsls	r1, r3, #9
 8002116:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800211a:	0250      	lsls	r0, r2, #9
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	461a      	mov	r2, r3
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	f7fe f84c 	bl	80001c8 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4613      	mov	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e04a      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	461a      	mov	r2, r3
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	f240 10ff 	movw	r0, #511	; 0x1ff
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	ea02 0400 	and.w	r4, r2, r0
 8002152:	ea03 0501 	and.w	r5, r3, r1
 8002156:	4620      	mov	r0, r4
 8002158:	4629      	mov	r1, r5
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	014b      	lsls	r3, r1, #5
 8002164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002168:	0142      	lsls	r2, r0, #5
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	1b00      	subs	r0, r0, r4
 8002170:	eb61 0105 	sbc.w	r1, r1, r5
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	018b      	lsls	r3, r1, #6
 800217e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002182:	0182      	lsls	r2, r0, #6
 8002184:	1a12      	subs	r2, r2, r0
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	f04f 0000 	mov.w	r0, #0
 800218e:	f04f 0100 	mov.w	r1, #0
 8002192:	00d9      	lsls	r1, r3, #3
 8002194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002198:	00d0      	lsls	r0, r2, #3
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	1912      	adds	r2, r2, r4
 80021a0:	eb45 0303 	adc.w	r3, r5, r3
 80021a4:	f04f 0000 	mov.w	r0, #0
 80021a8:	f04f 0100 	mov.w	r1, #0
 80021ac:	0299      	lsls	r1, r3, #10
 80021ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021b2:	0290      	lsls	r0, r2, #10
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	461a      	mov	r2, r3
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	f7fe f800 	bl	80001c8 <__aeabi_uldivmod>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4613      	mov	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	60bb      	str	r3, [r7, #8]
      break;
 80021ea:	e002      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021ee:	60bb      	str	r3, [r7, #8]
      break;
 80021f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f2:	68bb      	ldr	r3, [r7, #8]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	00f42400 	.word	0x00f42400
 8002208:	007a1200 	.word	0x007a1200

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002228:	f7ff fff0 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0a9b      	lsrs	r3, r3, #10
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4903      	ldr	r1, [pc, #12]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	080023b4 	.word	0x080023b4

0800224c <__libc_init_array>:
 800224c:	b570      	push	{r4, r5, r6, lr}
 800224e:	4d0d      	ldr	r5, [pc, #52]	; (8002284 <__libc_init_array+0x38>)
 8002250:	4c0d      	ldr	r4, [pc, #52]	; (8002288 <__libc_init_array+0x3c>)
 8002252:	1b64      	subs	r4, r4, r5
 8002254:	10a4      	asrs	r4, r4, #2
 8002256:	2600      	movs	r6, #0
 8002258:	42a6      	cmp	r6, r4
 800225a:	d109      	bne.n	8002270 <__libc_init_array+0x24>
 800225c:	4d0b      	ldr	r5, [pc, #44]	; (800228c <__libc_init_array+0x40>)
 800225e:	4c0c      	ldr	r4, [pc, #48]	; (8002290 <__libc_init_array+0x44>)
 8002260:	f000 f820 	bl	80022a4 <_init>
 8002264:	1b64      	subs	r4, r4, r5
 8002266:	10a4      	asrs	r4, r4, #2
 8002268:	2600      	movs	r6, #0
 800226a:	42a6      	cmp	r6, r4
 800226c:	d105      	bne.n	800227a <__libc_init_array+0x2e>
 800226e:	bd70      	pop	{r4, r5, r6, pc}
 8002270:	f855 3b04 	ldr.w	r3, [r5], #4
 8002274:	4798      	blx	r3
 8002276:	3601      	adds	r6, #1
 8002278:	e7ee      	b.n	8002258 <__libc_init_array+0xc>
 800227a:	f855 3b04 	ldr.w	r3, [r5], #4
 800227e:	4798      	blx	r3
 8002280:	3601      	adds	r6, #1
 8002282:	e7f2      	b.n	800226a <__libc_init_array+0x1e>
 8002284:	080023c4 	.word	0x080023c4
 8002288:	080023c4 	.word	0x080023c4
 800228c:	080023c4 	.word	0x080023c4
 8002290:	080023c8 	.word	0x080023c8

08002294 <memset>:
 8002294:	4402      	add	r2, r0
 8002296:	4603      	mov	r3, r0
 8002298:	4293      	cmp	r3, r2
 800229a:	d100      	bne.n	800229e <memset+0xa>
 800229c:	4770      	bx	lr
 800229e:	f803 1b01 	strb.w	r1, [r3], #1
 80022a2:	e7f9      	b.n	8002298 <memset+0x4>

080022a4 <_init>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	bf00      	nop
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr

080022b0 <_fini>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	bf00      	nop
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr
