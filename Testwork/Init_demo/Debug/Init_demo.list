
Init_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007280  08007280  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007288  08007288  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800728c  0800728c  0001728c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001b70  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001cf0  20001cf0  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160cb  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032c3  00000000  00000000  0003627b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00039540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc0  00000000  00000000  0003a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002373d  00000000  00000000  0003b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e91  00000000  00000000  0005e73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6787  00000000  00000000  000725ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138d55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003880  00000000  00000000  00138da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070e8 	.word	0x080070e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	080070e8 	.word	0x080070e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	4b43      	ldr	r3, [pc, #268]	; (80005e8 <MX_GPIO_Init+0x128>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a42      	ldr	r2, [pc, #264]	; (80005e8 <MX_GPIO_Init+0x128>)
 80004e0:	f043 0320 	orr.w	r3, r3, #32
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b40      	ldr	r3, [pc, #256]	; (80005e8 <MX_GPIO_Init+0x128>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0320 	and.w	r3, r3, #32
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b3c      	ldr	r3, [pc, #240]	; (80005e8 <MX_GPIO_Init+0x128>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a3b      	ldr	r2, [pc, #236]	; (80005e8 <MX_GPIO_Init+0x128>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b39      	ldr	r3, [pc, #228]	; (80005e8 <MX_GPIO_Init+0x128>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <MX_GPIO_Init+0x128>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a34      	ldr	r2, [pc, #208]	; (80005e8 <MX_GPIO_Init+0x128>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <MX_GPIO_Init+0x128>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <MX_GPIO_Init+0x128>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a2d      	ldr	r2, [pc, #180]	; (80005e8 <MX_GPIO_Init+0x128>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <MX_GPIO_Init+0x128>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <MX_GPIO_Init+0x128>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <MX_GPIO_Init+0x128>)
 8000550:	f043 0310 	orr.w	r3, r3, #16
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <MX_GPIO_Init+0x128>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0310 	and.w	r3, r3, #16
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_C6_Pin|LED_C7_Pin|LED_C8_Pin|Buzzer_C9_Pin, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000568:	4820      	ldr	r0, [pc, #128]	; (80005ec <MX_GPIO_Init+0x12c>)
 800056a:	f000 fedb 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000574:	481e      	ldr	r0, [pc, #120]	; (80005f0 <MX_GPIO_Init+0x130>)
 8000576:	f000 fed5 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_C6_Pin|LED_C7_Pin|LED_C8_Pin|Buzzer_C9_Pin;
 800057a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4816      	ldr	r0, [pc, #88]	; (80005ec <MX_GPIO_Init+0x12c>)
 8000594:	f000 fbc0 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <MX_GPIO_Init+0x130>)
 80005b2:	f000 fbb1 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80005b6:	2302      	movs	r3, #2
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005ba:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <MX_GPIO_Init+0x134>)
 80005cc:	f000 fba4 	bl	8000d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	2007      	movs	r0, #7
 80005d6:	f000 fb4f 	bl	8000c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005da:	2007      	movs	r0, #7
 80005dc:	f000 fb78 	bl	8000cd0 <HAL_NVIC_EnableIRQ>

}
 80005e0:	bf00      	nop
 80005e2:	3728      	adds	r7, #40	; 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020800 	.word	0x40020800
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40021000 	.word	0x40021000

080005f8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C2_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_I2C2_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C2_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_I2C2_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C2_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2C2_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_I2C2_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_I2C2_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C2_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_I2C2_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2C2_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_I2C2_Init+0x50>)
 8000636:	f000 fee7 	bl	8001408 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f8ca 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200003c0 	.word	0x200003c0
 800064c:	40005800 	.word	0x40005800
 8000650:	000186a0 	.word	0x000186a0

08000654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a19      	ldr	r2, [pc, #100]	; (80006d8 <HAL_I2C_MspInit+0x84>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d12b      	bne.n	80006ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_I2C_MspInit+0x88>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <HAL_I2C_MspInit+0x88>)
 8000680:	f043 0320 	orr.w	r3, r3, #32
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_I2C_MspInit+0x88>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0320 	and.w	r3, r3, #32
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000692:	2303      	movs	r3, #3
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000696:	2312      	movs	r3, #18
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006a2:	2304      	movs	r3, #4
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <HAL_I2C_MspInit+0x8c>)
 80006ae:	f000 fb33 	bl	8000d18 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40005800 	.word	0x40005800
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40021400 	.word	0x40021400

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 f940 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f808 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f7ff fee6 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80006f4:	f7ff ff80 	bl	80005f8 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80006f8:	f005 ffaa 	bl	8006650 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <main+0x18>
	...

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fce2 	bl	80070d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <SystemClock_Config+0xd0>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a28      	ldr	r2, [pc, #160]	; (80007d0 <SystemClock_Config+0xd0>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <SystemClock_Config+0xd0>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <SystemClock_Config+0xd4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <SystemClock_Config+0xd4>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000766:	2301      	movs	r3, #1
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076a:	2310      	movs	r3, #16
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800077c:	2348      	movs	r3, #72	; 0x48
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000784:	2303      	movs	r3, #3
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f002 f99d 	bl	8002acc <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000798:	f000 f81e 	bl	80007d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fcb0 	bl	800311c <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007c2:	f000 f809 	bl	80007d8 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>

080007e2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f8bc 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80008a0:	2002      	movs	r0, #2
 80008a2:	f000 fd99 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <OTG_FS_IRQHandler+0x10>)
 80008b2:	f001 f8d8 	bl	8001a66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200018e8 	.word	0x200018e8

080008c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]

        if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 0)
 80008ca:	2102      	movs	r1, #2
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80008ce:	f000 fd03 	bl	80012d8 <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d104      	bne.n	80008e2 <HAL_GPIO_EXTI_Callback+0x22>
        {
            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 80008d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <HAL_GPIO_EXTI_Callback+0x30>)
 80008de:	f000 fd53 	bl	8001388 <HAL_GPIO_TogglePin>
        }

}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40020000 	.word	0x40020000

080008f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <SystemInit+0x20>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <SystemInit+0x20>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000934:	4c0b      	ldr	r4, [pc, #44]	; (8000964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000942:	f7ff ffd7 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f006 fba3 	bl	8007090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fecb 	bl	80006e4 <main>
  bx  lr    
 800094e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800095c:	08007290 	.word	0x08007290
  ldr r2, =_sbss
 8000960:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000964:	20001cf0 	.word	0x20001cf0

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_Init+0x40>)
 8000976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_Init+0x40>)
 8000982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_Init+0x40>)
 800098e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f94f 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	200f      	movs	r0, #15
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff ff2a 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023c00 	.word	0x40023c00

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f996 	bl	8000d00 <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f944 	bl	8000c78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000414 	.word	0x20000414

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000414 	.word	0x20000414

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d00f      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b06      	cmp	r3, #6
 8000c4a:	d00c      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d009      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d006      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d003      	beq.n	8000c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c5e:	2192      	movs	r1, #146	; 0x92
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c62:	f7ff fdbe 	bl	80007e2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff16 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08007100 	.word	0x08007100

08000c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d903      	bls.n	8000c98 <HAL_NVIC_SetPriority+0x20>
 8000c90:	21aa      	movs	r1, #170	; 0xaa
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <HAL_NVIC_SetPriority+0x54>)
 8000c94:	f7ff fda5 	bl	80007e2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	2b0f      	cmp	r3, #15
 8000c9c:	d903      	bls.n	8000ca6 <HAL_NVIC_SetPriority+0x2e>
 8000c9e:	21ab      	movs	r1, #171	; 0xab
 8000ca0:	480a      	ldr	r0, [pc, #40]	; (8000ccc <HAL_NVIC_SetPriority+0x54>)
 8000ca2:	f7ff fd9e 	bl	80007e2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca6:	f7ff ff1b 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000caa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	68b9      	ldr	r1, [r7, #8]
 8000cb0:	6978      	ldr	r0, [r7, #20]
 8000cb2:	f7ff ff6b 	bl	8000b8c <NVIC_EncodePriority>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff3a 	bl	8000b38 <__NVIC_SetPriority>
}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	08007100 	.word	0x08007100

08000cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	da03      	bge.n	8000cea <HAL_NVIC_EnableIRQ+0x1a>
 8000ce2:	21be      	movs	r1, #190	; 0xbe
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_NVIC_EnableIRQ+0x2c>)
 8000ce6:	f7ff fd7c 	bl	80007e2 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff04 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	08007100 	.word	0x08007100

08000d00 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff73 	bl	8000bf4 <SysTick_Config>
 8000d0e:	4603      	mov	r3, r0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a39      	ldr	r2, [pc, #228]	; (8000e18 <HAL_GPIO_Init+0x100>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d023      	beq.n	8000d7e <HAL_GPIO_Init+0x66>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <HAL_GPIO_Init+0x104>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01f      	beq.n	8000d7e <HAL_GPIO_Init+0x66>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a37      	ldr	r2, [pc, #220]	; (8000e20 <HAL_GPIO_Init+0x108>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01b      	beq.n	8000d7e <HAL_GPIO_Init+0x66>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a36      	ldr	r2, [pc, #216]	; (8000e24 <HAL_GPIO_Init+0x10c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d017      	beq.n	8000d7e <HAL_GPIO_Init+0x66>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a35      	ldr	r2, [pc, #212]	; (8000e28 <HAL_GPIO_Init+0x110>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0x66>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a34      	ldr	r2, [pc, #208]	; (8000e2c <HAL_GPIO_Init+0x114>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00f      	beq.n	8000d7e <HAL_GPIO_Init+0x66>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a33      	ldr	r2, [pc, #204]	; (8000e30 <HAL_GPIO_Init+0x118>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d00b      	beq.n	8000d7e <HAL_GPIO_Init+0x66>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a32      	ldr	r2, [pc, #200]	; (8000e34 <HAL_GPIO_Init+0x11c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_Init+0x66>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <HAL_GPIO_Init+0x120>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x66>
 8000d76:	21ac      	movs	r1, #172	; 0xac
 8000d78:	4830      	ldr	r0, [pc, #192]	; (8000e3c <HAL_GPIO_Init+0x124>)
 8000d7a:	f7ff fd32 	bl	80007e2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <HAL_GPIO_Init+0x7c>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	0c1b      	lsrs	r3, r3, #16
 8000d8e:	041b      	lsls	r3, r3, #16
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x84>
 8000d94:	21ad      	movs	r1, #173	; 0xad
 8000d96:	4829      	ldr	r0, [pc, #164]	; (8000e3c <HAL_GPIO_Init+0x124>)
 8000d98:	f7ff fd23 	bl	80007e2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d035      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d031      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b11      	cmp	r3, #17
 8000db2:	d02d      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d029      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b12      	cmp	r3, #18
 8000dc2:	d025      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000dcc:	d020      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000dd6:	d01b      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000de0:	d016      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000dea:	d011      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000df4:	d00c      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0xf8>
 8000e08:	21ae      	movs	r1, #174	; 0xae
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <HAL_GPIO_Init+0x124>)
 8000e0c:	f7ff fce9 	bl	80007e2 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	e240      	b.n	8001298 <HAL_GPIO_Init+0x580>
 8000e16:	bf00      	nop
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020c00 	.word	0x40020c00
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40021400 	.word	0x40021400
 8000e30:	40021800 	.word	0x40021800
 8000e34:	40021c00 	.word	0x40021c00
 8000e38:	40022000 	.word	0x40022000
 8000e3c:	0800713c 	.word	0x0800713c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 821a 	bne.w	8001292 <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d144      	bne.n	8000f00 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00f      	beq.n	8000e9e <HAL_GPIO_Init+0x186>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d00b      	beq.n	8000e9e <HAL_GPIO_Init+0x186>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d007      	beq.n	8000e9e <HAL_GPIO_Init+0x186>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x186>
 8000e96:	21c0      	movs	r1, #192	; 0xc0
 8000e98:	4892      	ldr	r0, [pc, #584]	; (80010e4 <HAL_GPIO_Init+0x3cc>)
 8000e9a:	f7ff fca2 	bl	80007e2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d027      	beq.n	8000f5c <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00b      	beq.n	8000f2c <HAL_GPIO_Init+0x214>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x214>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x214>
 8000f24:	21d1      	movs	r1, #209	; 0xd1
 8000f26:	486f      	ldr	r0, [pc, #444]	; (80010e4 <HAL_GPIO_Init+0x3cc>)
 8000f28:	f7ff fc5b 	bl	80007e2 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	f040 80bf 	bne.w	80010e8 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8093 	beq.w	800109a <HAL_GPIO_Init+0x382>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	f000 808e 	beq.w	800109a <HAL_GPIO_Init+0x382>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8089 	beq.w	800109a <HAL_GPIO_Init+0x382>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 8084 	beq.w	800109a <HAL_GPIO_Init+0x382>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d07f      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d07b      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d077      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d073      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d06f      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d06b      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d067      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d063      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d05f      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d05b      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d057      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	d053      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d04f      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2b09      	cmp	r3, #9
 8001000:	d04b      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b06      	cmp	r3, #6
 8001008:	d047      	beq.n	800109a <HAL_GPIO_Init+0x382>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	2b09      	cmp	r3, #9
 8001010:	d043      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b07      	cmp	r3, #7
 8001018:	d03f      	beq.n	800109a <HAL_GPIO_Init+0x382>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b07      	cmp	r3, #7
 8001020:	d03b      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b07      	cmp	r3, #7
 8001028:	d037      	beq.n	800109a <HAL_GPIO_Init+0x382>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	2b08      	cmp	r3, #8
 8001030:	d033      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b08      	cmp	r3, #8
 8001038:	d02f      	beq.n	800109a <HAL_GPIO_Init+0x382>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	2b08      	cmp	r3, #8
 8001040:	d02b      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d027      	beq.n	800109a <HAL_GPIO_Init+0x382>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	2b09      	cmp	r3, #9
 8001050:	d023      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	2b0a      	cmp	r3, #10
 8001058:	d01f      	beq.n	800109a <HAL_GPIO_Init+0x382>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	2b0a      	cmp	r3, #10
 8001060:	d01b      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b0b      	cmp	r3, #11
 8001068:	d017      	beq.n	800109a <HAL_GPIO_Init+0x382>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	2b0c      	cmp	r3, #12
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b0c      	cmp	r3, #12
 8001078:	d00f      	beq.n	800109a <HAL_GPIO_Init+0x382>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	2b0d      	cmp	r3, #13
 8001080:	d00b      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b0c      	cmp	r3, #12
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x382>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x382>
 8001092:	21de      	movs	r1, #222	; 0xde
 8001094:	4813      	ldr	r0, [pc, #76]	; (80010e4 <HAL_GPIO_Init+0x3cc>)
 8001096:	f7ff fba4 	bl	80007e2 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	69b9      	ldr	r1, [r7, #24]
 80010de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80010e2:	e001      	b.n	80010e8 <HAL_GPIO_Init+0x3d0>
 80010e4:	0800713c 	.word	0x0800713c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0203 	and.w	r2, r3, #3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80b4 	beq.w	8001292 <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <HAL_GPIO_Init+0x594>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a5e      	ldr	r2, [pc, #376]	; (80012ac <HAL_GPIO_Init+0x594>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <HAL_GPIO_Init+0x594>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001146:	4a5a      	ldr	r2, [pc, #360]	; (80012b0 <HAL_GPIO_Init+0x598>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a51      	ldr	r2, [pc, #324]	; (80012b4 <HAL_GPIO_Init+0x59c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d02b      	beq.n	80011ca <HAL_GPIO_Init+0x4b2>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a50      	ldr	r2, [pc, #320]	; (80012b8 <HAL_GPIO_Init+0x5a0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d025      	beq.n	80011c6 <HAL_GPIO_Init+0x4ae>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4f      	ldr	r2, [pc, #316]	; (80012bc <HAL_GPIO_Init+0x5a4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d01f      	beq.n	80011c2 <HAL_GPIO_Init+0x4aa>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_GPIO_Init+0x5a8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x4a6>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x5ac>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x4a2>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x5b0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x49e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <HAL_GPIO_Init+0x5b4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x49a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4a      	ldr	r2, [pc, #296]	; (80012d0 <HAL_GPIO_Init+0x5b8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x496>
 80011aa:	2307      	movs	r3, #7
 80011ac:	e00e      	b.n	80011cc <HAL_GPIO_Init+0x4b4>
 80011ae:	2308      	movs	r3, #8
 80011b0:	e00c      	b.n	80011cc <HAL_GPIO_Init+0x4b4>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e00a      	b.n	80011cc <HAL_GPIO_Init+0x4b4>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e008      	b.n	80011cc <HAL_GPIO_Init+0x4b4>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x4b4>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x4b4>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x4b4>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x4b4>
 80011ca:	2300      	movs	r3, #0
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	f002 0203 	and.w	r2, r2, #3
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011dc:	4934      	ldr	r1, [pc, #208]	; (80012b0 <HAL_GPIO_Init+0x598>)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ea:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <HAL_GPIO_Init+0x5bc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800120e:	4a31      	ldr	r2, [pc, #196]	; (80012d4 <HAL_GPIO_Init+0x5bc>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <HAL_GPIO_Init+0x5bc>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001238:	4a26      	ldr	r2, [pc, #152]	; (80012d4 <HAL_GPIO_Init+0x5bc>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <HAL_GPIO_Init+0x5bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <HAL_GPIO_Init+0x5bc>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_GPIO_Init+0x5bc>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <HAL_GPIO_Init+0x5bc>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b0f      	cmp	r3, #15
 800129c:	f67f add0 	bls.w	8000e40 <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021400 	.word	0x40021400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_GPIO_ReadPin+0x1c>
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	0c1b      	lsrs	r3, r3, #16
 80012ee:	041b      	lsls	r3, r3, #16
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d004      	beq.n	80012fe <HAL_GPIO_ReadPin+0x26>
 80012f4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <HAL_GPIO_ReadPin+0x48>)
 80012fa:	f7ff fa72 	bl	80007e2 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e001      	b.n	8001314 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800713c 	.word	0x0800713c

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <HAL_GPIO_WritePin+0x20>
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	0c1b      	lsrs	r3, r3, #16
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <HAL_GPIO_WritePin+0x2a>
 8001344:	f240 119d 	movw	r1, #413	; 0x19d
 8001348:	480e      	ldr	r0, [pc, #56]	; (8001384 <HAL_GPIO_WritePin+0x60>)
 800134a:	f7ff fa4a 	bl	80007e2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800134e:	787b      	ldrb	r3, [r7, #1]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <HAL_GPIO_WritePin+0x40>
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d004      	beq.n	8001364 <HAL_GPIO_WritePin+0x40>
 800135a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800135e:	4809      	ldr	r0, [pc, #36]	; (8001384 <HAL_GPIO_WritePin+0x60>)
 8001360:	f7ff fa3f 	bl	80007e2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001370:	e003      	b.n	800137a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	0800713c 	.word	0x0800713c

08001388 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <HAL_GPIO_TogglePin+0x1c>
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	0c1b      	lsrs	r3, r3, #16
 800139e:	041b      	lsls	r3, r3, #16
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <HAL_GPIO_TogglePin+0x26>
 80013a4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <HAL_GPIO_TogglePin+0x4c>)
 80013aa:	f7ff fa1a 	bl	80007e2 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b4:	887a      	ldrh	r2, [r7, #2]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	041a      	lsls	r2, r3, #16
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43d9      	mvns	r1, r3
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	400b      	ands	r3, r1
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0800713c 	.word	0x0800713c

080013d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fa62 	bl	80008c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1be      	b.n	8001798 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a9f      	ldr	r2, [pc, #636]	; (800169c <HAL_I2C_Init+0x294>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d00e      	beq.n	8001442 <HAL_I2C_Init+0x3a>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a9d      	ldr	r2, [pc, #628]	; (80016a0 <HAL_I2C_Init+0x298>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d009      	beq.n	8001442 <HAL_I2C_Init+0x3a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a9c      	ldr	r2, [pc, #624]	; (80016a4 <HAL_I2C_Init+0x29c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d004      	beq.n	8001442 <HAL_I2C_Init+0x3a>
 8001438:	f240 11bf 	movw	r1, #447	; 0x1bf
 800143c:	489a      	ldr	r0, [pc, #616]	; (80016a8 <HAL_I2C_Init+0x2a0>)
 800143e:	f7ff f9d0 	bl	80007e2 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <HAL_I2C_Init+0x4c>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a97      	ldr	r2, [pc, #604]	; (80016ac <HAL_I2C_Init+0x2a4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d904      	bls.n	800145e <HAL_I2C_Init+0x56>
 8001454:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001458:	4893      	ldr	r0, [pc, #588]	; (80016a8 <HAL_I2C_Init+0x2a0>)
 800145a:	f7ff f9c2 	bl	80007e2 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <HAL_I2C_Init+0x72>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800146e:	d004      	beq.n	800147a <HAL_I2C_Init+0x72>
 8001470:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001474:	488c      	ldr	r0, [pc, #560]	; (80016a8 <HAL_I2C_Init+0x2a0>)
 8001476:	f7ff f9b4 	bl	80007e2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001482:	f023 0303 	bic.w	r3, r3, #3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <HAL_I2C_Init+0x8c>
 800148a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800148e:	4886      	ldr	r0, [pc, #536]	; (80016a8 <HAL_I2C_Init+0x2a0>)
 8001490:	f7ff f9a7 	bl	80007e2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800149c:	d009      	beq.n	80014b2 <HAL_I2C_Init+0xaa>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80014a6:	d004      	beq.n	80014b2 <HAL_I2C_Init+0xaa>
 80014a8:	f240 11c3 	movw	r1, #451	; 0x1c3
 80014ac:	487e      	ldr	r0, [pc, #504]	; (80016a8 <HAL_I2C_Init+0x2a0>)
 80014ae:	f7ff f998 	bl	80007e2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <HAL_I2C_Init+0xc4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d004      	beq.n	80014cc <HAL_I2C_Init+0xc4>
 80014c2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80014c6:	4878      	ldr	r0, [pc, #480]	; (80016a8 <HAL_I2C_Init+0x2a0>)
 80014c8:	f7ff f98b 	bl	80007e2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <HAL_I2C_Init+0xda>
 80014d8:	f240 11c5 	movw	r1, #453	; 0x1c5
 80014dc:	4872      	ldr	r0, [pc, #456]	; (80016a8 <HAL_I2C_Init+0x2a0>)
 80014de:	f7ff f980 	bl	80007e2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <HAL_I2C_Init+0xf4>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	2b40      	cmp	r3, #64	; 0x40
 80014f0:	d004      	beq.n	80014fc <HAL_I2C_Init+0xf4>
 80014f2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80014f6:	486c      	ldr	r0, [pc, #432]	; (80016a8 <HAL_I2C_Init+0x2a0>)
 80014f8:	f7ff f973 	bl	80007e2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_I2C_Init+0x10e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	2b80      	cmp	r3, #128	; 0x80
 800150a:	d004      	beq.n	8001516 <HAL_I2C_Init+0x10e>
 800150c:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001510:	4865      	ldr	r0, [pc, #404]	; (80016a8 <HAL_I2C_Init+0x2a0>)
 8001512:	f7ff f966 	bl	80007e2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff f892 	bl	8000654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2224      	movs	r2, #36	; 0x24
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001568:	f002 f854 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 800156c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a4f      	ldr	r2, [pc, #316]	; (80016b0 <HAL_I2C_Init+0x2a8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d807      	bhi.n	8001588 <HAL_I2C_Init+0x180>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <HAL_I2C_Init+0x2ac>)
 800157c:	4293      	cmp	r3, r2
 800157e:	bf94      	ite	ls
 8001580:	2301      	movls	r3, #1
 8001582:	2300      	movhi	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	e006      	b.n	8001596 <HAL_I2C_Init+0x18e>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_I2C_Init+0x2b0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	bf94      	ite	ls
 8001590:	2301      	movls	r3, #1
 8001592:	2300      	movhi	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0fc      	b.n	8001798 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4a46      	ldr	r2, [pc, #280]	; (80016bc <HAL_I2C_Init+0x2b4>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0c9b      	lsrs	r3, r3, #18
 80015a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <HAL_I2C_Init+0x2a8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d802      	bhi.n	80015d8 <HAL_I2C_Init+0x1d0>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3301      	adds	r3, #1
 80015d6:	e009      	b.n	80015ec <HAL_I2C_Init+0x1e4>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	4a37      	ldr	r2, [pc, #220]	; (80016c0 <HAL_I2C_Init+0x2b8>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	099b      	lsrs	r3, r3, #6
 80015ea:	3301      	adds	r3, #1
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	430b      	orrs	r3, r1
 80015f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	492a      	ldr	r1, [pc, #168]	; (80016b0 <HAL_I2C_Init+0x2a8>)
 8001608:	428b      	cmp	r3, r1
 800160a:	d819      	bhi.n	8001640 <HAL_I2C_Init+0x238>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e59      	subs	r1, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fbb1 f3f3 	udiv	r3, r1, r3
 800161a:	1c59      	adds	r1, r3, #1
 800161c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001620:	400b      	ands	r3, r1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00a      	beq.n	800163c <HAL_I2C_Init+0x234>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e59      	subs	r1, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fbb1 f3f3 	udiv	r3, r1, r3
 8001634:	3301      	adds	r3, #1
 8001636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163a:	e066      	b.n	800170a <HAL_I2C_Init+0x302>
 800163c:	2304      	movs	r3, #4
 800163e:	e064      	b.n	800170a <HAL_I2C_Init+0x302>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <HAL_I2C_Init+0x264>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	440b      	add	r3, r1
 8001656:	fbb0 f3f3 	udiv	r3, r0, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	e012      	b.n	8001692 <HAL_I2C_Init+0x28a>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e58      	subs	r0, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	0099      	lsls	r1, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001682:	3301      	adds	r3, #1
 8001684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf0c      	ite	eq
 800168c:	2301      	moveq	r3, #1
 800168e:	2300      	movne	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d016      	beq.n	80016c4 <HAL_I2C_Init+0x2bc>
 8001696:	2301      	movs	r3, #1
 8001698:	e037      	b.n	800170a <HAL_I2C_Init+0x302>
 800169a:	bf00      	nop
 800169c:	40005400 	.word	0x40005400
 80016a0:	40005800 	.word	0x40005800
 80016a4:	40005c00 	.word	0x40005c00
 80016a8:	08007178 	.word	0x08007178
 80016ac:	00061a80 	.word	0x00061a80
 80016b0:	000186a0 	.word	0x000186a0
 80016b4:	001e847f 	.word	0x001e847f
 80016b8:	003d08ff 	.word	0x003d08ff
 80016bc:	431bde83 	.word	0x431bde83
 80016c0:	10624dd3 	.word	0x10624dd3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10e      	bne.n	80016ea <HAL_I2C_Init+0x2e2>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	440b      	add	r3, r1
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e8:	e00f      	b.n	800170a <HAL_I2C_Init+0x302>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1e58      	subs	r0, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6859      	ldr	r1, [r3, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	0099      	lsls	r1, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001700:	3301      	adds	r3, #1
 8001702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	6809      	ldr	r1, [r1, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69da      	ldr	r2, [r3, #28]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001738:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6911      	ldr	r1, [r2, #16]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	68d2      	ldr	r2, [r2, #12]
 8001744:	4311      	orrs	r1, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	430b      	orrs	r3, r1
 800174c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2220      	movs	r2, #32
 8001784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	b08f      	sub	sp, #60	; 0x3c
 80017a4:	af0a      	add	r7, sp, #40	; 0x28
 80017a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e11d      	b.n	80019ee <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ba:	d008      	beq.n	80017ce <HAL_PCD_Init+0x2e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a8d      	ldr	r2, [pc, #564]	; (80019f8 <HAL_PCD_Init+0x258>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d003      	beq.n	80017ce <HAL_PCD_Init+0x2e>
 80017c6:	2187      	movs	r1, #135	; 0x87
 80017c8:	488c      	ldr	r0, [pc, #560]	; (80019fc <HAL_PCD_Init+0x25c>)
 80017ca:	f7ff f80a 	bl	80007e2 <assert_failed>

  USBx = hpcd->Instance;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d106      	bne.n	80017ee <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f005 f93d 	bl	8006a68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2203      	movs	r2, #3
 80017f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f002 f82a 	bl	8003866 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	687e      	ldr	r6, [r7, #4]
 800181a:	466d      	mov	r5, sp
 800181c:	f106 0410 	add.w	r4, r6, #16
 8001820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001828:	e894 0003 	ldmia.w	r4, {r0, r1}
 800182c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001830:	1d33      	adds	r3, r6, #4
 8001832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001834:	6838      	ldr	r0, [r7, #0]
 8001836:	f001 ff01 	bl	800363c <USB_CoreInit>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0d0      	b.n	80019ee <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f002 f818 	bl	8003888 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e04a      	b.n	80018f4 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800185e:	7bfa      	ldrb	r2, [r7, #15]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	333d      	adds	r3, #61	; 0x3d
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	333c      	adds	r3, #60	; 0x3c
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	b298      	uxth	r0, r3
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	4602      	mov	r2, r0
 800189c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	333f      	adds	r3, #63	; 0x3f
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	3344      	adds	r3, #68	; 0x44
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3348      	adds	r3, #72	; 0x48
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	3350      	adds	r3, #80	; 0x50
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	3301      	adds	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d3af      	bcc.n	800185e <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	e044      	b.n	800198e <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	3301      	adds	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	d3b5      	bcc.n	8001904 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	687e      	ldr	r6, [r7, #4]
 80019a0:	466d      	mov	r5, sp
 80019a2:	f106 0410 	add.w	r4, r6, #16
 80019a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019b6:	1d33      	adds	r3, r6, #4
 80019b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ba:	6838      	ldr	r0, [r7, #0]
 80019bc:	f001 ffb0 	bl	8003920 <USB_DevInit>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00d      	b.n	80019ee <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f82c 	bl	8004a44 <USB_DevDisconnect>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40040000 	.word	0x40040000
 80019fc:	080071b0 	.word	0x080071b0

08001a00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_PCD_Start+0x1c>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e020      	b.n	8001a5e <HAL_PCD_Start+0x5e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d109      	bne.n	8001a40 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d005      	beq.n	8001a40 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 fefd 	bl	8003844 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 ffd7 	bl	8004a02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a66:	b590      	push	{r4, r7, lr}
 8001a68:	b08d      	sub	sp, #52	; 0x34
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 f895 	bl	8004bac <USB_GetMode>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f040 839d 	bne.w	80021c4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fff9 	bl	8004a86 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8393 	beq.w	80021c2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fff0 	bl	8004a86 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d107      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f002 0202 	and.w	r2, r2, #2
 8001abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 ffde 	bl	8004a86 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b10      	cmp	r3, #16
 8001ad2:	d161      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0210 	bic.w	r2, r2, #16
 8001ae2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f003 020f 	and.w	r2, r3, #15
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	3304      	adds	r3, #4
 8001b02:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	0c5b      	lsrs	r3, r3, #17
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d124      	bne.n	8001b5a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d035      	beq.n	8001b88 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	6a38      	ldr	r0, [r7, #32]
 8001b30:	f002 fe15 	bl	800475e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b40:	441a      	add	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b52:	441a      	add	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	e016      	b.n	8001b88 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	0c5b      	lsrs	r3, r3, #17
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d110      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6a38      	ldr	r0, [r7, #32]
 8001b72:	f002 fdf4 	bl	800475e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b82:	441a      	add	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0210 	orr.w	r2, r2, #16
 8001b96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 ff72 	bl	8004a86 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bac:	d16e      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 ff78 	bl	8004aac <USB_ReadDevAllOutEpInterrupt>
 8001bbc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bbe:	e062      	b.n	8001c86 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d057      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 ff9d 	bl	8004b14 <USB_ReadDevOutEPInterrupt>
 8001bda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fdb0 	bl	8002760 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c16:	461a      	mov	r2, r3
 8001c18:	2308      	movs	r3, #8
 8001c1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 feaa 	bl	8002978 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c56:	461a      	mov	r2, r3
 8001c58:	2320      	movs	r3, #32
 8001c5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c72:	461a      	mov	r2, r3
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d199      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fef8 	bl	8004a86 <USB_ReadInterrupts>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ca0:	f040 80c0 	bne.w	8001e24 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 ff19 	bl	8004ae0 <USB_ReadDevAllInEpInterrupt>
 8001cae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cb4:	e0b2      	b.n	8001e1c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80a7 	beq.w	8001e10 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 ff3f 	bl	8004b50 <USB_ReadDevInEPInterrupt>
 8001cd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d057      	beq.n	8001d8e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69f9      	ldr	r1, [r7, #28]
 8001cfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cfe:	4013      	ands	r3, r2
 8001d00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2301      	movs	r3, #1
 8001d12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d132      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	3348      	adds	r3, #72	; 0x48
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4403      	add	r3, r0
 8001d3c:	3344      	adds	r3, #68	; 0x44
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4419      	add	r1, r3
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4403      	add	r3, r0
 8001d50:	3348      	adds	r3, #72	; 0x48
 8001d52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d113      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x31c>
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	3350      	adds	r3, #80	; 0x50
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d108      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	f002 ff47 	bl	8004c10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4619      	mov	r1, r3
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f004 feee 	bl	8006b6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da4:	461a      	mov	r2, r3
 8001da6:	2308      	movs	r3, #8
 8001da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2340      	movs	r3, #64	; 0x40
 8001de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fc1b 	bl	8002646 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3301      	adds	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f47f af49 	bne.w	8001cb6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fe2c 	bl	8004a86 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e38:	d122      	bne.n	8001e80 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d108      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fe26 	bl	8002ab4 <HAL_PCDEx_LPM_Callback>
 8001e68:	e002      	b.n	8001e70 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f004 fef4 	bl	8006c58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fdfe 	bl	8004a86 <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e94:	d112      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f004 feb0 	bl	8006c0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001eba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fde0 	bl	8004a86 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	f040 80c7 	bne.w	8002062 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2110      	movs	r1, #16
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fe7a 	bl	8003be8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	e056      	b.n	8001fa8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f06:	461a      	mov	r2, r3
 8001f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1e:	0151      	lsls	r1, r2, #5
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	440a      	add	r2, r1
 8001f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f2c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3e:	0151      	lsls	r1, r2, #5
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	440a      	add	r2, r1
 8001f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	0151      	lsls	r1, r2, #5
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	440a      	add	r2, r1
 8001f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f92:	0151      	lsls	r1, r2, #5
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	440a      	add	r2, r1
 8001f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fa0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3a3      	bcc.n	8001efa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fde:	f043 030b 	orr.w	r3, r3, #11
 8001fe2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff4:	f043 030b 	orr.w	r3, r3, #11
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	e015      	b.n	8002028 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800200e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002012:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002022:	f043 030b 	orr.w	r3, r3, #11
 8002026:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002036:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800203a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800204c:	461a      	mov	r2, r3
 800204e:	f002 fddf 	bl	8004c10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002060:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fd0d 	bl	8004a86 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002076:	d124      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f002 fda3 	bl	8004bc8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f001 fe0b 	bl	8003ca2 <USB_GetDevSpeed>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681c      	ldr	r4, [r3, #0]
 8002098:	f001 fab0 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 800209c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	4620      	mov	r0, r4
 80020a8:	f001 fb2a 	bl	8003700 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f004 fd84 	bl	8006bba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fcdd 	bl	8004a86 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d10a      	bne.n	80020ec <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f004 fd61 	bl	8006b9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f002 0208 	and.w	r2, r2, #8
 80020ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 fcc8 	bl	8004a86 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002100:	d10f      	bne.n	8002122 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f004 fdc3 	bl	8006c98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fcad 	bl	8004a86 <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002136:	d10f      	bne.n	8002158 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4619      	mov	r1, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f004 fd96 	bl	8006c74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fc92 	bl	8004a86 <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d10a      	bne.n	8002184 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f004 fda4 	bl	8006cbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f002 fc7c 	bl	8004a86 <USB_ReadInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b04      	cmp	r3, #4
 8002196:	d115      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f004 fd94 	bl	8006cd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	e000      	b.n	80021c4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80021c2:	bf00      	nop
    }
  }
}
 80021c4:	3734      	adds	r7, #52	; 0x34
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd90      	pop	{r4, r7, pc}

080021ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_PCD_SetAddress+0x1a>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e013      	b.n	800220c <HAL_PCD_SetAddress+0x42>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 fbda 	bl	80049b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	70fb      	strb	r3, [r7, #3]
 8002226:	460b      	mov	r3, r1
 8002228:	803b      	strh	r3, [r7, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da0f      	bge.n	800225a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	3338      	adds	r3, #56	; 0x38
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	3304      	adds	r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	705a      	strb	r2, [r3, #1]
 8002258:	e00f      	b.n	800227a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002286:	883a      	ldrh	r2, [r7, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	78ba      	ldrb	r2, [r7, #2]
 8002290:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022a4:	78bb      	ldrb	r3, [r7, #2]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d102      	bne.n	80022b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_PCD_EP_Open+0xaa>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e00e      	b.n	80022dc <HAL_PCD_EP_Open+0xc8>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68f9      	ldr	r1, [r7, #12]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 fd0d 	bl	8003cec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022da:	7afb      	ldrb	r3, [r7, #11]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da0f      	bge.n	8002318 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	3338      	adds	r3, #56	; 0x38
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	705a      	strb	r2, [r3, #1]
 8002316:	e00f      	b.n	8002338 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 020f 	and.w	r2, r3, #15
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	3304      	adds	r3, #4
 8002330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_PCD_EP_Close+0x6e>
 800234e:	2302      	movs	r3, #2
 8002350:	e00e      	b.n	8002370 <HAL_PCD_EP_Close+0x8c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	4618      	mov	r0, r3
 8002362:	f001 fd4b 	bl	8003dfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	460b      	mov	r3, r1
 8002386:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	f003 020f 	and.w	r2, r3, #15
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	3304      	adds	r3, #4
 80023a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2200      	movs	r2, #0
 80023b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023d4:	7afb      	ldrb	r3, [r7, #11]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	6979      	ldr	r1, [r7, #20]
 80023ec:	f002 f826 	bl	800443c <USB_EP0StartXfer>
 80023f0:	e008      	b.n	8002404 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	6979      	ldr	r1, [r7, #20]
 8002400:	f001 fdd8 	bl	8003fb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002430:	681b      	ldr	r3, [r3, #0]
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	460b      	mov	r3, r1
 800244c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244e:	7afb      	ldrb	r3, [r7, #11]
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	3338      	adds	r3, #56	; 0x38
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	3304      	adds	r3, #4
 8002464:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2201      	movs	r2, #1
 800247c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247e:	7afb      	ldrb	r3, [r7, #11]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	b2da      	uxtb	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d102      	bne.n	8002498 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	6979      	ldr	r1, [r7, #20]
 80024b0:	f001 ffc4 	bl	800443c <USB_EP0StartXfer>
 80024b4:	e008      	b.n	80024c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	6979      	ldr	r1, [r7, #20]
 80024c4:	f001 fd76 	bl	8003fb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d901      	bls.n	80024f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e050      	b.n	8002592 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	da0f      	bge.n	8002518 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	f003 020f 	and.w	r2, r3, #15
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	3338      	adds	r3, #56	; 0x38
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	3304      	adds	r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	705a      	strb	r2, [r3, #1]
 8002516:	e00d      	b.n	8002534 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_PCD_EP_SetStall+0x82>
 8002550:	2302      	movs	r3, #2
 8002552:	e01e      	b.n	8002592 <HAL_PCD_EP_SetStall+0xc0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	4618      	mov	r0, r3
 8002564:	f002 f953 	bl	800480e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	b2d9      	uxtb	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002582:	461a      	mov	r2, r3
 8002584:	f002 fb44 	bl	8004c10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 020f 	and.w	r2, r3, #15
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d901      	bls.n	80025b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e042      	b.n	800263e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da0f      	bge.n	80025e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 020f 	and.w	r2, r3, #15
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	3338      	adds	r3, #56	; 0x38
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	705a      	strb	r2, [r3, #1]
 80025de:	e00f      	b.n	8002600 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	f003 020f 	and.w	r2, r3, #15
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	3304      	adds	r3, #4
 80025f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_PCD_EP_ClrStall+0x86>
 800261c:	2302      	movs	r3, #2
 800261e:	e00e      	b.n	800263e <HAL_PCD_EP_ClrStall+0xa4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68f9      	ldr	r1, [r7, #12]
 800262e:	4618      	mov	r0, r3
 8002630:	f002 f95b 	bl	80048ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b08a      	sub	sp, #40	; 0x28
 800264a:	af02      	add	r7, sp, #8
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	3338      	adds	r3, #56	; 0x38
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	3304      	adds	r3, #4
 800266c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	429a      	cmp	r2, r3
 8002678:	d901      	bls.n	800267e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06c      	b.n	8002758 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	429a      	cmp	r2, r3
 8002692:	d902      	bls.n	800269a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3303      	adds	r3, #3
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026a2:	e02b      	b.n	80026fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d902      	bls.n	80026c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3303      	adds	r3, #3
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68d9      	ldr	r1, [r3, #12]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4603      	mov	r3, r0
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f001 ffff 	bl	80046e2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	441a      	add	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	441a      	add	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	b29b      	uxth	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	429a      	cmp	r2, r3
 8002710:	d809      	bhi.n	8002726 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800271a:	429a      	cmp	r2, r3
 800271c:	d203      	bcs.n	8002726 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1be      	bne.n	80026a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	429a      	cmp	r2, r3
 8002730:	d811      	bhi.n	8002756 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	2201      	movs	r2, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	43db      	mvns	r3, r3
 800274c:	6939      	ldr	r1, [r7, #16]
 800274e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002752:	4013      	ands	r3, r2
 8002754:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	333c      	adds	r3, #60	; 0x3c
 8002778:	3304      	adds	r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 80a0 	bne.w	80028d8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d015      	beq.n	80027ce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a72      	ldr	r2, [pc, #456]	; (8002970 <PCD_EP_OutXfrComplete_int+0x210>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	f240 80dd 	bls.w	8002966 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80d7 	beq.w	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c4:	461a      	mov	r2, r3
 80027c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ca:	6093      	str	r3, [r2, #8]
 80027cc:	e0cb      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e4:	461a      	mov	r2, r3
 80027e6:	2320      	movs	r3, #32
 80027e8:	6093      	str	r3, [r2, #8]
 80027ea:	e0bc      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 80b7 	bne.w	8002966 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a5d      	ldr	r2, [pc, #372]	; (8002970 <PCD_EP_OutXfrComplete_int+0x210>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d90f      	bls.n	8002820 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002816:	461a      	mov	r2, r3
 8002818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800281c:	6093      	str	r3, [r2, #8]
 800281e:	e0a2      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002832:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	0159      	lsls	r1, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	440b      	add	r3, r1
 800283c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002846:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4403      	add	r3, r0
 8002856:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800285a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4403      	add	r3, r0
 800287e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4419      	add	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4403      	add	r3, r0
 8002894:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002898:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d114      	bne.n	80028ca <PCD_EP_OutXfrComplete_int+0x16a>
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d108      	bne.n	80028ca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028c2:	461a      	mov	r2, r3
 80028c4:	2101      	movs	r1, #1
 80028c6:	f002 f9a3 	bl	8004c10 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f004 f92f 	bl	8006b34 <HAL_PCD_DataOutStageCallback>
 80028d6:	e046      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <PCD_EP_OutXfrComplete_int+0x214>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d124      	bne.n	800292a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f6:	461a      	mov	r2, r3
 80028f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fc:	6093      	str	r3, [r2, #8]
 80028fe:	e032      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	2320      	movs	r3, #32
 800291a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f004 f906 	bl	8006b34 <HAL_PCD_DataOutStageCallback>
 8002928:	e01d      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d114      	bne.n	800295a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d108      	bne.n	800295a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002952:	461a      	mov	r2, r3
 8002954:	2100      	movs	r1, #0
 8002956:	f002 f95b 	bl	8004c10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f004 f8e7 	bl	8006b34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	4f54300a 	.word	0x4f54300a
 8002974:	4f54310a 	.word	0x4f54310a

08002978 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	333c      	adds	r3, #60	; 0x3c
 8002990:	3304      	adds	r3, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <PCD_EP_OutSetupPacket_int+0x88>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d90e      	bls.n	80029cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c4:	461a      	mov	r2, r3
 80029c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f004 f89f 	bl	8006b10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <PCD_EP_OutSetupPacket_int+0x88>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d90c      	bls.n	80029f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d108      	bne.n	80029f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029ec:	461a      	mov	r2, r3
 80029ee:	2101      	movs	r1, #1
 80029f0:	f002 f90e 	bl	8004c10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	4f54300a 	.word	0x4f54300a

08002a04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
 8002a10:	4613      	mov	r3, r2
 8002a12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a22:	883b      	ldrh	r3, [r7, #0]
 8002a24:	0419      	lsls	r1, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a30:	e028      	b.n	8002a84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e00d      	b.n	8002a62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	3340      	adds	r3, #64	; 0x40
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3ec      	bcc.n	8002a46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a6c:	883b      	ldrh	r3, [r7, #0]
 8002a6e:	0418      	lsls	r0, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	4302      	orrs	r2, r0
 8002a7c:	3340      	adds	r3, #64	; 0x40
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e316      	b.n	800310c <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	d903      	bls.n	8002aee <HAL_RCC_OscConfig+0x22>
 8002ae6:	21e8      	movs	r1, #232	; 0xe8
 8002ae8:	48a3      	ldr	r0, [pc, #652]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	f7fd fe7a 	bl	80007e2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8088 	beq.w	8002c0c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <HAL_RCC_OscConfig+0x54>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0c:	d008      	beq.n	8002b20 <HAL_RCC_OscConfig+0x54>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b16:	d003      	beq.n	8002b20 <HAL_RCC_OscConfig+0x54>
 8002b18:	21ed      	movs	r1, #237	; 0xed
 8002b1a:	4897      	ldr	r0, [pc, #604]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	f7fd fe61 	bl	80007e2 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b20:	4b96      	ldr	r3, [pc, #600]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d00c      	beq.n	8002b46 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2c:	4b93      	ldr	r3, [pc, #588]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d112      	bne.n	8002b5e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b38:	4b90      	ldr	r3, [pc, #576]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b44:	d10b      	bne.n	8002b5e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b46:	4b8d      	ldr	r3, [pc, #564]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d05b      	beq.n	8002c0a <HAL_RCC_OscConfig+0x13e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d157      	bne.n	8002c0a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e2d6      	b.n	800310c <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0xaa>
 8002b68:	4b84      	ldr	r3, [pc, #528]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a83      	ldr	r2, [pc, #524]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e01d      	b.n	8002bb2 <HAL_RCC_OscConfig+0xe6>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7e:	d10c      	bne.n	8002b9a <HAL_RCC_OscConfig+0xce>
 8002b80:	4b7e      	ldr	r3, [pc, #504]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a7d      	ldr	r2, [pc, #500]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b7b      	ldr	r3, [pc, #492]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a7a      	ldr	r2, [pc, #488]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e00b      	b.n	8002bb2 <HAL_RCC_OscConfig+0xe6>
 8002b9a:	4b78      	ldr	r3, [pc, #480]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a77      	ldr	r2, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	4b75      	ldr	r3, [pc, #468]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a74      	ldr	r2, [pc, #464]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d013      	beq.n	8002be2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bba:	f7fd ff3d 	bl	8000a38 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc2:	f7fd ff39 	bl	8000a38 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	; 0x64
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e29b      	b.n	800310c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd4:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0xf6>
 8002be0:	e014      	b.n	8002c0c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fd ff29 	bl	8000a38 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bea:	f7fd ff25 	bl	8000a38 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b64      	cmp	r3, #100	; 0x64
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e287      	b.n	800310c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfc:	4b5f      	ldr	r3, [pc, #380]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x11e>
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d079      	beq.n	8002d0c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_OscConfig+0x166>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d004      	beq.n	8002c32 <HAL_RCC_OscConfig+0x166>
 8002c28:	f240 111f 	movw	r1, #287	; 0x11f
 8002c2c:	4852      	ldr	r0, [pc, #328]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	f7fd fdd8 	bl	80007e2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b1f      	cmp	r3, #31
 8002c38:	d904      	bls.n	8002c44 <HAL_RCC_OscConfig+0x178>
 8002c3a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002c3e:	484e      	ldr	r0, [pc, #312]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	f7fd fdcf 	bl	80007e2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c44:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00b      	beq.n	8002c68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c50:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d11c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5c:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d116      	bne.n	8002c96 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c68:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_OscConfig+0x1b4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e245      	b.n	800310c <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	493b      	ldr	r1, [pc, #236]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c94:	e03a      	b.n	8002d0c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d020      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <HAL_RCC_OscConfig+0x2b4>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fd fec8 	bl	8000a38 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cac:	f7fd fec4 	bl	8000a38 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e226      	b.n	800310c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4928      	ldr	r1, [pc, #160]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
 8002cde:	e015      	b.n	8002d0c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_OscConfig+0x2b4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fd fea7 	bl	8000a38 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cee:	f7fd fea3 	bl	8000a38 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e205      	b.n	800310c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d046      	beq.n	8002da6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_OscConfig+0x266>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d004      	beq.n	8002d32 <HAL_RCC_OscConfig+0x266>
 8002d28:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002d2c:	4812      	ldr	r0, [pc, #72]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	f7fd fd58 	bl	80007e2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d016      	beq.n	8002d68 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_OscConfig+0x2b8>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fd fe7a 	bl	8000a38 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fd fe76 	bl	8000a38 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1d8      	b.n	800310c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x27c>
 8002d66:	e01e      	b.n	8002da6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_OscConfig+0x2b8>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fd fe63 	bl	8000a38 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	e011      	b.n	8002d9a <HAL_RCC_OscConfig+0x2ce>
 8002d76:	bf00      	nop
 8002d78:	080071e8 	.word	0x080071e8
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	42470000 	.word	0x42470000
 8002d84:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fd fe56 	bl	8000a38 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1b8      	b.n	800310c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9a:	4b97      	ldr	r3, [pc, #604]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80a8 	beq.w	8002f04 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00c      	beq.n	8002dda <HAL_RCC_OscConfig+0x30e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_OscConfig+0x30e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d004      	beq.n	8002dda <HAL_RCC_OscConfig+0x30e>
 8002dd0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002dd4:	4889      	ldr	r0, [pc, #548]	; (8002ffc <HAL_RCC_OscConfig+0x530>)
 8002dd6:	f7fd fd04 	bl	80007e2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dda:	4b87      	ldr	r3, [pc, #540]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	4b83      	ldr	r3, [pc, #524]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a82      	ldr	r2, [pc, #520]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b80      	ldr	r3, [pc, #512]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <HAL_RCC_OscConfig+0x534>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d118      	bne.n	8002e44 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e12:	4b7b      	ldr	r3, [pc, #492]	; (8003000 <HAL_RCC_OscConfig+0x534>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a7a      	ldr	r2, [pc, #488]	; (8003000 <HAL_RCC_OscConfig+0x534>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1e:	f7fd fe0b 	bl	8000a38 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7fd fe07 	bl	8000a38 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e169      	b.n	800310c <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	4b71      	ldr	r3, [pc, #452]	; (8003000 <HAL_RCC_OscConfig+0x534>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x38e>
 8002e4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a69      	ldr	r2, [pc, #420]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	e01c      	b.n	8002e94 <HAL_RCC_OscConfig+0x3c8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x3b0>
 8002e62:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a64      	ldr	r2, [pc, #400]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a61      	ldr	r2, [pc, #388]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0x3c8>
 8002e7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a5d      	ldr	r2, [pc, #372]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a5a      	ldr	r2, [pc, #360]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002e8e:	f023 0304 	bic.w	r3, r3, #4
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d015      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fd fdcc 	bl	8000a38 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fd fdc8 	bl	8000a38 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e128      	b.n	800310c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0ee      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x3d8>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7fd fdb6 	bl	8000a38 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7fd fdb2 	bl	8000a38 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e112      	b.n	800310c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee6:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ee      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	4a3e      	ldr	r2, [pc, #248]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x45a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_OscConfig+0x45a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d004      	beq.n	8002f26 <HAL_RCC_OscConfig+0x45a>
 8002f1c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002f20:	4836      	ldr	r0, [pc, #216]	; (8002ffc <HAL_RCC_OscConfig+0x530>)
 8002f22:	f7fd fc5e 	bl	80007e2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80ed 	beq.w	800310a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f30:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <HAL_RCC_OscConfig+0x52c>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	f000 80ae 	beq.w	800309a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	f040 8092 	bne.w	800306c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_RCC_OscConfig+0x498>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f58:	d004      	beq.n	8002f64 <HAL_RCC_OscConfig+0x498>
 8002f5a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002f5e:	4827      	ldr	r0, [pc, #156]	; (8002ffc <HAL_RCC_OscConfig+0x530>)
 8002f60:	f7fd fc3f 	bl	80007e2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	2b3f      	cmp	r3, #63	; 0x3f
 8002f6a:	d904      	bls.n	8002f76 <HAL_RCC_OscConfig+0x4aa>
 8002f6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002f70:	4822      	ldr	r0, [pc, #136]	; (8002ffc <HAL_RCC_OscConfig+0x530>)
 8002f72:	f7fd fc36 	bl	80007e2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	2b31      	cmp	r3, #49	; 0x31
 8002f7c:	d904      	bls.n	8002f88 <HAL_RCC_OscConfig+0x4bc>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002f86:	d904      	bls.n	8002f92 <HAL_RCC_OscConfig+0x4c6>
 8002f88:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002f8c:	481b      	ldr	r0, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x530>)
 8002f8e:	f7fd fc28 	bl	80007e2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d010      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4f0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d00c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4f0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4f0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d004      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4f0>
 8002fb2:	f240 11db 	movw	r1, #475	; 0x1db
 8002fb6:	4811      	ldr	r0, [pc, #68]	; (8002ffc <HAL_RCC_OscConfig+0x530>)
 8002fb8:	f7fd fc13 	bl	80007e2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d903      	bls.n	8002fcc <HAL_RCC_OscConfig+0x500>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	2b0f      	cmp	r3, #15
 8002fca:	d904      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x50a>
 8002fcc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002fd0:	480a      	ldr	r0, [pc, #40]	; (8002ffc <HAL_RCC_OscConfig+0x530>)
 8002fd2:	f7fd fc06 	bl	80007e2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_OscConfig+0x538>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fd fd2c 	bl	8000a38 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e011      	b.n	8003008 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fd fd28 	bl	8000a38 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d90a      	bls.n	8003008 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e08a      	b.n	800310c <HAL_RCC_OscConfig+0x640>
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	080071e8 	.word	0x080071e8
 8003000:	40007000 	.word	0x40007000
 8003004:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003008:	4b42      	ldr	r3, [pc, #264]	; (8003114 <HAL_RCC_OscConfig+0x648>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e7      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	019b      	lsls	r3, r3, #6
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	041b      	lsls	r3, r3, #16
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	061b      	lsls	r3, r3, #24
 8003038:	4936      	ldr	r1, [pc, #216]	; (8003114 <HAL_RCC_OscConfig+0x648>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800303e:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x64c>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fd fcf8 	bl	8000a38 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fd fcf4 	bl	8000a38 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e056      	b.n	800310c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x648>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x580>
 800306a:	e04e      	b.n	800310a <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306c:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <HAL_RCC_OscConfig+0x64c>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fd fce1 	bl	8000a38 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fd fcdd 	bl	8000a38 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e03f      	b.n	800310c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308c:	4b21      	ldr	r3, [pc, #132]	; (8003114 <HAL_RCC_OscConfig+0x648>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x5ae>
 8003098:	e037      	b.n	800310a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e032      	b.n	800310c <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x648>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d028      	beq.n	8003106 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d121      	bne.n	8003106 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d11a      	bne.n	8003106 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d6:	4013      	ands	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030de:	4293      	cmp	r3, r2
 80030e0:	d111      	bne.n	8003106 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	3b01      	subs	r3, #1
 80030f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40023800 	.word	0x40023800
 8003118:	42470060 	.word	0x42470060

0800311c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e174      	b.n	800341a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_RCC_ClockConfig+0x24>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d904      	bls.n	800314a <HAL_RCC_ClockConfig+0x2e>
 8003140:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8003144:	487b      	ldr	r0, [pc, #492]	; (8003334 <HAL_RCC_ClockConfig+0x218>)
 8003146:	f7fd fb4c 	bl	80007e2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d019      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d016      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d013      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d010      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d00d      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d00a      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b06      	cmp	r3, #6
 8003172:	d007      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b07      	cmp	r3, #7
 8003178:	d004      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
 800317a:	f240 215d 	movw	r1, #605	; 0x25d
 800317e:	486d      	ldr	r0, [pc, #436]	; (8003334 <HAL_RCC_ClockConfig+0x218>)
 8003180:	f7fd fb2f 	bl	80007e2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b6c      	ldr	r3, [pc, #432]	; (8003338 <HAL_RCC_ClockConfig+0x21c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d90c      	bls.n	80031ac <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b69      	ldr	r3, [pc, #420]	; (8003338 <HAL_RCC_ClockConfig+0x21c>)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b67      	ldr	r3, [pc, #412]	; (8003338 <HAL_RCC_ClockConfig+0x21c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e136      	b.n	800341a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d049      	beq.n	800324c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c4:	4b5d      	ldr	r3, [pc, #372]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a5c      	ldr	r2, [pc, #368]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 80031ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031dc:	4b57      	ldr	r3, [pc, #348]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a56      	ldr	r2, [pc, #344]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 80031e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d024      	beq.n	800323a <HAL_RCC_ClockConfig+0x11e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b80      	cmp	r3, #128	; 0x80
 80031f6:	d020      	beq.n	800323a <HAL_RCC_ClockConfig+0x11e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b90      	cmp	r3, #144	; 0x90
 80031fe:	d01c      	beq.n	800323a <HAL_RCC_ClockConfig+0x11e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2ba0      	cmp	r3, #160	; 0xa0
 8003206:	d018      	beq.n	800323a <HAL_RCC_ClockConfig+0x11e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2bb0      	cmp	r3, #176	; 0xb0
 800320e:	d014      	beq.n	800323a <HAL_RCC_ClockConfig+0x11e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2bc0      	cmp	r3, #192	; 0xc0
 8003216:	d010      	beq.n	800323a <HAL_RCC_ClockConfig+0x11e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2bd0      	cmp	r3, #208	; 0xd0
 800321e:	d00c      	beq.n	800323a <HAL_RCC_ClockConfig+0x11e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2be0      	cmp	r3, #224	; 0xe0
 8003226:	d008      	beq.n	800323a <HAL_RCC_ClockConfig+0x11e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2bf0      	cmp	r3, #240	; 0xf0
 800322e:	d004      	beq.n	800323a <HAL_RCC_ClockConfig+0x11e>
 8003230:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003234:	483f      	ldr	r0, [pc, #252]	; (8003334 <HAL_RCC_ClockConfig+0x218>)
 8003236:	f7fd fad4 	bl	80007e2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323a:	4b40      	ldr	r3, [pc, #256]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	493d      	ldr	r1, [pc, #244]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d059      	beq.n	800330c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x166>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d00c      	beq.n	8003282 <HAL_RCC_ClockConfig+0x166>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d008      	beq.n	8003282 <HAL_RCC_ClockConfig+0x166>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d004      	beq.n	8003282 <HAL_RCC_ClockConfig+0x166>
 8003278:	f240 2187 	movw	r1, #647	; 0x287
 800327c:	482d      	ldr	r0, [pc, #180]	; (8003334 <HAL_RCC_ClockConfig+0x218>)
 800327e:	f7fd fab0 	bl	80007e2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d119      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0bf      	b.n	800341a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0af      	b.n	800341a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b20      	ldr	r3, [pc, #128]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0a7      	b.n	800341a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4919      	ldr	r1, [pc, #100]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fd fbac 	bl	8000a38 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fd fba8 	bl	8000a38 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e08f      	b.n	800341a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_ClockConfig+0x220>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x21c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d212      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_RCC_ClockConfig+0x21c>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_ClockConfig+0x21c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d007      	beq.n	8003340 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e072      	b.n	800341a <HAL_RCC_ClockConfig+0x2fe>
 8003334:	080071e8 	.word	0x080071e8
 8003338:	40023c00 	.word	0x40023c00
 800333c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d025      	beq.n	8003398 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d018      	beq.n	8003386 <HAL_RCC_ClockConfig+0x26a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d013      	beq.n	8003386 <HAL_RCC_ClockConfig+0x26a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003366:	d00e      	beq.n	8003386 <HAL_RCC_ClockConfig+0x26a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x26a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800337a:	d004      	beq.n	8003386 <HAL_RCC_ClockConfig+0x26a>
 800337c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8003380:	4828      	ldr	r0, [pc, #160]	; (8003424 <HAL_RCC_ClockConfig+0x308>)
 8003382:	f7fd fa2e 	bl	80007e2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003386:	4b28      	ldr	r3, [pc, #160]	; (8003428 <HAL_RCC_ClockConfig+0x30c>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4925      	ldr	r1, [pc, #148]	; (8003428 <HAL_RCC_ClockConfig+0x30c>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d026      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d018      	beq.n	80033de <HAL_RCC_ClockConfig+0x2c2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b4:	d013      	beq.n	80033de <HAL_RCC_ClockConfig+0x2c2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033be:	d00e      	beq.n	80033de <HAL_RCC_ClockConfig+0x2c2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x2c2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80033d2:	d004      	beq.n	80033de <HAL_RCC_ClockConfig+0x2c2>
 80033d4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80033d8:	4812      	ldr	r0, [pc, #72]	; (8003424 <HAL_RCC_ClockConfig+0x308>)
 80033da:	f7fd fa02 	bl	80007e2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033de:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_RCC_ClockConfig+0x30c>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	490e      	ldr	r1, [pc, #56]	; (8003428 <HAL_RCC_ClockConfig+0x30c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033f2:	f000 f821 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80033f6:	4602      	mov	r2, r0
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_RCC_ClockConfig+0x30c>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	490a      	ldr	r1, [pc, #40]	; (800342c <HAL_RCC_ClockConfig+0x310>)
 8003404:	5ccb      	ldrb	r3, [r1, r3]
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	4a09      	ldr	r2, [pc, #36]	; (8003430 <HAL_RCC_ClockConfig+0x314>)
 800340c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_RCC_ClockConfig+0x318>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd facc 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	080071e8 	.word	0x080071e8
 8003428:	40023800 	.word	0x40023800
 800342c:	08007268 	.word	0x08007268
 8003430:	20000000 	.word	0x20000000
 8003434:	20000004 	.word	0x20000004

08003438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003438:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	2300      	movs	r3, #0
 800344a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003450:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d00d      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x40>
 800345c:	2b08      	cmp	r3, #8
 800345e:	f200 80bd 	bhi.w	80035dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x34>
 8003466:	2b04      	cmp	r3, #4
 8003468:	d003      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x3a>
 800346a:	e0b7      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800346e:	60bb      	str	r3, [r7, #8]
       break;
 8003470:	e0b7      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003472:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003474:	60bb      	str	r3, [r7, #8]
      break;
 8003476:	e0b4      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003478:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003480:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003482:	4b5b      	ldr	r3, [pc, #364]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d04d      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348e:	4b58      	ldr	r3, [pc, #352]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	099b      	lsrs	r3, r3, #6
 8003494:	461a      	mov	r2, r3
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	ea02 0800 	and.w	r8, r2, r0
 80034a6:	ea03 0901 	and.w	r9, r3, r1
 80034aa:	4640      	mov	r0, r8
 80034ac:	4649      	mov	r1, r9
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	014b      	lsls	r3, r1, #5
 80034b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034bc:	0142      	lsls	r2, r0, #5
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	ebb0 0008 	subs.w	r0, r0, r8
 80034c6:	eb61 0109 	sbc.w	r1, r1, r9
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	018b      	lsls	r3, r1, #6
 80034d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034d8:	0182      	lsls	r2, r0, #6
 80034da:	1a12      	subs	r2, r2, r0
 80034dc:	eb63 0301 	sbc.w	r3, r3, r1
 80034e0:	f04f 0000 	mov.w	r0, #0
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	00d9      	lsls	r1, r3, #3
 80034ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ee:	00d0      	lsls	r0, r2, #3
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	eb12 0208 	adds.w	r2, r2, r8
 80034f8:	eb43 0309 	adc.w	r3, r3, r9
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	0259      	lsls	r1, r3, #9
 8003506:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800350a:	0250      	lsls	r0, r2, #9
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	461a      	mov	r2, r3
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	f7fc fe54 	bl	80001c8 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e04a      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	461a      	mov	r2, r3
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	f240 10ff 	movw	r0, #511	; 0x1ff
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	ea02 0400 	and.w	r4, r2, r0
 8003542:	ea03 0501 	and.w	r5, r3, r1
 8003546:	4620      	mov	r0, r4
 8003548:	4629      	mov	r1, r5
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	014b      	lsls	r3, r1, #5
 8003554:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003558:	0142      	lsls	r2, r0, #5
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	1b00      	subs	r0, r0, r4
 8003560:	eb61 0105 	sbc.w	r1, r1, r5
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	018b      	lsls	r3, r1, #6
 800356e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003572:	0182      	lsls	r2, r0, #6
 8003574:	1a12      	subs	r2, r2, r0
 8003576:	eb63 0301 	sbc.w	r3, r3, r1
 800357a:	f04f 0000 	mov.w	r0, #0
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	00d9      	lsls	r1, r3, #3
 8003584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003588:	00d0      	lsls	r0, r2, #3
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	1912      	adds	r2, r2, r4
 8003590:	eb45 0303 	adc.w	r3, r5, r3
 8003594:	f04f 0000 	mov.w	r0, #0
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	0299      	lsls	r1, r3, #10
 800359e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035a2:	0290      	lsls	r0, r2, #10
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	f7fc fe08 	bl	80001c8 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	60bb      	str	r3, [r7, #8]
      break;
 80035da:	e002      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035de:	60bb      	str	r3, [r7, #8]
      break;
 80035e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e2:	68bb      	ldr	r3, [r7, #8]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	007a1200 	.word	0x007a1200

080035fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <HAL_RCC_GetHCLKFreq+0x14>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000000 	.word	0x20000000

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003618:	f7ff fff0 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	0a9b      	lsrs	r3, r3, #10
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4903      	ldr	r1, [pc, #12]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	08007278 	.word	0x08007278

0800363c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800363c:	b084      	sub	sp, #16
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	f107 001c 	add.w	r0, r7, #28
 800364a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	2b01      	cmp	r3, #1
 8003652:	d122      	bne.n	800369a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800367c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f001 fb1c 	bl	8004ccc <USB_CoreReset>
 8003694:	4603      	mov	r3, r0
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e01a      	b.n	80036d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f001 fb10 	bl	8004ccc <USB_CoreReset>
 80036ac:	4603      	mov	r3, r0
 80036ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
 80036c2:	e005      	b.n	80036d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d10b      	bne.n	80036ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f043 0206 	orr.w	r2, r3, #6
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036fa:	b004      	add	sp, #16
 80036fc:	4770      	bx	lr
	...

08003700 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d165      	bne.n	80037e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4a41      	ldr	r2, [pc, #260]	; (800381c <USB_SetTurnaroundTime+0x11c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d906      	bls.n	800372a <USB_SetTurnaroundTime+0x2a>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4a40      	ldr	r2, [pc, #256]	; (8003820 <USB_SetTurnaroundTime+0x120>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d202      	bcs.n	800372a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003724:	230f      	movs	r3, #15
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e062      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <USB_SetTurnaroundTime+0x120>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d306      	bcc.n	8003740 <USB_SetTurnaroundTime+0x40>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <USB_SetTurnaroundTime+0x124>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d202      	bcs.n	8003740 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800373a:	230e      	movs	r3, #14
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e057      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4a38      	ldr	r2, [pc, #224]	; (8003824 <USB_SetTurnaroundTime+0x124>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d306      	bcc.n	8003756 <USB_SetTurnaroundTime+0x56>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4a37      	ldr	r2, [pc, #220]	; (8003828 <USB_SetTurnaroundTime+0x128>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d202      	bcs.n	8003756 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003750:	230d      	movs	r3, #13
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e04c      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a33      	ldr	r2, [pc, #204]	; (8003828 <USB_SetTurnaroundTime+0x128>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d306      	bcc.n	800376c <USB_SetTurnaroundTime+0x6c>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4a32      	ldr	r2, [pc, #200]	; (800382c <USB_SetTurnaroundTime+0x12c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d802      	bhi.n	800376c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003766:	230c      	movs	r3, #12
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e041      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a2f      	ldr	r2, [pc, #188]	; (800382c <USB_SetTurnaroundTime+0x12c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d906      	bls.n	8003782 <USB_SetTurnaroundTime+0x82>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4a2e      	ldr	r2, [pc, #184]	; (8003830 <USB_SetTurnaroundTime+0x130>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d802      	bhi.n	8003782 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800377c:	230b      	movs	r3, #11
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e036      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <USB_SetTurnaroundTime+0x130>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d906      	bls.n	8003798 <USB_SetTurnaroundTime+0x98>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4a29      	ldr	r2, [pc, #164]	; (8003834 <USB_SetTurnaroundTime+0x134>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d802      	bhi.n	8003798 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003792:	230a      	movs	r3, #10
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e02b      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4a26      	ldr	r2, [pc, #152]	; (8003834 <USB_SetTurnaroundTime+0x134>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d906      	bls.n	80037ae <USB_SetTurnaroundTime+0xae>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <USB_SetTurnaroundTime+0x138>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d202      	bcs.n	80037ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037a8:	2309      	movs	r3, #9
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e020      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4a21      	ldr	r2, [pc, #132]	; (8003838 <USB_SetTurnaroundTime+0x138>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d306      	bcc.n	80037c4 <USB_SetTurnaroundTime+0xc4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4a20      	ldr	r2, [pc, #128]	; (800383c <USB_SetTurnaroundTime+0x13c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d802      	bhi.n	80037c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037be:	2308      	movs	r3, #8
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e015      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4a1d      	ldr	r2, [pc, #116]	; (800383c <USB_SetTurnaroundTime+0x13c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d906      	bls.n	80037da <USB_SetTurnaroundTime+0xda>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <USB_SetTurnaroundTime+0x140>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d202      	bcs.n	80037da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037d4:	2307      	movs	r3, #7
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e00a      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037da:	2306      	movs	r3, #6
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e007      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037e6:	2309      	movs	r3, #9
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e001      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037ec:	2309      	movs	r3, #9
 80037ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	00d8acbf 	.word	0x00d8acbf
 8003820:	00e4e1c0 	.word	0x00e4e1c0
 8003824:	00f42400 	.word	0x00f42400
 8003828:	01067380 	.word	0x01067380
 800382c:	011a499f 	.word	0x011a499f
 8003830:	01312cff 	.word	0x01312cff
 8003834:	014ca43f 	.word	0x014ca43f
 8003838:	016e3600 	.word	0x016e3600
 800383c:	01a6ab1f 	.word	0x01a6ab1f
 8003840:	01e84800 	.word	0x01e84800

08003844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d115      	bne.n	80038d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038b6:	2001      	movs	r0, #1
 80038b8:	f7fd f8ca 	bl	8000a50 <HAL_Delay>
      ms++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3301      	adds	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f001 f972 	bl	8004bac <USB_GetMode>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d01e      	beq.n	800390c <USB_SetCurrentMode+0x84>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b31      	cmp	r3, #49	; 0x31
 80038d2:	d9f0      	bls.n	80038b6 <USB_SetCurrentMode+0x2e>
 80038d4:	e01a      	b.n	800390c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d115      	bne.n	8003908 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038e8:	2001      	movs	r0, #1
 80038ea:	f7fd f8b1 	bl	8000a50 <HAL_Delay>
      ms++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3301      	adds	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f001 f959 	bl	8004bac <USB_GetMode>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <USB_SetCurrentMode+0x84>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b31      	cmp	r3, #49	; 0x31
 8003904:	d9f0      	bls.n	80038e8 <USB_SetCurrentMode+0x60>
 8003906:	e001      	b.n	800390c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e005      	b.n	8003918 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b32      	cmp	r3, #50	; 0x32
 8003910:	d101      	bne.n	8003916 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003920:	b084      	sub	sp, #16
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800392e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e009      	b.n	8003954 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	3340      	adds	r3, #64	; 0x40
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	2200      	movs	r2, #0
 800394c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3301      	adds	r3, #1
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b0e      	cmp	r3, #14
 8003958:	d9f2      	bls.n	8003940 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11c      	bne.n	800399a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396e:	f043 0302 	orr.w	r3, r3, #2
 8003972:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
 8003998:	e00b      	b.n	80039b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039b8:	461a      	mov	r2, r3
 80039ba:	2300      	movs	r3, #0
 80039bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	4619      	mov	r1, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039cc:	461a      	mov	r2, r3
 80039ce:	680b      	ldr	r3, [r1, #0]
 80039d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10c      	bne.n	80039f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039de:	2100      	movs	r1, #0
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f945 	bl	8003c70 <USB_SetDevSpeed>
 80039e6:	e008      	b.n	80039fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039e8:	2101      	movs	r1, #1
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f940 	bl	8003c70 <USB_SetDevSpeed>
 80039f0:	e003      	b.n	80039fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039f2:	2103      	movs	r1, #3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f93b 	bl	8003c70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039fa:	2110      	movs	r1, #16
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f8f3 	bl	8003be8 <USB_FlushTxFifo>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f90f 	bl	8003c30 <USB_FlushRxFifo>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a22:	461a      	mov	r2, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2300      	movs	r3, #0
 8003a32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	e043      	b.n	8003ace <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a5c:	d118      	bne.n	8003a90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	461a      	mov	r2, r3
 8003a72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	e013      	b.n	8003aa2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a86:	461a      	mov	r2, r3
 8003a88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e008      	b.n	8003aa2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ac6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	3301      	adds	r3, #1
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3b7      	bcc.n	8003a46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e043      	b.n	8003b64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003af2:	d118      	bne.n	8003b26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	461a      	mov	r2, r3
 8003b08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e013      	b.n	8003b38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	e008      	b.n	8003b38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	461a      	mov	r2, r3
 8003b34:	2300      	movs	r3, #0
 8003b36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b44:	461a      	mov	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b56:	461a      	mov	r2, r3
 8003b58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	3301      	adds	r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3b7      	bcc.n	8003adc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f043 0210 	orr.w	r2, r3, #16
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <USB_DevInit+0x2c4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f043 0208 	orr.w	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d107      	bne.n	8003bd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bcc:	f043 0304 	orr.w	r3, r3, #4
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003be0:	b004      	add	sp, #16
 8003be2:	4770      	bx	lr
 8003be4:	803c3800 	.word	0x803c3800

08003be8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <USB_FlushTxFifo+0x44>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e006      	b.n	8003c20 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d0f1      	beq.n	8003c02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	00030d40 	.word	0x00030d40

08003c30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2210      	movs	r2, #16
 8003c40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	4a08      	ldr	r2, [pc, #32]	; (8003c6c <USB_FlushRxFifo+0x3c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e006      	b.n	8003c60 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d0f1      	beq.n	8003c42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	00030d40 	.word	0x00030d40

08003c70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c90:	4313      	orrs	r3, r2
 8003c92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b087      	sub	sp, #28
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0306 	and.w	r3, r3, #6
 8003cba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	75fb      	strb	r3, [r7, #23]
 8003cc6:	e00a      	b.n	8003cde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d002      	beq.n	8003cd4 <USB_GetDevSpeed+0x32>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b06      	cmp	r3, #6
 8003cd2:	d102      	bne.n	8003cda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	75fb      	strb	r3, [r7, #23]
 8003cd8:	e001      	b.n	8003cde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cda:	230f      	movs	r3, #15
 8003cdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	785b      	ldrb	r3, [r3, #1]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d13a      	bne.n	8003d7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d155      	bne.n	8003dec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	78db      	ldrb	r3, [r3, #3]
 8003d5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	059b      	lsls	r3, r3, #22
 8003d62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d64:	4313      	orrs	r3, r2
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	0151      	lsls	r1, r2, #5
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	e036      	b.n	8003dec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	2101      	movs	r1, #1
 8003d90:	fa01 f303 	lsl.w	r3, r1, r3
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11a      	bne.n	8003dec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	78db      	ldrb	r3, [r3, #3]
 8003dd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	785b      	ldrb	r3, [r3, #1]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d161      	bne.n	8003edc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e2e:	d11f      	bne.n	8003e70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	0151      	lsls	r1, r2, #5
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	440a      	add	r2, r1
 8003e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	0151      	lsls	r1, r2, #5
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	440a      	add	r2, r1
 8003e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e90:	4013      	ands	r3, r2
 8003e92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	0159      	lsls	r1, r3, #5
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	440b      	add	r3, r1
 8003ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4b35      	ldr	r3, [pc, #212]	; (8003fac <USB_DeactivateEndpoint+0x1b0>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
 8003eda:	e060      	b.n	8003f9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef2:	d11f      	bne.n	8003f34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	0151      	lsls	r1, r2, #5
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	440a      	add	r2, r1
 8003f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	0151      	lsls	r1, r2, #5
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	440a      	add	r2, r1
 8003f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f54:	4013      	ands	r3, r2
 8003f56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	2101      	movs	r1, #1
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	43db      	mvns	r3, r3
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	0159      	lsls	r1, r3, #5
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	440b      	add	r3, r1
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	4619      	mov	r1, r3
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <USB_DeactivateEndpoint+0x1b4>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	ec337800 	.word	0xec337800
 8003fb0:	eff37800 	.word	0xeff37800

08003fb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	f040 815c 	bne.w	800428e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d132      	bne.n	8004044 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ffc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004020:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	440a      	add	r2, r1
 8004038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403c:	0cdb      	lsrs	r3, r3, #19
 800403e:	04db      	lsls	r3, r3, #19
 8004040:	6113      	str	r3, [r2, #16]
 8004042:	e074      	b.n	800412e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405e:	0cdb      	lsrs	r3, r3, #19
 8004060:	04db      	lsls	r3, r3, #19
 8004062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	440a      	add	r2, r1
 800407a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004082:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004086:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6959      	ldr	r1, [r3, #20]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	440b      	add	r3, r1
 80040a0:	1e59      	subs	r1, r3, #1
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040ac:	4b9d      	ldr	r3, [pc, #628]	; (8004324 <USB_EPStartXfer+0x370>)
 80040ae:	400b      	ands	r3, r1
 80040b0:	69b9      	ldr	r1, [r7, #24]
 80040b2:	0148      	lsls	r0, r1, #5
 80040b4:	69f9      	ldr	r1, [r7, #28]
 80040b6:	4401      	add	r1, r0
 80040b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040bc:	4313      	orrs	r3, r2
 80040be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d6:	69b9      	ldr	r1, [r7, #24]
 80040d8:	0148      	lsls	r0, r1, #5
 80040da:	69f9      	ldr	r1, [r7, #28]
 80040dc:	4401      	add	r1, r0
 80040de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040e2:	4313      	orrs	r3, r2
 80040e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	78db      	ldrb	r3, [r3, #3]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d11f      	bne.n	800412e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	440a      	add	r2, r1
 8004104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004108:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800410c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	440a      	add	r2, r1
 8004124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800412c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d14b      	bne.n	80041cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d009      	beq.n	8004150 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	78db      	ldrb	r3, [r3, #3]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d128      	bne.n	80041aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d110      	bne.n	800418a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	440a      	add	r2, r1
 800417e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004182:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	e00f      	b.n	80041aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e12f      	b.n	800442c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	78db      	ldrb	r3, [r3, #3]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d015      	beq.n	8004220 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8117 	beq.w	800442c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	2101      	movs	r1, #1
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	69f9      	ldr	r1, [r7, #28]
 8004216:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800421a:	4313      	orrs	r3, r2
 800421c:	634b      	str	r3, [r1, #52]	; 0x34
 800421e:	e105      	b.n	800442c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d110      	bne.n	8004252 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	0151      	lsls	r1, r2, #5
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	440a      	add	r2, r1
 8004246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	e00f      	b.n	8004272 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	0151      	lsls	r1, r2, #5
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	440a      	add	r2, r1
 8004268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004270:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	68d9      	ldr	r1, [r3, #12]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	b298      	uxth	r0, r3
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	4603      	mov	r3, r0
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fa2b 	bl	80046e2 <USB_WritePacket>
 800428c:	e0ce      	b.n	800442c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a8:	0cdb      	lsrs	r3, r3, #19
 80042aa:	04db      	lsls	r3, r3, #19
 80042ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	0151      	lsls	r1, r2, #5
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	440a      	add	r2, r1
 80042c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d126      	bne.n	8004328 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	0148      	lsls	r0, r1, #5
 80042f4:	69f9      	ldr	r1, [r7, #28]
 80042f6:	4401      	add	r1, r0
 80042f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042fc:	4313      	orrs	r3, r2
 80042fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800431e:	6113      	str	r3, [r2, #16]
 8004320:	e036      	b.n	8004390 <USB_EPStartXfer+0x3dc>
 8004322:	bf00      	nop
 8004324:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4413      	add	r3, r2
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	8afb      	ldrh	r3, [r7, #22]
 800434e:	04d9      	lsls	r1, r3, #19
 8004350:	4b39      	ldr	r3, [pc, #228]	; (8004438 <USB_EPStartXfer+0x484>)
 8004352:	400b      	ands	r3, r1
 8004354:	69b9      	ldr	r1, [r7, #24]
 8004356:	0148      	lsls	r0, r1, #5
 8004358:	69f9      	ldr	r1, [r7, #28]
 800435a:	4401      	add	r1, r0
 800435c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004360:	4313      	orrs	r3, r2
 8004362:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	8af9      	ldrh	r1, [r7, #22]
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004380:	69b9      	ldr	r1, [r7, #24]
 8004382:	0148      	lsls	r0, r1, #5
 8004384:	69f9      	ldr	r1, [r7, #28]
 8004386:	4401      	add	r1, r0
 8004388:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800438c:	4313      	orrs	r3, r2
 800438e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10d      	bne.n	80043b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	68d9      	ldr	r1, [r3, #12]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ae:	460a      	mov	r2, r1
 80043b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	78db      	ldrb	r3, [r3, #3]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d128      	bne.n	800440c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d110      	bne.n	80043ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e00f      	b.n	800440c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	0151      	lsls	r1, r2, #5
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	440a      	add	r2, r1
 8004422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004426:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800442a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	1ff80000 	.word	0x1ff80000

0800443c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	2b01      	cmp	r3, #1
 800445a:	f040 80cd 	bne.w	80045f8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d132      	bne.n	80044cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	0151      	lsls	r1, r2, #5
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	440a      	add	r2, r1
 800447c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004480:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004484:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	0151      	lsls	r1, r2, #5
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	440a      	add	r2, r1
 80044c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c4:	0cdb      	lsrs	r3, r3, #19
 80044c6:	04db      	lsls	r3, r3, #19
 80044c8:	6113      	str	r3, [r2, #16]
 80044ca:	e04e      	b.n	800456a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e6:	0cdb      	lsrs	r3, r3, #19
 80044e8:	04db      	lsls	r3, r3, #19
 80044ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	0151      	lsls	r1, r2, #5
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	440a      	add	r2, r1
 8004502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004506:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800450a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800450e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	d903      	bls.n	8004524 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800455a:	6939      	ldr	r1, [r7, #16]
 800455c:	0148      	lsls	r0, r1, #5
 800455e:	6979      	ldr	r1, [r7, #20]
 8004560:	4401      	add	r1, r0
 8004562:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004566:	4313      	orrs	r3, r2
 8004568:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d11e      	bne.n	80045ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	461a      	mov	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e092      	b.n	80046d4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d07e      	beq.n	80046d4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	2101      	movs	r1, #1
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	6979      	ldr	r1, [r7, #20]
 80045ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045f2:	4313      	orrs	r3, r2
 80045f4:	634b      	str	r3, [r1, #52]	; 0x34
 80045f6:	e06d      	b.n	80046d4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004612:	0cdb      	lsrs	r3, r3, #19
 8004614:	04db      	lsls	r3, r3, #19
 8004616:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004632:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004636:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800463a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	440a      	add	r2, r1
 8004662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800466a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004682:	6939      	ldr	r1, [r7, #16]
 8004684:	0148      	lsls	r0, r1, #5
 8004686:	6979      	ldr	r1, [r7, #20]
 8004688:	4401      	add	r1, r0
 800468a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800468e:	4313      	orrs	r3, r2
 8004690:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d10d      	bne.n	80046b4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	68d9      	ldr	r1, [r3, #12]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	460a      	mov	r2, r1
 80046b2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b089      	sub	sp, #36	; 0x24
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	4611      	mov	r1, r2
 80046ee:	461a      	mov	r2, r3
 80046f0:	460b      	mov	r3, r1
 80046f2:	71fb      	strb	r3, [r7, #7]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004700:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d123      	bne.n	8004750 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004708:	88bb      	ldrh	r3, [r7, #4]
 800470a:	3303      	adds	r3, #3
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	e018      	b.n	8004748 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	031a      	lsls	r2, r3, #12
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4413      	add	r3, r2
 800471e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004722:	461a      	mov	r2, r3
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6013      	str	r3, [r2, #0]
      pSrc++;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3301      	adds	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3301      	adds	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3301      	adds	r3, #1
 800473a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	3301      	adds	r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	3301      	adds	r3, #1
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	429a      	cmp	r2, r3
 800474e:	d3e2      	bcc.n	8004716 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3724      	adds	r7, #36	; 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800475e:	b480      	push	{r7}
 8004760:	b08b      	sub	sp, #44	; 0x2c
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	4613      	mov	r3, r2
 800476a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004774:	88fb      	ldrh	r3, [r7, #6]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	b29b      	uxth	r3, r3
 800477a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004784:	2300      	movs	r3, #0
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	e014      	b.n	80047b4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	601a      	str	r2, [r3, #0]
    pDest++;
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	3301      	adds	r3, #1
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	3301      	adds	r3, #1
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	3301      	adds	r3, #1
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	3301      	adds	r3, #1
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	3301      	adds	r3, #1
 80047b2:	623b      	str	r3, [r7, #32]
 80047b4:	6a3a      	ldr	r2, [r7, #32]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d3e6      	bcc.n	800478a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047bc:	8bfb      	ldrh	r3, [r7, #30]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01e      	beq.n	8004800 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047cc:	461a      	mov	r2, r3
 80047ce:	f107 0310 	add.w	r3, r7, #16
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	fa22 f303 	lsr.w	r3, r2, r3
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	701a      	strb	r2, [r3, #0]
      i++;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	3301      	adds	r3, #1
 80047ec:	623b      	str	r3, [r7, #32]
      pDest++;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3301      	adds	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047f4:	8bfb      	ldrh	r3, [r7, #30]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047fa:	8bfb      	ldrh	r3, [r7, #30]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ea      	bne.n	80047d6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004802:	4618      	mov	r0, r3
 8004804:	372c      	adds	r7, #44	; 0x2c
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d12c      	bne.n	8004884 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	db12      	blt.n	8004862 <USB_EPSetStall+0x54>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00f      	beq.n	8004862 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004860:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	e02b      	b.n	80048dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	db12      	blt.n	80048bc <USB_EPSetStall+0xae>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00f      	beq.n	80048bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d128      	bne.n	8004958 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004920:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004924:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	78db      	ldrb	r3, [r3, #3]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d003      	beq.n	8004936 <USB_EPClearStall+0x4c>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	78db      	ldrb	r3, [r3, #3]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d138      	bne.n	80049a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e027      	b.n	80049a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	440a      	add	r2, r1
 800496e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004976:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	78db      	ldrb	r3, [r3, #3]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d003      	beq.n	8004988 <USB_EPClearStall+0x9e>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	78db      	ldrb	r3, [r3, #3]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d10f      	bne.n	80049a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80049ea:	68f9      	ldr	r1, [r7, #12]
 80049ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a1c:	f023 0303 	bic.w	r3, r3, #3
 8004a20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a30:	f023 0302 	bic.w	r3, r3, #2
 8004a34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a5e:	f023 0303 	bic.w	r3, r3, #3
 8004a62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a72:	f043 0302 	orr.w	r3, r3, #2
 8004a76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4013      	ands	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	b29b      	uxth	r3, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b42:	68bb      	ldr	r3, [r7, #8]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b80:	01db      	lsls	r3, r3, #7
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004be6:	f023 0307 	bic.w	r3, r3, #7
 8004bea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	333c      	adds	r3, #60	; 0x3c
 8004c26:	3304      	adds	r3, #4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4a26      	ldr	r2, [pc, #152]	; (8004cc8 <USB_EP0_OutStart+0xb8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d90a      	bls.n	8004c4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c44:	d101      	bne.n	8004c4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e037      	b.n	8004cba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	461a      	mov	r2, r3
 8004c52:	2300      	movs	r3, #0
 8004c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c78:	f043 0318 	orr.w	r3, r3, #24
 8004c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c92:	7afb      	ldrb	r3, [r7, #11]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d10f      	bne.n	8004cb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	4f54300a 	.word	0x4f54300a

08004ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	4a13      	ldr	r2, [pc, #76]	; (8004d2c <USB_CoreReset+0x60>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e01a      	b.n	8004d1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	daf3      	bge.n	8004cd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3301      	adds	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <USB_CoreReset+0x60>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d901      	bls.n	8004d10 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e006      	b.n	8004d1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d0f1      	beq.n	8004d00 <USB_CoreReset+0x34>

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	00030d40 	.word	0x00030d40

08004d30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d40:	f002 f962 	bl	8007008 <USBD_static_malloc>
 8004d44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004d54:	2302      	movs	r3, #2
 8004d56:	e066      	b.n	8004e26 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7c1b      	ldrb	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d119      	bne.n	8004d9c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	2181      	movs	r1, #129	; 0x81
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f002 f826 	bl	8006dc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d80:	2202      	movs	r2, #2
 8004d82:	2101      	movs	r1, #1
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f002 f81c 	bl	8006dc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2210      	movs	r2, #16
 8004d96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004d9a:	e016      	b.n	8004dca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d9c:	2340      	movs	r3, #64	; 0x40
 8004d9e:	2202      	movs	r2, #2
 8004da0:	2181      	movs	r1, #129	; 0x81
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f002 f80d 	bl	8006dc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004dae:	2340      	movs	r3, #64	; 0x40
 8004db0:	2202      	movs	r2, #2
 8004db2:	2101      	movs	r1, #1
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f002 f804 	bl	8006dc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2210      	movs	r2, #16
 8004dc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004dca:	2308      	movs	r3, #8
 8004dcc:	2203      	movs	r2, #3
 8004dce:	2182      	movs	r1, #130	; 0x82
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f001 fff6 	bl	8006dc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7c1b      	ldrb	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f002 f8c7 	bl	8006fa0 <USBD_LL_PrepareReceive>
 8004e12:	e007      	b.n	8004e24 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e1a:	2340      	movs	r3, #64	; 0x40
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f002 f8be 	bl	8006fa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e3a:	2181      	movs	r1, #129	; 0x81
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f001 ffe6 	bl	8006e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e48:	2101      	movs	r1, #1
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 ffdf 	bl	8006e0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004e58:	2182      	movs	r1, #130	; 0x82
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f001 ffd7 	bl	8006e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00e      	beq.n	8004e98 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f002 f8ca 	bl	8007024 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0af      	b.n	800502c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d03f      	beq.n	8004f58 <USBD_CDC_Setup+0xb4>
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	f040 809f 	bne.w	800501c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	88db      	ldrh	r3, [r3, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02e      	beq.n	8004f44 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	da16      	bge.n	8004f1e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004efc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	88d2      	ldrh	r2, [r2, #6]
 8004f02:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	88db      	ldrh	r3, [r3, #6]
 8004f08:	2b07      	cmp	r3, #7
 8004f0a:	bf28      	it	cs
 8004f0c:	2307      	movcs	r3, #7
 8004f0e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	89fa      	ldrh	r2, [r7, #14]
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 fb19 	bl	800654e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004f1c:	e085      	b.n	800502a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	785a      	ldrb	r2, [r3, #1]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	88db      	ldrh	r3, [r3, #6]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004f34:	6939      	ldr	r1, [r7, #16]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	88db      	ldrh	r3, [r3, #6]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 fb32 	bl	80065a6 <USBD_CtlPrepareRx>
      break;
 8004f42:	e072      	b.n	800502a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	7850      	ldrb	r0, [r2, #1]
 8004f50:	2200      	movs	r2, #0
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	4798      	blx	r3
      break;
 8004f56:	e068      	b.n	800502a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	2b0b      	cmp	r3, #11
 8004f5e:	d852      	bhi.n	8005006 <USBD_CDC_Setup+0x162>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <USBD_CDC_Setup+0xc4>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f99 	.word	0x08004f99
 8004f6c:	08005015 	.word	0x08005015
 8004f70:	08005007 	.word	0x08005007
 8004f74:	08005007 	.word	0x08005007
 8004f78:	08005007 	.word	0x08005007
 8004f7c:	08005007 	.word	0x08005007
 8004f80:	08005007 	.word	0x08005007
 8004f84:	08005007 	.word	0x08005007
 8004f88:	08005007 	.word	0x08005007
 8004f8c:	08005007 	.word	0x08005007
 8004f90:	08004fc3 	.word	0x08004fc3
 8004f94:	08004fed 	.word	0x08004fed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d107      	bne.n	8004fb4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004fa4:	f107 030a 	add.w	r3, r7, #10
 8004fa8:	2202      	movs	r2, #2
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f001 face 	bl	800654e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fb2:	e032      	b.n	800501a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 fa58 	bl	800646c <USBD_CtlError>
            ret = USBD_FAIL;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc0:	e02b      	b.n	800501a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d107      	bne.n	8004fde <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fce:	f107 030d 	add.w	r3, r7, #13
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 fab9 	bl	800654e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fdc:	e01d      	b.n	800501a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004fde:	6839      	ldr	r1, [r7, #0]
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 fa43 	bl	800646c <USBD_CtlError>
            ret = USBD_FAIL;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8004fea:	e016      	b.n	800501a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d00f      	beq.n	8005018 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f001 fa36 	bl	800646c <USBD_CtlError>
            ret = USBD_FAIL;
 8005000:	2303      	movs	r3, #3
 8005002:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005004:	e008      	b.n	8005018 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005006:	6839      	ldr	r1, [r7, #0]
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 fa2f 	bl	800646c <USBD_CtlError>
          ret = USBD_FAIL;
 800500e:	2303      	movs	r3, #3
 8005010:	75fb      	strb	r3, [r7, #23]
          break;
 8005012:	e002      	b.n	800501a <USBD_CDC_Setup+0x176>
          break;
 8005014:	bf00      	nop
 8005016:	e008      	b.n	800502a <USBD_CDC_Setup+0x186>
          break;
 8005018:	bf00      	nop
      }
      break;
 800501a:	e006      	b.n	800502a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800501c:	6839      	ldr	r1, [r7, #0]
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f001 fa24 	bl	800646c <USBD_CtlError>
      ret = USBD_FAIL;
 8005024:	2303      	movs	r3, #3
 8005026:	75fb      	strb	r3, [r7, #23]
      break;
 8005028:	bf00      	nop
  }

  return (uint8_t)ret;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005046:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005052:	2303      	movs	r3, #3
 8005054:	e04f      	b.n	80050f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3318      	adds	r3, #24
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d029      	beq.n	80050c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	3318      	adds	r3, #24
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	78f9      	ldrb	r1, [r7, #3]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	460b      	mov	r3, r1
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	1a5b      	subs	r3, r3, r1
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4403      	add	r3, r0
 8005094:	3344      	adds	r3, #68	; 0x44
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	fbb2 f1f3 	udiv	r1, r2, r3
 800509c:	fb03 f301 	mul.w	r3, r3, r1
 80050a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d110      	bne.n	80050c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3318      	adds	r3, #24
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050ba:	78f9      	ldrb	r1, [r7, #3]
 80050bc:	2300      	movs	r3, #0
 80050be:	2200      	movs	r2, #0
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f001 ff4c 	bl	8006f5e <USBD_LL_Transmit>
 80050c6:	e015      	b.n	80050f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00b      	beq.n	80050f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	460b      	mov	r3, r1
 8005108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005110:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800511c:	2303      	movs	r3, #3
 800511e:	e015      	b.n	800514c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f001 ff5c 	bl	8006fe2 <USBD_LL_GetRxDataSize>
 800512a:	4602      	mov	r2, r0
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005146:	4611      	mov	r1, r2
 8005148:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005162:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800516a:	2303      	movs	r3, #3
 800516c:	e01b      	b.n	80051a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <USBD_CDC_EP0_RxReady+0x50>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800517e:	2bff      	cmp	r3, #255	; 0xff
 8005180:	d010      	beq.n	80051a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005190:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005198:	b292      	uxth	r2, r2
 800519a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	22ff      	movs	r2, #255	; 0xff
 80051a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2243      	movs	r2, #67	; 0x43
 80051bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80051be:	4b03      	ldr	r3, [pc, #12]	; (80051cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	20000094 	.word	0x20000094

080051d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2243      	movs	r2, #67	; 0x43
 80051dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80051de:	4b03      	ldr	r3, [pc, #12]	; (80051ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	20000050 	.word	0x20000050

080051f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2243      	movs	r2, #67	; 0x43
 80051fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80051fe:	4b03      	ldr	r3, [pc, #12]	; (800520c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	200000d8 	.word	0x200000d8

08005210 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	220a      	movs	r2, #10
 800521c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800521e:	4b03      	ldr	r3, [pc, #12]	; (800522c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	2000000c 	.word	0x2000000c

08005230 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005240:	2303      	movs	r3, #3
 8005242:	e004      	b.n	800524e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800525a:	b480      	push	{r7}
 800525c:	b087      	sub	sp, #28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800526c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005274:	2303      	movs	r3, #3
 8005276:	e008      	b.n	800528a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e004      	b.n	80052bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e01a      	b.n	8005320 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d114      	bne.n	800531e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005312:	2181      	movs	r1, #129	; 0x81
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 fe22 	bl	8006f5e <USBD_LL_Transmit>

    ret = USBD_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005336:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005342:	2303      	movs	r3, #3
 8005344:	e016      	b.n	8005374 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	7c1b      	ldrb	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005358:	2101      	movs	r1, #1
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f001 fe20 	bl	8006fa0 <USBD_LL_PrepareReceive>
 8005360:	e007      	b.n	8005372 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	2101      	movs	r1, #1
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 fe17 	bl	8006fa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4613      	mov	r3, r2
 8005388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005390:	2303      	movs	r3, #3
 8005392:	e01f      	b.n	80053d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	79fa      	ldrb	r2, [r7, #7]
 80053c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f001 fc93 	bl	8006cf4 <USBD_LL_Init>
 80053ce:	4603      	mov	r3, r0
 80053d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e016      	b.n	8005422 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	f107 020e 	add.w	r2, r7, #14
 8005414:	4610      	mov	r0, r2
 8005416:	4798      	blx	r3
 8005418:	4602      	mov	r2, r0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 fcaa 	bl	8006d8c <USBD_LL_Start>
 8005438:	4603      	mov	r3, r0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005464:	2303      	movs	r3, #3
 8005466:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	78fa      	ldrb	r2, [r7, #3]
 800547c:	4611      	mov	r1, r2
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
 8005482:	4603      	mov	r3, r0
 8005484:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	4611      	mov	r1, r2
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	4798      	blx	r3
  }

  return USBD_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 ff90 	bl	80063f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d01a      	beq.n	8005532 <USBD_LL_SetupStage+0x72>
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d822      	bhi.n	8005546 <USBD_LL_SetupStage+0x86>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <USBD_LL_SetupStage+0x4a>
 8005504:	2b01      	cmp	r3, #1
 8005506:	d00a      	beq.n	800551e <USBD_LL_SetupStage+0x5e>
 8005508:	e01d      	b.n	8005546 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa62 	bl	80059dc <USBD_StdDevReq>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]
      break;
 800551c:	e020      	b.n	8005560 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fac6 	bl	8005ab8 <USBD_StdItfReq>
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e016      	b.n	8005560 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fb05 	bl	8005b4a <USBD_StdEPReq>
 8005540:	4603      	mov	r3, r0
 8005542:	73fb      	strb	r3, [r7, #15]
      break;
 8005544:	e00c      	b.n	8005560 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800554c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005550:	b2db      	uxtb	r3, r3
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f001 fc79 	bl	8006e4c <USBD_LL_StallEP>
 800555a:	4603      	mov	r3, r0
 800555c:	73fb      	strb	r3, [r7, #15]
      break;
 800555e:	bf00      	nop
  }

  return ret;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	460b      	mov	r3, r1
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005578:	7afb      	ldrb	r3, [r7, #11]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d138      	bne.n	80055f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005584:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800558c:	2b03      	cmp	r3, #3
 800558e:	d14a      	bne.n	8005626 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	429a      	cmp	r2, r3
 800559a:	d913      	bls.n	80055c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	1ad2      	subs	r2, r2, r3
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	4293      	cmp	r3, r2
 80055b4:	bf28      	it	cs
 80055b6:	4613      	movcs	r3, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f001 f80f 	bl	80065e0 <USBD_CtlContinueRx>
 80055c2:	e030      	b.n	8005626 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d10b      	bne.n	80055e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f001 f80a 	bl	8006602 <USBD_CtlSendStatus>
 80055ee:	e01a      	b.n	8005626 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d114      	bne.n	8005626 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00e      	beq.n	8005626 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	7afa      	ldrb	r2, [r7, #11]
 8005612:	4611      	mov	r1, r2
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	4798      	blx	r3
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	e000      	b.n	8005628 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	460b      	mov	r3, r1
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800563e:	7afb      	ldrb	r3, [r7, #11]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d16b      	bne.n	800571c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3314      	adds	r3, #20
 8005648:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005650:	2b02      	cmp	r3, #2
 8005652:	d156      	bne.n	8005702 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	429a      	cmp	r2, r3
 800565e:	d914      	bls.n	800568a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	1ad2      	subs	r2, r2, r3
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	461a      	mov	r2, r3
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 ff84 	bl	8006584 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800567c:	2300      	movs	r3, #0
 800567e:	2200      	movs	r2, #0
 8005680:	2100      	movs	r1, #0
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f001 fc8c 	bl	8006fa0 <USBD_LL_PrepareReceive>
 8005688:	e03b      	b.n	8005702 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d11c      	bne.n	80056d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800569e:	429a      	cmp	r2, r3
 80056a0:	d316      	bcc.n	80056d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d20f      	bcs.n	80056d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056b0:	2200      	movs	r2, #0
 80056b2:	2100      	movs	r1, #0
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 ff65 	bl	8006584 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056c2:	2300      	movs	r3, #0
 80056c4:	2200      	movs	r2, #0
 80056c6:	2100      	movs	r1, #0
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f001 fc69 	bl	8006fa0 <USBD_LL_PrepareReceive>
 80056ce:	e018      	b.n	8005702 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d10b      	bne.n	80056f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f001 fba8 	bl	8006e4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 ff93 	bl	8006628 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005708:	2b01      	cmp	r3, #1
 800570a:	d122      	bne.n	8005752 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff fe98 	bl	8005442 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800571a:	e01a      	b.n	8005752 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b03      	cmp	r3, #3
 8005726:	d114      	bne.n	8005752 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00e      	beq.n	8005752 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	7afa      	ldrb	r2, [r7, #11]
 800573e:	4611      	mov	r1, r2
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	4798      	blx	r3
 8005744:	4603      	mov	r3, r0
 8005746:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	e000      	b.n	8005754 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800578c:	2303      	movs	r3, #3
 800578e:	e02f      	b.n	80057f0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00f      	beq.n	80057ba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d009      	beq.n	80057ba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6852      	ldr	r2, [r2, #4]
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	4611      	mov	r1, r2
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057ba:	2340      	movs	r3, #64	; 0x40
 80057bc:	2200      	movs	r2, #0
 80057be:	2100      	movs	r1, #0
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 fafe 	bl	8006dc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2240      	movs	r2, #64	; 0x40
 80057d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057d6:	2340      	movs	r3, #64	; 0x40
 80057d8:	2200      	movs	r2, #0
 80057da:	2180      	movs	r1, #128	; 0x80
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 faf0 	bl	8006dc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	78fa      	ldrb	r2, [r7, #3]
 8005808:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005826:	b2da      	uxtb	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2204      	movs	r2, #4
 8005832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b04      	cmp	r3, #4
 8005856:	d106      	bne.n	8005866 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800585e:	b2da      	uxtb	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005886:	2303      	movs	r3, #3
 8005888:	e012      	b.n	80058b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b03      	cmp	r3, #3
 8005894:	d10b      	bne.n	80058ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e014      	b.n	80058fc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d10d      	bne.n	80058fa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	4611      	mov	r1, r2
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800591a:	2303      	movs	r3, #3
 800591c:	e014      	b.n	8005948 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b03      	cmp	r3, #3
 8005928:	d10d      	bne.n	8005946 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	4611      	mov	r1, r2
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6852      	ldr	r2, [r2, #4]
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	4611      	mov	r1, r2
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
  }

  return USBD_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800599e:	b480      	push	{r7}
 80059a0:	b087      	sub	sp, #28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	3301      	adds	r3, #1
 80059b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80059bc:	8a3b      	ldrh	r3, [r7, #16]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	b21a      	sxth	r2, r3
 80059c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	b21b      	sxth	r3, r3
 80059ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80059cc:	89fb      	ldrh	r3, [r7, #14]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d005      	beq.n	8005a02 <USBD_StdDevReq+0x26>
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d853      	bhi.n	8005aa2 <USBD_StdDevReq+0xc6>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <USBD_StdDevReq+0x3a>
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d14f      	bne.n	8005aa2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
      break;
 8005a14:	e04a      	b.n	8005aac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b09      	cmp	r3, #9
 8005a1c:	d83b      	bhi.n	8005a96 <USBD_StdDevReq+0xba>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <USBD_StdDevReq+0x48>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a79 	.word	0x08005a79
 8005a28:	08005a8d 	.word	0x08005a8d
 8005a2c:	08005a97 	.word	0x08005a97
 8005a30:	08005a83 	.word	0x08005a83
 8005a34:	08005a97 	.word	0x08005a97
 8005a38:	08005a57 	.word	0x08005a57
 8005a3c:	08005a4d 	.word	0x08005a4d
 8005a40:	08005a97 	.word	0x08005a97
 8005a44:	08005a6f 	.word	0x08005a6f
 8005a48:	08005a61 	.word	0x08005a61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a4c:	6839      	ldr	r1, [r7, #0]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f9de 	bl	8005e10 <USBD_GetDescriptor>
          break;
 8005a54:	e024      	b.n	8005aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fb43 	bl	80060e4 <USBD_SetAddress>
          break;
 8005a5e:	e01f      	b.n	8005aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fb82 	bl	800616c <USBD_SetConfig>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	73fb      	strb	r3, [r7, #15]
          break;
 8005a6c:	e018      	b.n	8005aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fc21 	bl	80062b8 <USBD_GetConfig>
          break;
 8005a76:	e013      	b.n	8005aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fc52 	bl	8006324 <USBD_GetStatus>
          break;
 8005a80:	e00e      	b.n	8005aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fc81 	bl	800638c <USBD_SetFeature>
          break;
 8005a8a:	e009      	b.n	8005aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fc90 	bl	80063b4 <USBD_ClrFeature>
          break;
 8005a94:	e004      	b.n	8005aa0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fce7 	bl	800646c <USBD_CtlError>
          break;
 8005a9e:	bf00      	nop
      }
      break;
 8005aa0:	e004      	b.n	8005aac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fce1 	bl	800646c <USBD_CtlError>
      break;
 8005aaa:	bf00      	nop
  }

  return ret;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop

08005ab8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d005      	beq.n	8005ade <USBD_StdItfReq+0x26>
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d82f      	bhi.n	8005b36 <USBD_StdItfReq+0x7e>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <USBD_StdItfReq+0x26>
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d12b      	bne.n	8005b36 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d81d      	bhi.n	8005b28 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	889b      	ldrh	r3, [r3, #4]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d813      	bhi.n	8005b1e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	88db      	ldrh	r3, [r3, #6]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d110      	bne.n	8005b32 <USBD_StdItfReq+0x7a>
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10d      	bne.n	8005b32 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fd73 	bl	8006602 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b1c:	e009      	b.n	8005b32 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fca3 	bl	800646c <USBD_CtlError>
          break;
 8005b26:	e004      	b.n	8005b32 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fc9e 	bl	800646c <USBD_CtlError>
          break;
 8005b30:	e000      	b.n	8005b34 <USBD_StdItfReq+0x7c>
          break;
 8005b32:	bf00      	nop
      }
      break;
 8005b34:	e004      	b.n	8005b40 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fc97 	bl	800646c <USBD_CtlError>
      break;
 8005b3e:	bf00      	nop
  }

  return ret;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	889b      	ldrh	r3, [r3, #4]
 8005b5c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d007      	beq.n	8005b7a <USBD_StdEPReq+0x30>
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	f200 8145 	bhi.w	8005dfa <USBD_StdEPReq+0x2b0>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00c      	beq.n	8005b8e <USBD_StdEPReq+0x44>
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	f040 8140 	bne.w	8005dfa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
 8005b88:	4603      	mov	r3, r0
 8005b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8c:	e13a      	b.n	8005e04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d007      	beq.n	8005ba6 <USBD_StdEPReq+0x5c>
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	f300 8129 	bgt.w	8005dee <USBD_StdEPReq+0x2a4>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d07f      	beq.n	8005ca0 <USBD_StdEPReq+0x156>
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d03c      	beq.n	8005c1e <USBD_StdEPReq+0xd4>
 8005ba4:	e123      	b.n	8005dee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d002      	beq.n	8005bb8 <USBD_StdEPReq+0x6e>
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d016      	beq.n	8005be4 <USBD_StdEPReq+0x9a>
 8005bb6:	e02c      	b.n	8005c12 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <USBD_StdEPReq+0x90>
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	2b80      	cmp	r3, #128	; 0x80
 8005bc2:	d00a      	beq.n	8005bda <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 f93f 	bl	8006e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 f93b 	bl	8006e4c <USBD_LL_StallEP>
 8005bd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bd8:	e020      	b.n	8005c1c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fc45 	bl	800646c <USBD_CtlError>
              break;
 8005be2:	e01b      	b.n	8005c1c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	885b      	ldrh	r3, [r3, #2]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10e      	bne.n	8005c0a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <USBD_StdEPReq+0xc0>
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d008      	beq.n	8005c0a <USBD_StdEPReq+0xc0>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	88db      	ldrh	r3, [r3, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f921 	bl	8006e4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fcf9 	bl	8006602 <USBD_CtlSendStatus>

              break;
 8005c10:	e004      	b.n	8005c1c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fc29 	bl	800646c <USBD_CtlError>
              break;
 8005c1a:	bf00      	nop
          }
          break;
 8005c1c:	e0ec      	b.n	8005df8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d002      	beq.n	8005c30 <USBD_StdEPReq+0xe6>
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d016      	beq.n	8005c5c <USBD_StdEPReq+0x112>
 8005c2e:	e030      	b.n	8005c92 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c30:	7bbb      	ldrb	r3, [r7, #14]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <USBD_StdEPReq+0x108>
 8005c36:	7bbb      	ldrb	r3, [r7, #14]
 8005c38:	2b80      	cmp	r3, #128	; 0x80
 8005c3a:	d00a      	beq.n	8005c52 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c3c:	7bbb      	ldrb	r3, [r7, #14]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f903 	bl	8006e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 f8ff 	bl	8006e4c <USBD_LL_StallEP>
 8005c4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c50:	e025      	b.n	8005c9e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fc09 	bl	800646c <USBD_CtlError>
              break;
 8005c5a:	e020      	b.n	8005c9e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	885b      	ldrh	r3, [r3, #2]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11b      	bne.n	8005c9c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c6e:	7bbb      	ldrb	r3, [r7, #14]
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 f909 	bl	8006e8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fcc2 	bl	8006602 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	4798      	blx	r3
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005c90:	e004      	b.n	8005c9c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005c92:	6839      	ldr	r1, [r7, #0]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fbe9 	bl	800646c <USBD_CtlError>
              break;
 8005c9a:	e000      	b.n	8005c9e <USBD_StdEPReq+0x154>
              break;
 8005c9c:	bf00      	nop
          }
          break;
 8005c9e:	e0ab      	b.n	8005df8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d002      	beq.n	8005cb2 <USBD_StdEPReq+0x168>
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d032      	beq.n	8005d16 <USBD_StdEPReq+0x1cc>
 8005cb0:	e097      	b.n	8005de2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cb2:	7bbb      	ldrb	r3, [r7, #14]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <USBD_StdEPReq+0x17e>
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b80      	cmp	r3, #128	; 0x80
 8005cbc:	d004      	beq.n	8005cc8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fbd3 	bl	800646c <USBD_CtlError>
                break;
 8005cc6:	e091      	b.n	8005dec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	da0b      	bge.n	8005ce8 <USBD_StdEPReq+0x19e>
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	3310      	adds	r3, #16
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	e00b      	b.n	8005d00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	3304      	adds	r3, #4
 8005d00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fc1d 	bl	800654e <USBD_CtlSendData>
              break;
 8005d14:	e06a      	b.n	8005dec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da11      	bge.n	8005d42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d1e:	7bbb      	ldrb	r3, [r7, #14]
 8005d20:	f003 020f 	and.w	r2, r3, #15
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	3324      	adds	r3, #36	; 0x24
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d117      	bne.n	8005d68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fb96 	bl	800646c <USBD_CtlError>
                  break;
 8005d40:	e054      	b.n	8005dec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d42:	7bbb      	ldrb	r3, [r7, #14]
 8005d44:	f003 020f 	and.w	r2, r3, #15
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fb83 	bl	800646c <USBD_CtlError>
                  break;
 8005d66:	e041      	b.n	8005dec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	da0b      	bge.n	8005d88 <USBD_StdEPReq+0x23e>
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	3310      	adds	r3, #16
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	3304      	adds	r3, #4
 8005d86:	e00b      	b.n	8005da0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3304      	adds	r3, #4
 8005da0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <USBD_StdEPReq+0x264>
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	2b80      	cmp	r3, #128	; 0x80
 8005dac:	d103      	bne.n	8005db6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e00e      	b.n	8005dd4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005db6:	7bbb      	ldrb	r3, [r7, #14]
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 f884 	bl	8006ec8 <USBD_LL_IsStallEP>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e002      	b.n	8005dd4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fbb7 	bl	800654e <USBD_CtlSendData>
              break;
 8005de0:	e004      	b.n	8005dec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fb41 	bl	800646c <USBD_CtlError>
              break;
 8005dea:	bf00      	nop
          }
          break;
 8005dec:	e004      	b.n	8005df8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fb3b 	bl	800646c <USBD_CtlError>
          break;
 8005df6:	bf00      	nop
      }
      break;
 8005df8:	e004      	b.n	8005e04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fb35 	bl	800646c <USBD_CtlError>
      break;
 8005e02:	bf00      	nop
  }

  return ret;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	885b      	ldrh	r3, [r3, #2]
 8005e2a:	0a1b      	lsrs	r3, r3, #8
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	2b06      	cmp	r3, #6
 8005e32:	f200 8128 	bhi.w	8006086 <USBD_GetDescriptor+0x276>
 8005e36:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <USBD_GetDescriptor+0x2c>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	08005e71 	.word	0x08005e71
 8005e44:	08005eb1 	.word	0x08005eb1
 8005e48:	08006087 	.word	0x08006087
 8005e4c:	08006087 	.word	0x08006087
 8005e50:	08006027 	.word	0x08006027
 8005e54:	08006053 	.word	0x08006053
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	7c12      	ldrb	r2, [r2, #16]
 8005e64:	f107 0108 	add.w	r1, r7, #8
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
 8005e6c:	60f8      	str	r0, [r7, #12]
      break;
 8005e6e:	e112      	b.n	8006096 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7c1b      	ldrb	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10d      	bne.n	8005e94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	f107 0208 	add.w	r2, r7, #8
 8005e84:	4610      	mov	r0, r2
 8005e86:	4798      	blx	r3
 8005e88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	2202      	movs	r2, #2
 8005e90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e92:	e100      	b.n	8006096 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	f107 0208 	add.w	r2, r7, #8
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
 8005ea4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	2202      	movs	r2, #2
 8005eac:	701a      	strb	r2, [r3, #0]
      break;
 8005eae:	e0f2      	b.n	8006096 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	885b      	ldrh	r3, [r3, #2]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	f200 80ac 	bhi.w	8006014 <USBD_GetDescriptor+0x204>
 8005ebc:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <USBD_GetDescriptor+0xb4>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005edd 	.word	0x08005edd
 8005ec8:	08005f11 	.word	0x08005f11
 8005ecc:	08005f45 	.word	0x08005f45
 8005ed0:	08005f79 	.word	0x08005f79
 8005ed4:	08005fad 	.word	0x08005fad
 8005ed8:	08005fe1 	.word	0x08005fe1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00b      	beq.n	8005f00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	7c12      	ldrb	r2, [r2, #16]
 8005ef4:	f107 0108 	add.w	r1, r7, #8
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4798      	blx	r3
 8005efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005efe:	e091      	b.n	8006024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fab2 	bl	800646c <USBD_CtlError>
            err++;
 8005f08:	7afb      	ldrb	r3, [r7, #11]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f0e:	e089      	b.n	8006024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	7c12      	ldrb	r2, [r2, #16]
 8005f28:	f107 0108 	add.w	r1, r7, #8
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
 8005f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f32:	e077      	b.n	8006024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa98 	bl	800646c <USBD_CtlError>
            err++;
 8005f3c:	7afb      	ldrb	r3, [r7, #11]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	72fb      	strb	r3, [r7, #11]
          break;
 8005f42:	e06f      	b.n	8006024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	7c12      	ldrb	r2, [r2, #16]
 8005f5c:	f107 0108 	add.w	r1, r7, #8
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f66:	e05d      	b.n	8006024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa7e 	bl	800646c <USBD_CtlError>
            err++;
 8005f70:	7afb      	ldrb	r3, [r7, #11]
 8005f72:	3301      	adds	r3, #1
 8005f74:	72fb      	strb	r3, [r7, #11]
          break;
 8005f76:	e055      	b.n	8006024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	7c12      	ldrb	r2, [r2, #16]
 8005f90:	f107 0108 	add.w	r1, r7, #8
 8005f94:	4610      	mov	r0, r2
 8005f96:	4798      	blx	r3
 8005f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f9a:	e043      	b.n	8006024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa64 	bl	800646c <USBD_CtlError>
            err++;
 8005fa4:	7afb      	ldrb	r3, [r7, #11]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8005faa:	e03b      	b.n	8006024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	7c12      	ldrb	r2, [r2, #16]
 8005fc4:	f107 0108 	add.w	r1, r7, #8
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
 8005fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fce:	e029      	b.n	8006024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa4a 	bl	800646c <USBD_CtlError>
            err++;
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fde:	e021      	b.n	8006024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00b      	beq.n	8006004 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	7c12      	ldrb	r2, [r2, #16]
 8005ff8:	f107 0108 	add.w	r1, r7, #8
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
 8006000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006002:	e00f      	b.n	8006024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa30 	bl	800646c <USBD_CtlError>
            err++;
 800600c:	7afb      	ldrb	r3, [r7, #11]
 800600e:	3301      	adds	r3, #1
 8006010:	72fb      	strb	r3, [r7, #11]
          break;
 8006012:	e007      	b.n	8006024 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fa28 	bl	800646c <USBD_CtlError>
          err++;
 800601c:	7afb      	ldrb	r3, [r7, #11]
 800601e:	3301      	adds	r3, #1
 8006020:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006022:	bf00      	nop
      }
      break;
 8006024:	e037      	b.n	8006096 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7c1b      	ldrb	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	f107 0208 	add.w	r2, r7, #8
 800603a:	4610      	mov	r0, r2
 800603c:	4798      	blx	r3
 800603e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006040:	e029      	b.n	8006096 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fa11 	bl	800646c <USBD_CtlError>
        err++;
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	3301      	adds	r3, #1
 800604e:	72fb      	strb	r3, [r7, #11]
      break;
 8006050:	e021      	b.n	8006096 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	7c1b      	ldrb	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10d      	bne.n	8006076 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	f107 0208 	add.w	r2, r7, #8
 8006066:	4610      	mov	r0, r2
 8006068:	4798      	blx	r3
 800606a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	2207      	movs	r2, #7
 8006072:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006074:	e00f      	b.n	8006096 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f9f7 	bl	800646c <USBD_CtlError>
        err++;
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	3301      	adds	r3, #1
 8006082:	72fb      	strb	r3, [r7, #11]
      break;
 8006084:	e007      	b.n	8006096 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f9ef 	bl	800646c <USBD_CtlError>
      err++;
 800608e:	7afb      	ldrb	r3, [r7, #11]
 8006090:	3301      	adds	r3, #1
 8006092:	72fb      	strb	r3, [r7, #11]
      break;
 8006094:	bf00      	nop
  }

  if (err != 0U)
 8006096:	7afb      	ldrb	r3, [r7, #11]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d11e      	bne.n	80060da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	88db      	ldrh	r3, [r3, #6]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d016      	beq.n	80060d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80060a4:	893b      	ldrh	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00e      	beq.n	80060c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	88da      	ldrh	r2, [r3, #6]
 80060ae:	893b      	ldrh	r3, [r7, #8]
 80060b0:	4293      	cmp	r3, r2
 80060b2:	bf28      	it	cs
 80060b4:	4613      	movcs	r3, r2
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80060ba:	893b      	ldrh	r3, [r7, #8]
 80060bc:	461a      	mov	r2, r3
 80060be:	68f9      	ldr	r1, [r7, #12]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fa44 	bl	800654e <USBD_CtlSendData>
 80060c6:	e009      	b.n	80060dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9ce 	bl	800646c <USBD_CtlError>
 80060d0:	e004      	b.n	80060dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa95 	bl	8006602 <USBD_CtlSendStatus>
 80060d8:	e000      	b.n	80060dc <USBD_GetDescriptor+0x2cc>
    return;
 80060da:	bf00      	nop
  }
}
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop

080060e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	889b      	ldrh	r3, [r3, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d131      	bne.n	800615a <USBD_SetAddress+0x76>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	88db      	ldrh	r3, [r3, #6]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d12d      	bne.n	800615a <USBD_SetAddress+0x76>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	885b      	ldrh	r3, [r3, #2]
 8006102:	2b7f      	cmp	r3, #127	; 0x7f
 8006104:	d829      	bhi.n	800615a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	885b      	ldrh	r3, [r3, #2]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006110:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b03      	cmp	r3, #3
 800611c:	d104      	bne.n	8006128 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f9a3 	bl	800646c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006126:	e01d      	b.n	8006164 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	7bfa      	ldrb	r2, [r7, #15]
 800612c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fef3 	bl	8006f20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa61 	bl	8006602 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614e:	e009      	b.n	8006164 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006158:	e004      	b.n	8006164 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f985 	bl	800646c <USBD_CtlError>
  }
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	885b      	ldrh	r3, [r3, #2]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	4b4c      	ldr	r3, [pc, #304]	; (80062b4 <USBD_SetConfig+0x148>)
 8006182:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006184:	4b4b      	ldr	r3, [pc, #300]	; (80062b4 <USBD_SetConfig+0x148>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d905      	bls.n	8006198 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f96c 	bl	800646c <USBD_CtlError>
    return USBD_FAIL;
 8006194:	2303      	movs	r3, #3
 8006196:	e088      	b.n	80062aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d002      	beq.n	80061aa <USBD_SetConfig+0x3e>
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d025      	beq.n	80061f4 <USBD_SetConfig+0x88>
 80061a8:	e071      	b.n	800628e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80061aa:	4b42      	ldr	r3, [pc, #264]	; (80062b4 <USBD_SetConfig+0x148>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01c      	beq.n	80061ec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80061b2:	4b40      	ldr	r3, [pc, #256]	; (80062b4 <USBD_SetConfig+0x148>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80061bc:	4b3d      	ldr	r3, [pc, #244]	; (80062b4 <USBD_SetConfig+0x148>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff f948 	bl	8005458 <USBD_SetClassConfig>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f949 	bl	800646c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80061da:	e065      	b.n	80062a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fa10 	bl	8006602 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2203      	movs	r2, #3
 80061e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80061ea:	e05d      	b.n	80062a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fa08 	bl	8006602 <USBD_CtlSendStatus>
      break;
 80061f2:	e059      	b.n	80062a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80061f4:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <USBD_SetConfig+0x148>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d112      	bne.n	8006222 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006204:	4b2b      	ldr	r3, [pc, #172]	; (80062b4 <USBD_SetConfig+0x148>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800620e:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <USBD_SetConfig+0x148>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff f93b 	bl	8005490 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f9f1 	bl	8006602 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006220:	e042      	b.n	80062a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006222:	4b24      	ldr	r3, [pc, #144]	; (80062b4 <USBD_SetConfig+0x148>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	d02a      	beq.n	8006286 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff f929 	bl	8005490 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <USBD_SetConfig+0x148>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006248:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <USBD_SetConfig+0x148>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff f902 	bl	8005458 <USBD_SetClassConfig>
 8006254:	4603      	mov	r3, r0
 8006256:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00f      	beq.n	800627e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f903 	bl	800646c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff f90e 	bl	8005490 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800627c:	e014      	b.n	80062a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f9bf 	bl	8006602 <USBD_CtlSendStatus>
      break;
 8006284:	e010      	b.n	80062a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f9bb 	bl	8006602 <USBD_CtlSendStatus>
      break;
 800628c:	e00c      	b.n	80062a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f8eb 	bl	800646c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006296:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <USBD_SetConfig+0x148>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff f8f7 	bl	8005490 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80062a2:	2303      	movs	r3, #3
 80062a4:	73fb      	strb	r3, [r7, #15]
      break;
 80062a6:	bf00      	nop
  }

  return ret;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	2000019c 	.word	0x2000019c

080062b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	88db      	ldrh	r3, [r3, #6]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d004      	beq.n	80062d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f8cd 	bl	800646c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062d2:	e023      	b.n	800631c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	dc02      	bgt.n	80062e6 <USBD_GetConfig+0x2e>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dc03      	bgt.n	80062ec <USBD_GetConfig+0x34>
 80062e4:	e015      	b.n	8006312 <USBD_GetConfig+0x5a>
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d00b      	beq.n	8006302 <USBD_GetConfig+0x4a>
 80062ea:	e012      	b.n	8006312 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3308      	adds	r3, #8
 80062f6:	2201      	movs	r2, #1
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f927 	bl	800654e <USBD_CtlSendData>
        break;
 8006300:	e00c      	b.n	800631c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3304      	adds	r3, #4
 8006306:	2201      	movs	r2, #1
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f91f 	bl	800654e <USBD_CtlSendData>
        break;
 8006310:	e004      	b.n	800631c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f8a9 	bl	800646c <USBD_CtlError>
        break;
 800631a:	bf00      	nop
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006334:	b2db      	uxtb	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	2b02      	cmp	r3, #2
 800633a:	d81e      	bhi.n	800637a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	88db      	ldrh	r3, [r3, #6]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d004      	beq.n	800634e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f890 	bl	800646c <USBD_CtlError>
        break;
 800634c:	e01a      	b.n	8006384 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f043 0202 	orr.w	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	330c      	adds	r3, #12
 800636e:	2202      	movs	r2, #2
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f8eb 	bl	800654e <USBD_CtlSendData>
      break;
 8006378:	e004      	b.n	8006384 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f875 	bl	800646c <USBD_CtlError>
      break;
 8006382:	bf00      	nop
  }
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	885b      	ldrh	r3, [r3, #2]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d106      	bne.n	80063ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f92b 	bl	8006602 <USBD_CtlSendStatus>
  }
}
 80063ac:	bf00      	nop
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d80b      	bhi.n	80063e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	885b      	ldrh	r3, [r3, #2]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d10c      	bne.n	80063ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f910 	bl	8006602 <USBD_CtlSendStatus>
      }
      break;
 80063e2:	e004      	b.n	80063ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f840 	bl	800646c <USBD_CtlError>
      break;
 80063ec:	e000      	b.n	80063f0 <USBD_ClrFeature+0x3c>
      break;
 80063ee:	bf00      	nop
  }
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	781a      	ldrb	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3301      	adds	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f7ff fabb 	bl	800599e <SWAPBYTE>
 8006428:	4603      	mov	r3, r0
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3301      	adds	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7ff faae 	bl	800599e <SWAPBYTE>
 8006442:	4603      	mov	r3, r0
 8006444:	461a      	mov	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3301      	adds	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff faa1 	bl	800599e <SWAPBYTE>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	80da      	strh	r2, [r3, #6]
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006476:	2180      	movs	r1, #128	; 0x80
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fce7 	bl	8006e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800647e:	2100      	movs	r1, #0
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fce3 	bl	8006e4c <USBD_LL_StallEP>
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d036      	beq.n	8006512 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80064a8:	6938      	ldr	r0, [r7, #16]
 80064aa:	f000 f836 	bl	800651a <USBD_GetLen>
 80064ae:	4603      	mov	r3, r0
 80064b0:	3301      	adds	r3, #1
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	4413      	add	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	7812      	ldrb	r2, [r2, #0]
 80064c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	3301      	adds	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	4413      	add	r3, r2
 80064d4:	2203      	movs	r2, #3
 80064d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	3301      	adds	r3, #1
 80064dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80064de:	e013      	b.n	8006508 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4413      	add	r3, r2
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	3301      	adds	r3, #1
 80064f0:	613b      	str	r3, [r7, #16]
    idx++;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	3301      	adds	r3, #1
 80064f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
    idx++;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	3301      	adds	r3, #1
 8006506:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e7      	bne.n	80064e0 <USBD_GetString+0x52>
 8006510:	e000      	b.n	8006514 <USBD_GetString+0x86>
    return;
 8006512:	bf00      	nop
  }
}
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800652a:	e005      	b.n	8006538 <USBD_GetLen+0x1e>
  {
    len++;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	3301      	adds	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	3301      	adds	r3, #1
 8006536:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1f5      	bne.n	800652c <USBD_GetLen+0x12>
  }

  return len;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2202      	movs	r2, #2
 800655e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	2100      	movs	r1, #0
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fcf2 	bl	8006f5e <USBD_LL_Transmit>

  return USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	2100      	movs	r1, #0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fce1 	bl	8006f5e <USBD_LL_Transmit>

  return USBD_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2203      	movs	r2, #3
 80065b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	2100      	movs	r1, #0
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fce5 	bl	8006fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	2100      	movs	r1, #0
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fcd4 	bl	8006fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2204      	movs	r2, #4
 800660e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006612:	2300      	movs	r3, #0
 8006614:	2200      	movs	r2, #0
 8006616:	2100      	movs	r1, #0
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fca0 	bl	8006f5e <USBD_LL_Transmit>

  return USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2205      	movs	r2, #5
 8006634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006638:	2300      	movs	r3, #0
 800663a:	2200      	movs	r2, #0
 800663c:	2100      	movs	r1, #0
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fcae 	bl	8006fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006654:	2200      	movs	r2, #0
 8006656:	4912      	ldr	r1, [pc, #72]	; (80066a0 <MX_USB_DEVICE_Init+0x50>)
 8006658:	4812      	ldr	r0, [pc, #72]	; (80066a4 <MX_USB_DEVICE_Init+0x54>)
 800665a:	f7fe fe8f 	bl	800537c <USBD_Init>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006664:	f7fa f8b8 	bl	80007d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006668:	490f      	ldr	r1, [pc, #60]	; (80066a8 <MX_USB_DEVICE_Init+0x58>)
 800666a:	480e      	ldr	r0, [pc, #56]	; (80066a4 <MX_USB_DEVICE_Init+0x54>)
 800666c:	f7fe feb6 	bl	80053dc <USBD_RegisterClass>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006676:	f7fa f8af 	bl	80007d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800667a:	490c      	ldr	r1, [pc, #48]	; (80066ac <MX_USB_DEVICE_Init+0x5c>)
 800667c:	4809      	ldr	r0, [pc, #36]	; (80066a4 <MX_USB_DEVICE_Init+0x54>)
 800667e:	f7fe fdd7 	bl	8005230 <USBD_CDC_RegisterInterface>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006688:	f7fa f8a6 	bl	80007d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800668c:	4805      	ldr	r0, [pc, #20]	; (80066a4 <MX_USB_DEVICE_Init+0x54>)
 800668e:	f7fe fecc 	bl	800542a <USBD_Start>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006698:	f7fa f89e 	bl	80007d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800669c:	bf00      	nop
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20000130 	.word	0x20000130
 80066a4:	20000418 	.word	0x20000418
 80066a8:	20000018 	.word	0x20000018
 80066ac:	2000011c 	.word	0x2000011c

080066b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80066b4:	2200      	movs	r2, #0
 80066b6:	4905      	ldr	r1, [pc, #20]	; (80066cc <CDC_Init_FS+0x1c>)
 80066b8:	4805      	ldr	r0, [pc, #20]	; (80066d0 <CDC_Init_FS+0x20>)
 80066ba:	f7fe fdce 	bl	800525a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80066be:	4905      	ldr	r1, [pc, #20]	; (80066d4 <CDC_Init_FS+0x24>)
 80066c0:	4803      	ldr	r0, [pc, #12]	; (80066d0 <CDC_Init_FS+0x20>)
 80066c2:	f7fe fde8 	bl	8005296 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80066c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000ee8 	.word	0x20000ee8
 80066d0:	20000418 	.word	0x20000418
 80066d4:	200006e8 	.word	0x200006e8

080066d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80066dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80066de:	4618      	mov	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	6039      	str	r1, [r7, #0]
 80066f2:	71fb      	strb	r3, [r7, #7]
 80066f4:	4613      	mov	r3, r2
 80066f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	2b23      	cmp	r3, #35	; 0x23
 80066fc:	d84a      	bhi.n	8006794 <CDC_Control_FS+0xac>
 80066fe:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <CDC_Control_FS+0x1c>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	08006795 	.word	0x08006795
 8006708:	08006795 	.word	0x08006795
 800670c:	08006795 	.word	0x08006795
 8006710:	08006795 	.word	0x08006795
 8006714:	08006795 	.word	0x08006795
 8006718:	08006795 	.word	0x08006795
 800671c:	08006795 	.word	0x08006795
 8006720:	08006795 	.word	0x08006795
 8006724:	08006795 	.word	0x08006795
 8006728:	08006795 	.word	0x08006795
 800672c:	08006795 	.word	0x08006795
 8006730:	08006795 	.word	0x08006795
 8006734:	08006795 	.word	0x08006795
 8006738:	08006795 	.word	0x08006795
 800673c:	08006795 	.word	0x08006795
 8006740:	08006795 	.word	0x08006795
 8006744:	08006795 	.word	0x08006795
 8006748:	08006795 	.word	0x08006795
 800674c:	08006795 	.word	0x08006795
 8006750:	08006795 	.word	0x08006795
 8006754:	08006795 	.word	0x08006795
 8006758:	08006795 	.word	0x08006795
 800675c:	08006795 	.word	0x08006795
 8006760:	08006795 	.word	0x08006795
 8006764:	08006795 	.word	0x08006795
 8006768:	08006795 	.word	0x08006795
 800676c:	08006795 	.word	0x08006795
 8006770:	08006795 	.word	0x08006795
 8006774:	08006795 	.word	0x08006795
 8006778:	08006795 	.word	0x08006795
 800677c:	08006795 	.word	0x08006795
 8006780:	08006795 	.word	0x08006795
 8006784:	08006795 	.word	0x08006795
 8006788:	08006795 	.word	0x08006795
 800678c:	08006795 	.word	0x08006795
 8006790:	08006795 	.word	0x08006795
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006794:	bf00      	nop
  }

  return (USBD_OK);
 8006796:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Transmit_FS(Buf,*Len);//添加数据原样返回
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f80e 	bl	80067d8 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4805      	ldr	r0, [pc, #20]	; (80067d4 <CDC_Receive_FS+0x30>)
 80067c0:	f7fe fd69 	bl	8005296 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067c4:	4803      	ldr	r0, [pc, #12]	; (80067d4 <CDC_Receive_FS+0x30>)
 80067c6:	f7fe fdaf 	bl	8005328 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80067ca:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000418 	.word	0x20000418

080067d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067e8:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <CDC_Transmit_FS+0x48>)
 80067ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e00b      	b.n	8006816 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80067fe:	887b      	ldrh	r3, [r7, #2]
 8006800:	461a      	mov	r2, r3
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4806      	ldr	r0, [pc, #24]	; (8006820 <CDC_Transmit_FS+0x48>)
 8006806:	f7fe fd28 	bl	800525a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800680a:	4805      	ldr	r0, [pc, #20]	; (8006820 <CDC_Transmit_FS+0x48>)
 800680c:	f7fe fd5c 	bl	80052c8 <USBD_CDC_TransmitPacket>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000418 	.word	0x20000418

08006824 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	6039      	str	r1, [r7, #0]
 8006852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2212      	movs	r2, #18
 8006858:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <USBD_FS_DeviceDescriptor+0x20>)
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	2000014c 	.word	0x2000014c

0800686c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	6039      	str	r1, [r7, #0]
 8006876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2204      	movs	r2, #4
 800687c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800687e:	4b03      	ldr	r3, [pc, #12]	; (800688c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	20000160 	.word	0x20000160

08006890 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	6039      	str	r1, [r7, #0]
 800689a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	4907      	ldr	r1, [pc, #28]	; (80068c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80068a6:	4808      	ldr	r0, [pc, #32]	; (80068c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80068a8:	f7ff fdf1 	bl	800648e <USBD_GetString>
 80068ac:	e004      	b.n	80068b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	4904      	ldr	r1, [pc, #16]	; (80068c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80068b2:	4805      	ldr	r0, [pc, #20]	; (80068c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80068b4:	f7ff fdeb 	bl	800648e <USBD_GetString>
  }
  return USBD_StrDesc;
 80068b8:	4b02      	ldr	r3, [pc, #8]	; (80068c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	200016e8 	.word	0x200016e8
 80068c8:	08007220 	.word	0x08007220

080068cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	6039      	str	r1, [r7, #0]
 80068d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	4904      	ldr	r1, [pc, #16]	; (80068ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068dc:	4804      	ldr	r0, [pc, #16]	; (80068f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068de:	f7ff fdd6 	bl	800648e <USBD_GetString>
  return USBD_StrDesc;
 80068e2:	4b02      	ldr	r3, [pc, #8]	; (80068ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200016e8 	.word	0x200016e8
 80068f0:	08007238 	.word	0x08007238

080068f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	6039      	str	r1, [r7, #0]
 80068fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	221a      	movs	r2, #26
 8006904:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006906:	f000 f843 	bl	8006990 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800690a:	4b02      	ldr	r3, [pc, #8]	; (8006914 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000164 	.word	0x20000164

08006918 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	6039      	str	r1, [r7, #0]
 8006922:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d105      	bne.n	8006936 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	4907      	ldr	r1, [pc, #28]	; (800694c <USBD_FS_ConfigStrDescriptor+0x34>)
 800692e:	4808      	ldr	r0, [pc, #32]	; (8006950 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006930:	f7ff fdad 	bl	800648e <USBD_GetString>
 8006934:	e004      	b.n	8006940 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	4904      	ldr	r1, [pc, #16]	; (800694c <USBD_FS_ConfigStrDescriptor+0x34>)
 800693a:	4805      	ldr	r0, [pc, #20]	; (8006950 <USBD_FS_ConfigStrDescriptor+0x38>)
 800693c:	f7ff fda7 	bl	800648e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	200016e8 	.word	0x200016e8
 8006950:	0800724c 	.word	0x0800724c

08006954 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	4603      	mov	r3, r0
 800695c:	6039      	str	r1, [r7, #0]
 800695e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d105      	bne.n	8006972 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	4907      	ldr	r1, [pc, #28]	; (8006988 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800696a:	4808      	ldr	r0, [pc, #32]	; (800698c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800696c:	f7ff fd8f 	bl	800648e <USBD_GetString>
 8006970:	e004      	b.n	800697c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4904      	ldr	r1, [pc, #16]	; (8006988 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006976:	4805      	ldr	r0, [pc, #20]	; (800698c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006978:	f7ff fd89 	bl	800648e <USBD_GetString>
  }
  return USBD_StrDesc;
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	200016e8 	.word	0x200016e8
 800698c:	08007258 	.word	0x08007258

08006990 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006996:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <Get_SerialNum+0x44>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800699c:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <Get_SerialNum+0x48>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069a2:	4b0e      	ldr	r3, [pc, #56]	; (80069dc <Get_SerialNum+0x4c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80069b6:	2208      	movs	r2, #8
 80069b8:	4909      	ldr	r1, [pc, #36]	; (80069e0 <Get_SerialNum+0x50>)
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f814 	bl	80069e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80069c0:	2204      	movs	r2, #4
 80069c2:	4908      	ldr	r1, [pc, #32]	; (80069e4 <Get_SerialNum+0x54>)
 80069c4:	68b8      	ldr	r0, [r7, #8]
 80069c6:	f000 f80f 	bl	80069e8 <IntToUnicode>
  }
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	1fff7a10 	.word	0x1fff7a10
 80069d8:	1fff7a14 	.word	0x1fff7a14
 80069dc:	1fff7a18 	.word	0x1fff7a18
 80069e0:	20000166 	.word	0x20000166
 80069e4:	20000176 	.word	0x20000176

080069e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069fa:	2300      	movs	r3, #0
 80069fc:	75fb      	strb	r3, [r7, #23]
 80069fe:	e027      	b.n	8006a50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	0f1b      	lsrs	r3, r3, #28
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	d80b      	bhi.n	8006a20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	0f1b      	lsrs	r3, r3, #28
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	4619      	mov	r1, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	440b      	add	r3, r1
 8006a18:	3230      	adds	r2, #48	; 0x30
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e00a      	b.n	8006a36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	0f1b      	lsrs	r3, r3, #28
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	440b      	add	r3, r1
 8006a30:	3237      	adds	r2, #55	; 0x37
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	3301      	adds	r3, #1
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	75fb      	strb	r3, [r7, #23]
 8006a50:	7dfa      	ldrb	r2, [r7, #23]
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3d3      	bcc.n	8006a00 <IntToUnicode+0x18>
  }
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a70:	f107 0314 	add.w	r3, r7, #20
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	605a      	str	r2, [r3, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
 8006a7c:	60da      	str	r2, [r3, #12]
 8006a7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a88:	d13a      	bne.n	8006b00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <HAL_PCD_MspInit+0xa0>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	4a1d      	ldr	r2, [pc, #116]	; (8006b08 <HAL_PCD_MspInit+0xa0>)
 8006a94:	f043 0301 	orr.w	r3, r3, #1
 8006a98:	6313      	str	r3, [r2, #48]	; 0x30
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <HAL_PCD_MspInit+0xa0>)
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006aa6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aac:	2302      	movs	r3, #2
 8006aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ab8:	230a      	movs	r3, #10
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006abc:	f107 0314 	add.w	r3, r7, #20
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4812      	ldr	r0, [pc, #72]	; (8006b0c <HAL_PCD_MspInit+0xa4>)
 8006ac4:	f7fa f928 	bl	8000d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <HAL_PCD_MspInit+0xa0>)
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006acc:	4a0e      	ldr	r2, [pc, #56]	; (8006b08 <HAL_PCD_MspInit+0xa0>)
 8006ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad2:	6353      	str	r3, [r2, #52]	; 0x34
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <HAL_PCD_MspInit+0xa0>)
 8006ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006adc:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <HAL_PCD_MspInit+0xa0>)
 8006ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ae2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <HAL_PCD_MspInit+0xa0>)
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006af0:	2200      	movs	r2, #0
 8006af2:	2100      	movs	r1, #0
 8006af4:	2043      	movs	r0, #67	; 0x43
 8006af6:	f7fa f8bf 	bl	8000c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006afa:	2043      	movs	r0, #67	; 0x43
 8006afc:	f7fa f8e8 	bl	8000cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b00:	bf00      	nop
 8006b02:	3728      	adds	r7, #40	; 0x28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	40020000 	.word	0x40020000

08006b10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fe fcca 	bl	80054c0 <USBD_LL_SetupStage>
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f7fe fd04 	bl	800556a <USBD_LL_DataOutStage>
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b7c:	78fa      	ldrb	r2, [r7, #3]
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	3348      	adds	r3, #72	; 0x48
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	4619      	mov	r1, r3
 8006b92:	f7fe fd4d 	bl	8005630 <USBD_LL_DataInStage>
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fe fe61 	bl	8005874 <USBD_LL_SOF>
}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d102      	bne.n	8006bd4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
 8006bd2:	e008      	b.n	8006be6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d102      	bne.n	8006be2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
 8006be0:	e001      	b.n	8006be6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006be2:	f7f9 fdf9 	bl	80007d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bec:	7bfa      	ldrb	r2, [r7, #15]
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe fe01 	bl	80057f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe fdad 	bl	800575c <USBD_LL_Reset>
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe fdfc 	bl	8005818 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <HAL_PCD_SuspendCallback+0x48>)
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	4a03      	ldr	r2, [pc, #12]	; (8006c54 <HAL_PCD_SuspendCallback+0x48>)
 8006c46:	f043 0306 	orr.w	r3, r3, #6
 8006c4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	e000ed00 	.word	0xe000ed00

08006c58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe fdec 	bl	8005844 <USBD_LL_Resume>
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c86:	78fa      	ldrb	r2, [r7, #3]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fe3a 	bl	8005904 <USBD_LL_IsoOUTIncomplete>
}
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006caa:	78fa      	ldrb	r2, [r7, #3]
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fe02 	bl	80058b8 <USBD_LL_IsoINIncomplete>
}
 8006cb4:	bf00      	nop
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe fe40 	bl	8005950 <USBD_LL_DevConnected>
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe fe3d 	bl	8005966 <USBD_LL_DevDisconnected>
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d13c      	bne.n	8006d7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d04:	4a20      	ldr	r2, [pc, #128]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d14:	4b1c      	ldr	r3, [pc, #112]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d1e:	2204      	movs	r2, #4
 8006d20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d22:	4b19      	ldr	r3, [pc, #100]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d24:	2202      	movs	r2, #2
 8006d26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006d28:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d2e:	4b16      	ldr	r3, [pc, #88]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d30:	2202      	movs	r2, #2
 8006d32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d3a:	4b13      	ldr	r3, [pc, #76]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d40:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d46:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d4c:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d52:	480d      	ldr	r0, [pc, #52]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d54:	f7fa fd24 	bl	80017a0 <HAL_PCD_Init>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d5e:	f7f9 fd3b 	bl	80007d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d62:	2180      	movs	r1, #128	; 0x80
 8006d64:	4808      	ldr	r0, [pc, #32]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d66:	f7fb fe94 	bl	8002a92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d6a:	2240      	movs	r2, #64	; 0x40
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4806      	ldr	r0, [pc, #24]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d70:	f7fb fe48 	bl	8002a04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d74:	2280      	movs	r2, #128	; 0x80
 8006d76:	2101      	movs	r1, #1
 8006d78:	4803      	ldr	r0, [pc, #12]	; (8006d88 <USBD_LL_Init+0x94>)
 8006d7a:	f7fb fe43 	bl	8002a04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	200018e8 	.word	0x200018e8

08006d8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fa fe2c 	bl	8001a00 <HAL_PCD_Start>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f942 	bl	8007038 <USBD_Get_USB_Status>
 8006db4:	4603      	mov	r3, r0
 8006db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	4608      	mov	r0, r1
 8006dcc:	4611      	mov	r1, r2
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	70fb      	strb	r3, [r7, #3]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70bb      	strb	r3, [r7, #2]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006dea:	78bb      	ldrb	r3, [r7, #2]
 8006dec:	883a      	ldrh	r2, [r7, #0]
 8006dee:	78f9      	ldrb	r1, [r7, #3]
 8006df0:	f7fb fa10 	bl	8002214 <HAL_PCD_EP_Open>
 8006df4:	4603      	mov	r3, r0
 8006df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 f91c 	bl	8007038 <USBD_Get_USB_Status>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	460b      	mov	r3, r1
 8006e18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e28:	78fa      	ldrb	r2, [r7, #3]
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fb fa59 	bl	80022e4 <HAL_PCD_EP_Close>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 f8fd 	bl	8007038 <USBD_Get_USB_Status>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e66:	78fa      	ldrb	r2, [r7, #3]
 8006e68:	4611      	mov	r1, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fb fb31 	bl	80024d2 <HAL_PCD_EP_SetStall>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f8de 	bl	8007038 <USBD_Get_USB_Status>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ea4:	78fa      	ldrb	r2, [r7, #3]
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fb fb76 	bl	800259a <HAL_PCD_EP_ClrStall>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 f8bf 	bl	8007038 <USBD_Get_USB_Status>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	da0b      	bge.n	8006efc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	4613      	mov	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	333e      	adds	r3, #62	; 0x3e
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	e00b      	b.n	8006f14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f02:	68f9      	ldr	r1, [r7, #12]
 8006f04:	4613      	mov	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fb f943 	bl	80021ca <HAL_PCD_SetAddress>
 8006f44:	4603      	mov	r3, r0
 8006f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 f874 	bl	8007038 <USBD_Get_USB_Status>
 8006f50:	4603      	mov	r3, r0
 8006f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f7c:	7af9      	ldrb	r1, [r7, #11]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	f7fb fa5c 	bl	800243e <HAL_PCD_EP_Transmit>
 8006f86:	4603      	mov	r3, r0
 8006f88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 f853 	bl	8007038 <USBD_Get_USB_Status>
 8006f92:	4603      	mov	r3, r0
 8006f94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f96:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	460b      	mov	r3, r1
 8006fae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006fbe:	7af9      	ldrb	r1, [r7, #11]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	f7fb f9d8 	bl	8002378 <HAL_PCD_EP_Receive>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f832 	bl	8007038 <USBD_Get_USB_Status>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ff4:	78fa      	ldrb	r2, [r7, #3]
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fb fa08 	bl	800240e <HAL_PCD_EP_GetRxCount>
 8006ffe:	4603      	mov	r3, r0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007010:	4b03      	ldr	r3, [pc, #12]	; (8007020 <USBD_static_malloc+0x18>)
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	200001a0 	.word	0x200001a0

08007024 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]

}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	2b03      	cmp	r3, #3
 800704a:	d817      	bhi.n	800707c <USBD_Get_USB_Status+0x44>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <USBD_Get_USB_Status+0x1c>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007065 	.word	0x08007065
 8007058:	0800706b 	.word	0x0800706b
 800705c:	08007071 	.word	0x08007071
 8007060:	08007077 	.word	0x08007077
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
    break;
 8007068:	e00b      	b.n	8007082 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800706a:	2303      	movs	r3, #3
 800706c:	73fb      	strb	r3, [r7, #15]
    break;
 800706e:	e008      	b.n	8007082 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007070:	2301      	movs	r3, #1
 8007072:	73fb      	strb	r3, [r7, #15]
    break;
 8007074:	e005      	b.n	8007082 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007076:	2303      	movs	r3, #3
 8007078:	73fb      	strb	r3, [r7, #15]
    break;
 800707a:	e002      	b.n	8007082 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	73fb      	strb	r3, [r7, #15]
    break;
 8007080:	bf00      	nop
  }
  return usb_status;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <__libc_init_array>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	4d0d      	ldr	r5, [pc, #52]	; (80070c8 <__libc_init_array+0x38>)
 8007094:	4c0d      	ldr	r4, [pc, #52]	; (80070cc <__libc_init_array+0x3c>)
 8007096:	1b64      	subs	r4, r4, r5
 8007098:	10a4      	asrs	r4, r4, #2
 800709a:	2600      	movs	r6, #0
 800709c:	42a6      	cmp	r6, r4
 800709e:	d109      	bne.n	80070b4 <__libc_init_array+0x24>
 80070a0:	4d0b      	ldr	r5, [pc, #44]	; (80070d0 <__libc_init_array+0x40>)
 80070a2:	4c0c      	ldr	r4, [pc, #48]	; (80070d4 <__libc_init_array+0x44>)
 80070a4:	f000 f820 	bl	80070e8 <_init>
 80070a8:	1b64      	subs	r4, r4, r5
 80070aa:	10a4      	asrs	r4, r4, #2
 80070ac:	2600      	movs	r6, #0
 80070ae:	42a6      	cmp	r6, r4
 80070b0:	d105      	bne.n	80070be <__libc_init_array+0x2e>
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b8:	4798      	blx	r3
 80070ba:	3601      	adds	r6, #1
 80070bc:	e7ee      	b.n	800709c <__libc_init_array+0xc>
 80070be:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c2:	4798      	blx	r3
 80070c4:	3601      	adds	r6, #1
 80070c6:	e7f2      	b.n	80070ae <__libc_init_array+0x1e>
 80070c8:	08007288 	.word	0x08007288
 80070cc:	08007288 	.word	0x08007288
 80070d0:	08007288 	.word	0x08007288
 80070d4:	0800728c 	.word	0x0800728c

080070d8 <memset>:
 80070d8:	4402      	add	r2, r0
 80070da:	4603      	mov	r3, r0
 80070dc:	4293      	cmp	r3, r2
 80070de:	d100      	bne.n	80070e2 <memset+0xa>
 80070e0:	4770      	bx	lr
 80070e2:	f803 1b01 	strb.w	r1, [r3], #1
 80070e6:	e7f9      	b.n	80070dc <memset+0x4>

080070e8 <_init>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr

080070f4 <_fini>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	bf00      	nop
 80070f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fa:	bc08      	pop	{r3}
 80070fc:	469e      	mov	lr, r3
 80070fe:	4770      	bx	lr
