
Init_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008364  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080084ec  080084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086a8  080086a8  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b0  080086b0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080086b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          00001bc8  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001d58  20001d58  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b047  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a19  00000000  00000000  0003b207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  0003ec20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f90  00000000  00000000  0003fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240c6  00000000  00000000  00040c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018675  00000000  00000000  00064d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9046  00000000  00000000  0007d3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146401  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044a8  00000000  00000000  00146454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084d4 	.word	0x080084d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	080084d4 	.word	0x080084d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
 80004da:	4b4a      	ldr	r3, [pc, #296]	; (8000604 <MX_GPIO_Init+0x144>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a49      	ldr	r2, [pc, #292]	; (8000604 <MX_GPIO_Init+0x144>)
 80004e0:	f043 0320 	orr.w	r3, r3, #32
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b47      	ldr	r3, [pc, #284]	; (8000604 <MX_GPIO_Init+0x144>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0320 	and.w	r3, r3, #32
 80004ee:	61bb      	str	r3, [r7, #24]
 80004f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	4b43      	ldr	r3, [pc, #268]	; (8000604 <MX_GPIO_Init+0x144>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a42      	ldr	r2, [pc, #264]	; (8000604 <MX_GPIO_Init+0x144>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b40      	ldr	r3, [pc, #256]	; (8000604 <MX_GPIO_Init+0x144>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	4b3c      	ldr	r3, [pc, #240]	; (8000604 <MX_GPIO_Init+0x144>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a3b      	ldr	r2, [pc, #236]	; (8000604 <MX_GPIO_Init+0x144>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b39      	ldr	r3, [pc, #228]	; (8000604 <MX_GPIO_Init+0x144>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b35      	ldr	r3, [pc, #212]	; (8000604 <MX_GPIO_Init+0x144>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a34      	ldr	r2, [pc, #208]	; (8000604 <MX_GPIO_Init+0x144>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b32      	ldr	r3, [pc, #200]	; (8000604 <MX_GPIO_Init+0x144>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <MX_GPIO_Init+0x144>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a2d      	ldr	r2, [pc, #180]	; (8000604 <MX_GPIO_Init+0x144>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <MX_GPIO_Init+0x144>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MX_GPIO_Init+0x144>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a26      	ldr	r2, [pc, #152]	; (8000604 <MX_GPIO_Init+0x144>)
 800056c:	f043 0310 	orr.w	r3, r3, #16
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b24      	ldr	r3, [pc, #144]	; (8000604 <MX_GPIO_Init+0x144>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0310 	and.w	r3, r3, #16
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_C6_Pin|LED_C7_Pin|LED_C8_Pin|Buzzer_C9_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000584:	4820      	ldr	r0, [pc, #128]	; (8000608 <MX_GPIO_Init+0x148>)
 8000586:	f001 f823 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000590:	481e      	ldr	r0, [pc, #120]	; (800060c <MX_GPIO_Init+0x14c>)
 8000592:	f001 f81d 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_C6_Pin|LED_C7_Pin|LED_C8_Pin|Buzzer_C9_Pin;
 8000596:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800059a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4619      	mov	r1, r3
 80005ae:	4816      	ldr	r0, [pc, #88]	; (8000608 <MX_GPIO_Init+0x148>)
 80005b0:	f000 fd08 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	480f      	ldr	r0, [pc, #60]	; (800060c <MX_GPIO_Init+0x14c>)
 80005ce:	f000 fcf9 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005d6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005dc:	2301      	movs	r3, #1
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4619      	mov	r1, r3
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <MX_GPIO_Init+0x150>)
 80005e8:	f000 fcec 	bl	8000fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	2007      	movs	r0, #7
 80005f2:	f000 fc05 	bl	8000e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005f6:	2007      	movs	r0, #7
 80005f8:	f000 fc2e 	bl	8000e58 <HAL_NVIC_EnableIRQ>

}
 80005fc:	bf00      	nop
 80005fe:	3730      	adds	r7, #48	; 0x30
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40020800 	.word	0x40020800
 800060c:	40020000 	.word	0x40020000
 8000610:	40021000 	.word	0x40021000

08000614 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C2_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MX_I2C2_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C2_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_I2C2_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C2_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_I2C2_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_I2C2_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_I2C2_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_I2C2_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_I2C2_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_I2C2_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_I2C2_Init+0x50>)
 8000652:	f001 f82f 	bl	80016b4 <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 f8de 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200003d0 	.word	0x200003d0
 8000668:	40005800 	.word	0x40005800
 800066c:	000186a0 	.word	0x000186a0

08000670 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <HAL_I2C_MspInit+0x84>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d12b      	bne.n	80006ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_I2C_MspInit+0x88>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <HAL_I2C_MspInit+0x88>)
 800069c:	f043 0320 	orr.w	r3, r3, #32
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_I2C_MspInit+0x88>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0320 	and.w	r3, r3, #32
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006ae:	2303      	movs	r3, #3
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b2:	2312      	movs	r3, #18
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006be:	2304      	movs	r3, #4
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <HAL_I2C_MspInit+0x8c>)
 80006ca:	f000 fc7b 	bl	8000fc4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_I2C_MspInit+0x88>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_I2C_MspInit+0x88>)
 80006d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_I2C_MspInit+0x88>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	; 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40005800 	.word	0x40005800
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40021400 	.word	0x40021400

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 f9f6 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f81c 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f7ff fed8 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000710:	f7ff ff80 	bl	8000614 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000714:	f007 f992 	bl	8007a3c <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 8000718:	f000 f948 	bl	80009ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1); // 接收中断开启函数
 800071c:	2201      	movs	r2, #1
 800071e:	4906      	ldr	r1, [pc, #24]	; (8000738 <main+0x38>)
 8000720:	4806      	ldr	r0, [pc, #24]	; (800073c <main+0x3c>)
 8000722:	f003 fa57 	bl	8003bd4 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, (uint8_t*) aTxBuffer, sizeof(aTxBuffer) - 1, 0xFFFF); // 发上一次自定义的 aTxBuffer
 8000726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072a:	220c      	movs	r2, #12
 800072c:	4904      	ldr	r1, [pc, #16]	; (8000740 <main+0x40>)
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <main+0x3c>)
 8000730:	f003 f9be 	bl	8003ab0 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000734:	e7fe      	b.n	8000734 <main+0x34>
 8000736:	bf00      	nop
 8000738:	20000424 	.word	0x20000424
 800073c:	20000438 	.word	0x20000438
 8000740:	20000000 	.word	0x20000000

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f007 feb6 	bl	80084c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a28      	ldr	r2, [pc, #160]	; (8000814 <SystemClock_Config+0xd0>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xd0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a22      	ldr	r2, [pc, #136]	; (8000818 <SystemClock_Config+0xd4>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007a0:	2303      	movs	r3, #3
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2310      	movs	r3, #16
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007c0:	2348      	movs	r3, #72	; 0x48
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007c8:	2303      	movs	r3, #3
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fad1 	bl	8002d78 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007dc:	f000 f81e 	bl	800081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 fde4 	bl	80033c8 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000806:	f000 f809 	bl	800081c <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>

08000826 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f95e 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 fecd 	bl	8001684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USART3_IRQHandler+0x10>)
 80008f6:	f003 f99d 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000438 	.word	0x20000438

08000904 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <OTG_FS_IRQHandler+0x10>)
 800090a:	f001 fa02 	bl	8001d12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20001950 	.word	0x20001950

08000918 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]

        if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 0)
 8000922:	2102      	movs	r1, #2
 8000924:	4807      	ldr	r0, [pc, #28]	; (8000944 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000926:	f000 fe2d 	bl	8001584 <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d104      	bne.n	800093a <HAL_GPIO_EXTI_Callback+0x22>
        {
            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8000930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <HAL_GPIO_EXTI_Callback+0x30>)
 8000936:	f000 fe7d 	bl	8001634 <HAL_GPIO_TogglePin>
        }

}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    if(huart->Instance==USART3)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a09      	ldr	r2, [pc, #36]	; (8000980 <HAL_UART_RxCpltCallback+0x34>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10b      	bne.n	8000976 <HAL_UART_RxCpltCallback+0x2a>
    {
        HAL_UART_Receive_IT(huart, &aRxBuffer, 1); // 接收并写入 aRxBuffer
 800095e:	2201      	movs	r2, #1
 8000960:	4908      	ldr	r1, [pc, #32]	; (8000984 <HAL_UART_RxCpltCallback+0x38>)
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f003 f936 	bl	8003bd4 <HAL_UART_Receive_IT>
        HAL_UART_Transmit(huart, &aRxBuffer, 10, 0xFFFF); // 把接收到的 aRxBuffer 发回去
 8000968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096c:	220a      	movs	r2, #10
 800096e:	4905      	ldr	r1, [pc, #20]	; (8000984 <HAL_UART_RxCpltCallback+0x38>)
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f003 f89d 	bl	8003ab0 <HAL_UART_Transmit>
    }
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40004800 	.word	0x40004800
 8000984:	20000424 	.word	0x20000424

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART3_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009e4:	f002 ff94 	bl	8003910 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f7ff ff15 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000438 	.word	0x20000438
 80009fc:	40004800 	.word	0x40004800

08000a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_UART_MspInit+0x94>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d134      	bne.n	8000a8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_UART_MspInit+0x9c>)
 8000a78:	f000 faa4 	bl	8000fc4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2027      	movs	r0, #39	; 0x27
 8000a82:	f000 f9bd 	bl	8000e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a86:	2027      	movs	r0, #39	; 0x27
 8000a88:	f000 f9e6 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40004800 	.word	0x40004800
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aa6:	490e      	ldr	r1, [pc, #56]	; (8000ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000abc:	4c0b      	ldr	r4, [pc, #44]	; (8000aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aca:	f7ff ff5d 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f007 fcd5 	bl	800847c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fe15 	bl	8000700 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000ae4:	080086b8 	.word	0x080086b8
  ldr r2, =_sbss
 8000ae8:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000aec:	20001d58 	.word	0x20001d58

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f94f 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fe88 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f996 	bl	8000e88 <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 f944 	bl	8000e00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	20000018 	.word	0x20000018
 8000b94:	20000014 	.word	0x20000014

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000018 	.word	0x20000018
 8000bbc:	2000047c 	.word	0x2000047c

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000047c 	.word	0x2000047c

08000bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff ffee 	bl	8000bc0 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Delay+0x44>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffde 	bl	8000bc0 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
  {
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000018 	.word	0x20000018

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d00f      	beq.n	8000dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b06      	cmp	r3, #6
 8000dd2:	d00c      	beq.n	8000dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d009      	beq.n	8000dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d006      	beq.n	8000dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d003      	beq.n	8000dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000de6:	2192      	movs	r1, #146	; 0x92
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000dea:	f7ff fd1c 	bl	8000826 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff16 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	080084ec 	.word	0x080084ec

08000e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d903      	bls.n	8000e20 <HAL_NVIC_SetPriority+0x20>
 8000e18:	21aa      	movs	r1, #170	; 0xaa
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <HAL_NVIC_SetPriority+0x54>)
 8000e1c:	f7ff fd03 	bl	8000826 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	d903      	bls.n	8000e2e <HAL_NVIC_SetPriority+0x2e>
 8000e26:	21ab      	movs	r1, #171	; 0xab
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <HAL_NVIC_SetPriority+0x54>)
 8000e2a:	f7ff fcfc 	bl	8000826 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2e:	f7ff ff1b 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000e32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	6978      	ldr	r0, [r7, #20]
 8000e3a:	f7ff ff6b 	bl	8000d14 <NVIC_EncodePriority>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff3a 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	080084ec 	.word	0x080084ec

08000e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da03      	bge.n	8000e72 <HAL_NVIC_EnableIRQ+0x1a>
 8000e6a:	21be      	movs	r1, #190	; 0xbe
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_NVIC_EnableIRQ+0x2c>)
 8000e6e:	f7ff fcda 	bl	8000826 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff04 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	080084ec 	.word	0x080084ec

08000e88 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff73 	bl	8000d7c <SysTick_Config>
 8000e96:	4603      	mov	r3, r0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eae:	f7ff fe87 	bl	8000bc0 <HAL_GetTick>
 8000eb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d008      	beq.n	8000ed2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e052      	b.n	8000f78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0216 	bic.w	r2, r2, #22
 8000ee0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d103      	bne.n	8000f02 <HAL_DMA_Abort+0x62>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0208 	bic.w	r2, r2, #8
 8000f10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f22:	e013      	b.n	8000f4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f24:	f7ff fe4c 	bl	8000bc0 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	d90c      	bls.n	8000f4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2220      	movs	r2, #32
 8000f36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e015      	b.n	8000f78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1e4      	bne.n	8000f24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5e:	223f      	movs	r2, #63	; 0x3f
 8000f60:	409a      	lsls	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d004      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00c      	b.n	8000fb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a39      	ldr	r2, [pc, #228]	; (80010c4 <HAL_GPIO_Init+0x100>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d023      	beq.n	800102a <HAL_GPIO_Init+0x66>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a38      	ldr	r2, [pc, #224]	; (80010c8 <HAL_GPIO_Init+0x104>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d01f      	beq.n	800102a <HAL_GPIO_Init+0x66>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a37      	ldr	r2, [pc, #220]	; (80010cc <HAL_GPIO_Init+0x108>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01b      	beq.n	800102a <HAL_GPIO_Init+0x66>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a36      	ldr	r2, [pc, #216]	; (80010d0 <HAL_GPIO_Init+0x10c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d017      	beq.n	800102a <HAL_GPIO_Init+0x66>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a35      	ldr	r2, [pc, #212]	; (80010d4 <HAL_GPIO_Init+0x110>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x66>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a34      	ldr	r2, [pc, #208]	; (80010d8 <HAL_GPIO_Init+0x114>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00f      	beq.n	800102a <HAL_GPIO_Init+0x66>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a33      	ldr	r2, [pc, #204]	; (80010dc <HAL_GPIO_Init+0x118>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00b      	beq.n	800102a <HAL_GPIO_Init+0x66>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a32      	ldr	r2, [pc, #200]	; (80010e0 <HAL_GPIO_Init+0x11c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x66>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <HAL_GPIO_Init+0x120>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x66>
 8001022:	21ac      	movs	r1, #172	; 0xac
 8001024:	4830      	ldr	r0, [pc, #192]	; (80010e8 <HAL_GPIO_Init+0x124>)
 8001026:	f7ff fbfe 	bl	8000826 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	b29b      	uxth	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <HAL_GPIO_Init+0x7c>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	0c1b      	lsrs	r3, r3, #16
 800103a:	041b      	lsls	r3, r3, #16
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x84>
 8001040:	21ad      	movs	r1, #173	; 0xad
 8001042:	4829      	ldr	r0, [pc, #164]	; (80010e8 <HAL_GPIO_Init+0x124>)
 8001044:	f7ff fbef 	bl	8000826 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d035      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d031      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b11      	cmp	r3, #17
 800105e:	d02d      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d029      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b12      	cmp	r3, #18
 800106e:	d025      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001078:	d020      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001082:	d01b      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800108c:	d016      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001096:	d011      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80010a0:	d00c      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0xf8>
 80010b4:	21ae      	movs	r1, #174	; 0xae
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <HAL_GPIO_Init+0x124>)
 80010b8:	f7ff fbb5 	bl	8000826 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	e240      	b.n	8001544 <HAL_GPIO_Init+0x580>
 80010c2:	bf00      	nop
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40021400 	.word	0x40021400
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40021c00 	.word	0x40021c00
 80010e4:	40022000 	.word	0x40022000
 80010e8:	08008528 	.word	0x08008528
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 821a 	bne.w	800153e <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	2b02      	cmp	r3, #2
 8001120:	d144      	bne.n	80011ac <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00f      	beq.n	800114a <HAL_GPIO_Init+0x186>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d00b      	beq.n	800114a <HAL_GPIO_Init+0x186>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x186>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x186>
 8001142:	21c0      	movs	r1, #192	; 0xc0
 8001144:	4892      	ldr	r0, [pc, #584]	; (8001390 <HAL_GPIO_Init+0x3cc>)
 8001146:	f7ff fb6e 	bl	8000826 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d027      	beq.n	8001208 <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <HAL_GPIO_Init+0x214>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0x214>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x214>
 80011d0:	21d1      	movs	r1, #209	; 0xd1
 80011d2:	486f      	ldr	r0, [pc, #444]	; (8001390 <HAL_GPIO_Init+0x3cc>)
 80011d4:	f7ff fb27 	bl	8000826 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	f040 80bf 	bne.w	8001394 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8093 	beq.w	8001346 <HAL_GPIO_Init+0x382>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	2b09      	cmp	r3, #9
 8001226:	f000 808e 	beq.w	8001346 <HAL_GPIO_Init+0x382>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8089 	beq.w	8001346 <HAL_GPIO_Init+0x382>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8084 	beq.w	8001346 <HAL_GPIO_Init+0x382>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d07f      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d07b      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d077      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d073      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d06f      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d06b      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d067      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d063      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b04      	cmp	r3, #4
 8001284:	d05f      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d05b      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d057      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b05      	cmp	r3, #5
 800129c:	d053      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d04f      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	d04b      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d047      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	2b09      	cmp	r3, #9
 80012bc:	d043      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	d03f      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	d03b      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b07      	cmp	r3, #7
 80012d4:	d037      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d033      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d02f      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d02b      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b09      	cmp	r3, #9
 80012f4:	d027      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b09      	cmp	r3, #9
 80012fc:	d023      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b0a      	cmp	r3, #10
 8001304:	d01f      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d01b      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b0b      	cmp	r3, #11
 8001314:	d017      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d00f      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b0d      	cmp	r3, #13
 800132c:	d00b      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	2b0c      	cmp	r3, #12
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x382>
 800133e:	21de      	movs	r1, #222	; 0xde
 8001340:	4813      	ldr	r0, [pc, #76]	; (8001390 <HAL_GPIO_Init+0x3cc>)
 8001342:	f7ff fa70 	bl	8000826 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	220f      	movs	r2, #15
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691a      	ldr	r2, [r3, #16]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	69b9      	ldr	r1, [r7, #24]
 800138a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800138e:	e001      	b.n	8001394 <HAL_GPIO_Init+0x3d0>
 8001390:	08008528 	.word	0x08008528
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80b4 	beq.w	800153e <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <HAL_GPIO_Init+0x594>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a5e      	ldr	r2, [pc, #376]	; (8001558 <HAL_GPIO_Init+0x594>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <HAL_GPIO_Init+0x594>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f2:	4a5a      	ldr	r2, [pc, #360]	; (800155c <HAL_GPIO_Init+0x598>)
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a51      	ldr	r2, [pc, #324]	; (8001560 <HAL_GPIO_Init+0x59c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d02b      	beq.n	8001476 <HAL_GPIO_Init+0x4b2>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a50      	ldr	r2, [pc, #320]	; (8001564 <HAL_GPIO_Init+0x5a0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d025      	beq.n	8001472 <HAL_GPIO_Init+0x4ae>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4f      	ldr	r2, [pc, #316]	; (8001568 <HAL_GPIO_Init+0x5a4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01f      	beq.n	800146e <HAL_GPIO_Init+0x4aa>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_GPIO_Init+0x5a8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0x4a6>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4d      	ldr	r2, [pc, #308]	; (8001570 <HAL_GPIO_Init+0x5ac>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x4a2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_GPIO_Init+0x5b0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x49e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <HAL_GPIO_Init+0x5b4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x49a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4a      	ldr	r2, [pc, #296]	; (800157c <HAL_GPIO_Init+0x5b8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x496>
 8001456:	2307      	movs	r3, #7
 8001458:	e00e      	b.n	8001478 <HAL_GPIO_Init+0x4b4>
 800145a:	2308      	movs	r3, #8
 800145c:	e00c      	b.n	8001478 <HAL_GPIO_Init+0x4b4>
 800145e:	2306      	movs	r3, #6
 8001460:	e00a      	b.n	8001478 <HAL_GPIO_Init+0x4b4>
 8001462:	2305      	movs	r3, #5
 8001464:	e008      	b.n	8001478 <HAL_GPIO_Init+0x4b4>
 8001466:	2304      	movs	r3, #4
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x4b4>
 800146a:	2303      	movs	r3, #3
 800146c:	e004      	b.n	8001478 <HAL_GPIO_Init+0x4b4>
 800146e:	2302      	movs	r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x4b4>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x4b4>
 8001476:	2300      	movs	r3, #0
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4093      	lsls	r3, r2
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001488:	4934      	ldr	r1, [pc, #208]	; (800155c <HAL_GPIO_Init+0x598>)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001496:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_GPIO_Init+0x5bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ba:	4a31      	ldr	r2, [pc, #196]	; (8001580 <HAL_GPIO_Init+0x5bc>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_GPIO_Init+0x5bc>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e4:	4a26      	ldr	r2, [pc, #152]	; (8001580 <HAL_GPIO_Init+0x5bc>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_GPIO_Init+0x5bc>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <HAL_GPIO_Init+0x5bc>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_GPIO_Init+0x5bc>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001538:	4a11      	ldr	r2, [pc, #68]	; (8001580 <HAL_GPIO_Init+0x5bc>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3301      	adds	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	f67f add0 	bls.w	80010ec <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40021400 	.word	0x40021400
 8001578:	40021800 	.word	0x40021800
 800157c:	40021c00 	.word	0x40021c00
 8001580:	40013c00 	.word	0x40013c00

08001584 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <HAL_GPIO_ReadPin+0x1c>
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	0c1b      	lsrs	r3, r3, #16
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <HAL_GPIO_ReadPin+0x26>
 80015a0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <HAL_GPIO_ReadPin+0x48>)
 80015a6:	f7ff f93e 	bl	8000826 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80015b6:	2301      	movs	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e001      	b.n	80015c0 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	08008528 	.word	0x08008528

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <HAL_GPIO_WritePin+0x20>
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	0c1b      	lsrs	r3, r3, #16
 80015ea:	041b      	lsls	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <HAL_GPIO_WritePin+0x2a>
 80015f0:	f240 119d 	movw	r1, #413	; 0x19d
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <HAL_GPIO_WritePin+0x60>)
 80015f6:	f7ff f916 	bl	8000826 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80015fa:	787b      	ldrb	r3, [r7, #1]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_GPIO_WritePin+0x40>
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d004      	beq.n	8001610 <HAL_GPIO_WritePin+0x40>
 8001606:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800160a:	4809      	ldr	r0, [pc, #36]	; (8001630 <HAL_GPIO_WritePin+0x60>)
 800160c:	f7ff f90b 	bl	8000826 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800161c:	e003      	b.n	8001626 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	08008528 	.word	0x08008528

08001634 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <HAL_GPIO_TogglePin+0x1c>
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <HAL_GPIO_TogglePin+0x26>
 8001650:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001654:	480a      	ldr	r0, [pc, #40]	; (8001680 <HAL_GPIO_TogglePin+0x4c>)
 8001656:	f7ff f8e6 	bl	8000826 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001660:	887a      	ldrh	r2, [r7, #2]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	041a      	lsls	r2, r3, #16
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43d9      	mvns	r1, r3
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	400b      	ands	r3, r1
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	08008528 	.word	0x08008528

08001684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f938 	bl	8000918 <HAL_GPIO_EXTI_Callback>
  }
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1be      	b.n	8001a44 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a9f      	ldr	r2, [pc, #636]	; (8001948 <HAL_I2C_Init+0x294>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00e      	beq.n	80016ee <HAL_I2C_Init+0x3a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a9d      	ldr	r2, [pc, #628]	; (800194c <HAL_I2C_Init+0x298>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d009      	beq.n	80016ee <HAL_I2C_Init+0x3a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a9c      	ldr	r2, [pc, #624]	; (8001950 <HAL_I2C_Init+0x29c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d004      	beq.n	80016ee <HAL_I2C_Init+0x3a>
 80016e4:	f240 11bf 	movw	r1, #447	; 0x1bf
 80016e8:	489a      	ldr	r0, [pc, #616]	; (8001954 <HAL_I2C_Init+0x2a0>)
 80016ea:	f7ff f89c 	bl	8000826 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <HAL_I2C_Init+0x4c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a97      	ldr	r2, [pc, #604]	; (8001958 <HAL_I2C_Init+0x2a4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d904      	bls.n	800170a <HAL_I2C_Init+0x56>
 8001700:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001704:	4893      	ldr	r0, [pc, #588]	; (8001954 <HAL_I2C_Init+0x2a0>)
 8001706:	f7ff f88e 	bl	8000826 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_I2C_Init+0x72>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800171a:	d004      	beq.n	8001726 <HAL_I2C_Init+0x72>
 800171c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001720:	488c      	ldr	r0, [pc, #560]	; (8001954 <HAL_I2C_Init+0x2a0>)
 8001722:	f7ff f880 	bl	8000826 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800172e:	f023 0303 	bic.w	r3, r3, #3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HAL_I2C_Init+0x8c>
 8001736:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800173a:	4886      	ldr	r0, [pc, #536]	; (8001954 <HAL_I2C_Init+0x2a0>)
 800173c:	f7ff f873 	bl	8000826 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001748:	d009      	beq.n	800175e <HAL_I2C_Init+0xaa>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001752:	d004      	beq.n	800175e <HAL_I2C_Init+0xaa>
 8001754:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001758:	487e      	ldr	r0, [pc, #504]	; (8001954 <HAL_I2C_Init+0x2a0>)
 800175a:	f7ff f864 	bl	8000826 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_I2C_Init+0xc4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d004      	beq.n	8001778 <HAL_I2C_Init+0xc4>
 800176e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001772:	4878      	ldr	r0, [pc, #480]	; (8001954 <HAL_I2C_Init+0x2a0>)
 8001774:	f7ff f857 	bl	8000826 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_I2C_Init+0xda>
 8001784:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001788:	4872      	ldr	r0, [pc, #456]	; (8001954 <HAL_I2C_Init+0x2a0>)
 800178a:	f7ff f84c 	bl	8000826 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_I2C_Init+0xf4>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	2b40      	cmp	r3, #64	; 0x40
 800179c:	d004      	beq.n	80017a8 <HAL_I2C_Init+0xf4>
 800179e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80017a2:	486c      	ldr	r0, [pc, #432]	; (8001954 <HAL_I2C_Init+0x2a0>)
 80017a4:	f7ff f83f 	bl	8000826 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <HAL_I2C_Init+0x10e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	2b80      	cmp	r3, #128	; 0x80
 80017b6:	d004      	beq.n	80017c2 <HAL_I2C_Init+0x10e>
 80017b8:	f240 11c7 	movw	r1, #455	; 0x1c7
 80017bc:	4865      	ldr	r0, [pc, #404]	; (8001954 <HAL_I2C_Init+0x2a0>)
 80017be:	f7ff f832 	bl	8000826 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7fe ff4a 	bl	8000670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001814:	f002 f854 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a4f      	ldr	r2, [pc, #316]	; (800195c <HAL_I2C_Init+0x2a8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d807      	bhi.n	8001834 <HAL_I2C_Init+0x180>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a4e      	ldr	r2, [pc, #312]	; (8001960 <HAL_I2C_Init+0x2ac>)
 8001828:	4293      	cmp	r3, r2
 800182a:	bf94      	ite	ls
 800182c:	2301      	movls	r3, #1
 800182e:	2300      	movhi	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	e006      	b.n	8001842 <HAL_I2C_Init+0x18e>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_I2C_Init+0x2b0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	bf94      	ite	ls
 800183c:	2301      	movls	r3, #1
 800183e:	2300      	movhi	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0fc      	b.n	8001a44 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a46      	ldr	r2, [pc, #280]	; (8001968 <HAL_I2C_Init+0x2b4>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a38      	ldr	r2, [pc, #224]	; (800195c <HAL_I2C_Init+0x2a8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d802      	bhi.n	8001884 <HAL_I2C_Init+0x1d0>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3301      	adds	r3, #1
 8001882:	e009      	b.n	8001898 <HAL_I2C_Init+0x1e4>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	4a37      	ldr	r2, [pc, #220]	; (800196c <HAL_I2C_Init+0x2b8>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	3301      	adds	r3, #1
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	430b      	orrs	r3, r1
 800189e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	492a      	ldr	r1, [pc, #168]	; (800195c <HAL_I2C_Init+0x2a8>)
 80018b4:	428b      	cmp	r3, r1
 80018b6:	d819      	bhi.n	80018ec <HAL_I2C_Init+0x238>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e59      	subs	r1, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018cc:	400b      	ands	r3, r1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <HAL_I2C_Init+0x234>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e59      	subs	r1, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e6:	e066      	b.n	80019b6 <HAL_I2C_Init+0x302>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e064      	b.n	80019b6 <HAL_I2C_Init+0x302>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d111      	bne.n	8001918 <HAL_I2C_Init+0x264>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e58      	subs	r0, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e012      	b.n	800193e <HAL_I2C_Init+0x28a>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1e58      	subs	r0, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	0099      	lsls	r1, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	fbb0 f3f3 	udiv	r3, r0, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <HAL_I2C_Init+0x2bc>
 8001942:	2301      	movs	r3, #1
 8001944:	e037      	b.n	80019b6 <HAL_I2C_Init+0x302>
 8001946:	bf00      	nop
 8001948:	40005400 	.word	0x40005400
 800194c:	40005800 	.word	0x40005800
 8001950:	40005c00 	.word	0x40005c00
 8001954:	08008564 	.word	0x08008564
 8001958:	00061a80 	.word	0x00061a80
 800195c:	000186a0 	.word	0x000186a0
 8001960:	001e847f 	.word	0x001e847f
 8001964:	003d08ff 	.word	0x003d08ff
 8001968:	431bde83 	.word	0x431bde83
 800196c:	10624dd3 	.word	0x10624dd3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10e      	bne.n	8001996 <HAL_I2C_Init+0x2e2>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e58      	subs	r0, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	440b      	add	r3, r1
 8001986:	fbb0 f3f3 	udiv	r3, r0, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001994:	e00f      	b.n	80019b6 <HAL_I2C_Init+0x302>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1e58      	subs	r0, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6859      	ldr	r1, [r3, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	0099      	lsls	r1, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	6809      	ldr	r1, [r1, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69da      	ldr	r2, [r3, #28]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6911      	ldr	r1, [r2, #16]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	68d2      	ldr	r2, [r2, #12]
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	b08f      	sub	sp, #60	; 0x3c
 8001a50:	af0a      	add	r7, sp, #40	; 0x28
 8001a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e11d      	b.n	8001c9a <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a66:	d008      	beq.n	8001a7a <HAL_PCD_Init+0x2e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a8d      	ldr	r2, [pc, #564]	; (8001ca4 <HAL_PCD_Init+0x258>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d003      	beq.n	8001a7a <HAL_PCD_Init+0x2e>
 8001a72:	2187      	movs	r1, #135	; 0x87
 8001a74:	488c      	ldr	r0, [pc, #560]	; (8001ca8 <HAL_PCD_Init+0x25c>)
 8001a76:	f7fe fed6 	bl	8000826 <assert_failed>

  USBx = hpcd->Instance;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f006 f9dd 	bl	8007e54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d102      	bne.n	8001ab4 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 f8ca 	bl	8004c52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	687e      	ldr	r6, [r7, #4]
 8001ac6:	466d      	mov	r5, sp
 8001ac8:	f106 0410 	add.w	r4, r6, #16
 8001acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ad8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001adc:	1d33      	adds	r3, r6, #4
 8001ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ae0:	6838      	ldr	r0, [r7, #0]
 8001ae2:	f002 ffa1 	bl	8004a28 <USB_CoreInit>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0d0      	b.n	8001c9a <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 f8b8 	bl	8004c74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e04a      	b.n	8001ba0 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	333d      	adds	r3, #61	; 0x3d
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	333c      	adds	r3, #60	; 0x3c
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	b298      	uxth	r0, r3
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	3342      	adds	r3, #66	; 0x42
 8001b46:	4602      	mov	r2, r0
 8001b48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	333f      	adds	r3, #63	; 0x3f
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3344      	adds	r3, #68	; 0x44
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	3348      	adds	r3, #72	; 0x48
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	3350      	adds	r3, #80	; 0x50
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d3af      	bcc.n	8001b0a <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e044      	b.n	8001c3a <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	3301      	adds	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3b5      	bcc.n	8001bb0 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	687e      	ldr	r6, [r7, #4]
 8001c4c:	466d      	mov	r5, sp
 8001c4e:	f106 0410 	add.w	r4, r6, #16
 8001c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c62:	1d33      	adds	r3, r6, #4
 8001c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c66:	6838      	ldr	r0, [r7, #0]
 8001c68:	f003 f850 	bl	8004d0c <USB_DevInit>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2202      	movs	r2, #2
 8001c76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00d      	b.n	8001c9a <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f004 f8cc 	bl	8005e30 <USB_DevDisconnect>

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40040000 	.word	0x40040000
 8001ca8:	0800859c 	.word	0x0800859c

08001cac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_PCD_Start+0x1c>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e020      	b.n	8001d0a <HAL_PCD_Start+0x5e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d109      	bne.n	8001cec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d005      	beq.n	8001cec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f002 ff9d 	bl	8004c30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 f877 	bl	8005dee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d12:	b590      	push	{r4, r7, lr}
 8001d14:	b08d      	sub	sp, #52	; 0x34
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f004 f935 	bl	8005f98 <USB_GetMode>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 839d 	bne.w	8002470 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 f899 	bl	8005e72 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8393 	beq.w	800246e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f004 f890 	bl	8005e72 <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d107      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f002 0202 	and.w	r2, r2, #2
 8001d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 f87e 	bl	8005e72 <USB_ReadInterrupts>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b10      	cmp	r3, #16
 8001d7e:	d161      	bne.n	8001e44 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0210 	bic.w	r2, r2, #16
 8001d8e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 020f 	and.w	r2, r3, #15
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	0c5b      	lsrs	r3, r3, #17
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d124      	bne.n	8001e06 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d035      	beq.n	8001e34 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6a38      	ldr	r0, [r7, #32]
 8001ddc:	f003 feb5 	bl	8005b4a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dec:	441a      	add	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dfe:	441a      	add	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	619a      	str	r2, [r3, #24]
 8001e04:	e016      	b.n	8001e34 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	0c5b      	lsrs	r3, r3, #17
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d110      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e18:	2208      	movs	r2, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6a38      	ldr	r0, [r7, #32]
 8001e1e:	f003 fe94 	bl	8005b4a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e2e:	441a      	add	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0210 	orr.w	r2, r2, #16
 8001e42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f004 f812 	bl	8005e72 <USB_ReadInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e58:	d16e      	bne.n	8001f38 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 f818 	bl	8005e98 <USB_ReadDevAllOutEpInterrupt>
 8001e68:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e6a:	e062      	b.n	8001f32 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d057      	beq.n	8001f26 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 f83d 	bl	8005f00 <USB_ReadDevOutEPInterrupt>
 8001e86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fdb0 	bl	8002a0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 feaa 	bl	8002c24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2310      	movs	r3, #16
 8001eea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f02:	461a      	mov	r2, r3
 8001f04:	2320      	movs	r3, #32
 8001f06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	3301      	adds	r3, #1
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	085b      	lsrs	r3, r3, #1
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d199      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 ff98 	bl	8005e72 <USB_ReadInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f4c:	f040 80c0 	bne.w	80020d0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 ffb9 	bl	8005ecc <USB_ReadDevAllInEpInterrupt>
 8001f5a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f60:	e0b2      	b.n	80020c8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a7 	beq.w	80020bc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 ffdf 	bl	8005f3c <USB_ReadDevInEPInterrupt>
 8001f7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d057      	beq.n	800203a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	2201      	movs	r2, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69f9      	ldr	r1, [r7, #28]
 8001fa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001faa:	4013      	ands	r3, r2
 8001fac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d132      	bne.n	800202e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3348      	adds	r3, #72	; 0x48
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4403      	add	r3, r0
 8001fe8:	3344      	adds	r3, #68	; 0x44
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4419      	add	r1, r3
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4403      	add	r3, r0
 8001ffc:	3348      	adds	r3, #72	; 0x48
 8001ffe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	2b00      	cmp	r3, #0
 8002004:	d113      	bne.n	800202e <HAL_PCD_IRQHandler+0x31c>
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	3350      	adds	r3, #80	; 0x50
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d108      	bne.n	800202e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002026:	461a      	mov	r2, r3
 8002028:	2101      	movs	r1, #1
 800202a:	f003 ffe7 	bl	8005ffc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f005 ff8e 	bl	8007f56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	4413      	add	r3, r2
 800204c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002050:	461a      	mov	r2, r3
 8002052:	2308      	movs	r3, #8
 8002054:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	4413      	add	r3, r2
 8002068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800206c:	461a      	mov	r2, r3
 800206e:	2310      	movs	r3, #16
 8002070:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002088:	461a      	mov	r2, r3
 800208a:	2340      	movs	r3, #64	; 0x40
 800208c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a4:	461a      	mov	r2, r3
 80020a6:	2302      	movs	r3, #2
 80020a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fc1b 	bl	80028f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	3301      	adds	r3, #1
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f47f af49 	bne.w	8001f62 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 fecc 	bl	8005e72 <USB_ReadInterrupts>
 80020da:	4603      	mov	r3, r0
 80020dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020e4:	d122      	bne.n	800212c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002100:	2b01      	cmp	r3, #1
 8002102:	d108      	bne.n	8002116 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800210c:	2100      	movs	r1, #0
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fe26 	bl	8002d60 <HAL_PCDEx_LPM_Callback>
 8002114:	e002      	b.n	800211c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f005 ff94 	bl	8008044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800212a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fe9e 	bl	8005e72 <USB_ReadInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002140:	d112      	bne.n	8002168 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f005 ff50 	bl	8007ff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002166:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 fe80 	bl	8005e72 <USB_ReadInterrupts>
 8002172:	4603      	mov	r3, r0
 8002174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217c:	f040 80c7 	bne.w	800230e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2110      	movs	r1, #16
 800219a:	4618      	mov	r0, r3
 800219c:	f002 ff1a 	bl	8004fd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a4:	e056      	b.n	8002254 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b2:	461a      	mov	r2, r3
 80021b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ca:	0151      	lsls	r1, r2, #5
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	440a      	add	r2, r1
 80021d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021d8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800220c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	0151      	lsls	r1, r2, #5
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	440a      	add	r2, r1
 8002224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002228:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800222c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223e:	0151      	lsls	r1, r2, #5
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	440a      	add	r2, r1
 8002244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002248:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800224c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	3301      	adds	r3, #1
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225a:	429a      	cmp	r2, r3
 800225c:	d3a3      	bcc.n	80021a6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002270:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228a:	f043 030b 	orr.w	r3, r3, #11
 800228e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a0:	f043 030b 	orr.w	r3, r3, #11
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	e015      	b.n	80022d4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ce:	f043 030b 	orr.w	r3, r3, #11
 80022d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022f8:	461a      	mov	r2, r3
 80022fa:	f003 fe7f 	bl	8005ffc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800230c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fdad 	bl	8005e72 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002322:	d124      	bne.n	800236e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fe43 	bl	8005fb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f002 feab 	bl	800508e <USB_GetDevSpeed>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681c      	ldr	r4, [r3, #0]
 8002344:	f001 fab0 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 8002348:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	4620      	mov	r0, r4
 8002354:	f002 fbca 	bl	8004aec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f005 fe24 	bl	8007fa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800236c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fd7d 	bl	8005e72 <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b08      	cmp	r3, #8
 8002380:	d10a      	bne.n	8002398 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f005 fe01 	bl	8007f8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f002 0208 	and.w	r2, r2, #8
 8002396:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f003 fd68 	bl	8005e72 <USB_ReadInterrupts>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ac:	d10f      	bne.n	80023ce <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f005 fe63 	bl	8008084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80023cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fd4d 	bl	8005e72 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023e2:	d10f      	bne.n	8002404 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f005 fe36 	bl	8008060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fd32 	bl	8005e72 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002418:	d10a      	bne.n	8002430 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f005 fe44 	bl	80080a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800242e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fd1c 	bl	8005e72 <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d115      	bne.n	8002470 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f005 fe34 	bl	80080c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	430a      	orrs	r2, r1
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	e000      	b.n	8002470 <HAL_PCD_IRQHandler+0x75e>
      return;
 800246e:	bf00      	nop
    }
  }
}
 8002470:	3734      	adds	r7, #52	; 0x34
 8002472:	46bd      	mov	sp, r7
 8002474:	bd90      	pop	{r4, r7, pc}

08002476 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_SetAddress+0x1a>
 800248c:	2302      	movs	r3, #2
 800248e:	e013      	b.n	80024b8 <HAL_PCD_SetAddress+0x42>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 fc7a 	bl	8005da2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	70fb      	strb	r3, [r7, #3]
 80024d2:	460b      	mov	r3, r1
 80024d4:	803b      	strh	r3, [r7, #0]
 80024d6:	4613      	mov	r3, r2
 80024d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da0f      	bge.n	8002506 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	f003 020f 	and.w	r2, r3, #15
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	3338      	adds	r3, #56	; 0x38
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	3304      	adds	r3, #4
 80024fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	705a      	strb	r2, [r3, #1]
 8002504:	e00f      	b.n	8002526 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	f003 020f 	and.w	r2, r3, #15
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	3304      	adds	r3, #4
 800251e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002532:	883a      	ldrh	r2, [r7, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	78ba      	ldrb	r2, [r7, #2]
 800253c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002550:	78bb      	ldrb	r3, [r7, #2]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d102      	bne.n	800255c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_PCD_EP_Open+0xaa>
 8002566:	2302      	movs	r3, #2
 8002568:	e00e      	b.n	8002588 <HAL_PCD_EP_Open+0xc8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68f9      	ldr	r1, [r7, #12]
 8002578:	4618      	mov	r0, r3
 800257a:	f002 fdad 	bl	80050d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002586:	7afb      	ldrb	r3, [r7, #11]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800259c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da0f      	bge.n	80025c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f003 020f 	and.w	r2, r3, #15
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	3338      	adds	r3, #56	; 0x38
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	705a      	strb	r2, [r3, #1]
 80025c2:	e00f      	b.n	80025e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 020f 	and.w	r2, r3, #15
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_PCD_EP_Close+0x6e>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e00e      	b.n	800261c <HAL_PCD_EP_Close+0x8c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	4618      	mov	r0, r3
 800260e:	f002 fdeb 	bl	80051e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	460b      	mov	r3, r1
 8002632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	f003 020f 	and.w	r2, r3, #15
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2200      	movs	r2, #0
 8002664:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002666:	7afb      	ldrb	r3, [r7, #11]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	b2da      	uxtb	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002680:	7afb      	ldrb	r3, [r7, #11]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	6979      	ldr	r1, [r7, #20]
 8002698:	f003 f8c6 	bl	8005828 <USB_EP0StartXfer>
 800269c:	e008      	b.n	80026b0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	6979      	ldr	r1, [r7, #20]
 80026ac:	f002 fe78 	bl	80053a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 020f 	and.w	r2, r3, #15
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80026dc:	681b      	ldr	r3, [r3, #0]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	460b      	mov	r3, r1
 80026f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fa:	7afb      	ldrb	r3, [r7, #11]
 80026fc:	f003 020f 	and.w	r2, r3, #15
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	3338      	adds	r3, #56	; 0x38
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	3304      	adds	r3, #4
 8002710:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2201      	movs	r2, #1
 8002728:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800272a:	7afb      	ldrb	r3, [r7, #11]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	b2da      	uxtb	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d102      	bne.n	8002744 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002744:	7afb      	ldrb	r3, [r7, #11]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	6979      	ldr	r1, [r7, #20]
 800275c:	f003 f864 	bl	8005828 <USB_EP0StartXfer>
 8002760:	e008      	b.n	8002774 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	6979      	ldr	r1, [r7, #20]
 8002770:	f002 fe16 	bl	80053a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	f003 020f 	and.w	r2, r3, #15
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d901      	bls.n	800279c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e050      	b.n	800283e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800279c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	da0f      	bge.n	80027c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	f003 020f 	and.w	r2, r3, #15
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	3338      	adds	r3, #56	; 0x38
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	705a      	strb	r2, [r3, #1]
 80027c2:	e00d      	b.n	80027e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_PCD_EP_SetStall+0x82>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e01e      	b.n	800283e <HAL_PCD_EP_SetStall+0xc0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 f9f3 	bl	8005bfa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	b2d9      	uxtb	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800282e:	461a      	mov	r2, r3
 8002830:	f003 fbe4 	bl	8005ffc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	d901      	bls.n	8002864 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e042      	b.n	80028ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002868:	2b00      	cmp	r3, #0
 800286a:	da0f      	bge.n	800288c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	3338      	adds	r3, #56	; 0x38
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	705a      	strb	r2, [r3, #1]
 800288a:	e00f      	b.n	80028ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	f003 020f 	and.w	r2, r3, #15
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	3304      	adds	r3, #4
 80028a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_PCD_EP_ClrStall+0x86>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e00e      	b.n	80028ea <HAL_PCD_EP_ClrStall+0xa4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 f9fb 	bl	8005cd6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b08a      	sub	sp, #40	; 0x28
 80028f6:	af02      	add	r7, sp, #8
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	3338      	adds	r3, #56	; 0x38
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	3304      	adds	r3, #4
 8002918:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	429a      	cmp	r2, r3
 8002924:	d901      	bls.n	800292a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e06c      	b.n	8002a04 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	429a      	cmp	r2, r3
 800293e:	d902      	bls.n	8002946 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3303      	adds	r3, #3
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800294e:	e02b      	b.n	80029a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	429a      	cmp	r2, r3
 8002964:	d902      	bls.n	800296c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3303      	adds	r3, #3
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68d9      	ldr	r1, [r3, #12]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002984:	b2db      	uxtb	r3, r3
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4603      	mov	r3, r0
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f003 f89f 	bl	8005ace <USB_WritePacket>

    ep->xfer_buff  += len;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	441a      	add	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	441a      	add	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d809      	bhi.n	80029d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d203      	bcs.n	80029d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1be      	bne.n	8002950 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d811      	bhi.n	8002a02 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	2201      	movs	r2, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029fe:	4013      	ands	r3, r2
 8002a00:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	333c      	adds	r3, #60	; 0x3c
 8002a24:	3304      	adds	r3, #4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	f040 80a0 	bne.w	8002b84 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d015      	beq.n	8002a7a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a72      	ldr	r2, [pc, #456]	; (8002c1c <PCD_EP_OutXfrComplete_int+0x210>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	f240 80dd 	bls.w	8002c12 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80d7 	beq.w	8002c12 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	461a      	mov	r2, r3
 8002a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a76:	6093      	str	r3, [r2, #8]
 8002a78:	e0cb      	b.n	8002c12 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a90:	461a      	mov	r2, r3
 8002a92:	2320      	movs	r3, #32
 8002a94:	6093      	str	r3, [r2, #8]
 8002a96:	e0bc      	b.n	8002c12 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 80b7 	bne.w	8002c12 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a5d      	ldr	r2, [pc, #372]	; (8002c1c <PCD_EP_OutXfrComplete_int+0x210>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d90f      	bls.n	8002acc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac8:	6093      	str	r3, [r2, #8]
 8002aca:	e0a2      	b.n	8002c12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ade:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	0159      	lsls	r1, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002af2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4403      	add	r3, r0
 8002b02:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b06:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4403      	add	r3, r0
 8002b2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4419      	add	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4403      	add	r3, r0
 8002b40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b44:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d114      	bne.n	8002b76 <PCD_EP_OutXfrComplete_int+0x16a>
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d108      	bne.n	8002b76 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2101      	movs	r1, #1
 8002b72:	f003 fa43 	bl	8005ffc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f005 f9cf 	bl	8007f20 <HAL_PCD_DataOutStageCallback>
 8002b82:	e046      	b.n	8002c12 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <PCD_EP_OutXfrComplete_int+0x214>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d124      	bne.n	8002bd6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba8:	6093      	str	r3, [r2, #8]
 8002baa:	e032      	b.n	8002c12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f005 f9a6 	bl	8007f20 <HAL_PCD_DataOutStageCallback>
 8002bd4:	e01d      	b.n	8002c12 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d114      	bne.n	8002c06 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d108      	bne.n	8002c06 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2100      	movs	r1, #0
 8002c02:	f003 f9fb 	bl	8005ffc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f005 f987 	bl	8007f20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	4f54300a 	.word	0x4f54300a
 8002c20:	4f54310a 	.word	0x4f54310a

08002c24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	333c      	adds	r3, #60	; 0x3c
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4a15      	ldr	r2, [pc, #84]	; (8002cac <PCD_EP_OutSetupPacket_int+0x88>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d90e      	bls.n	8002c78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d009      	beq.n	8002c78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c70:	461a      	mov	r2, r3
 8002c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f005 f93f 	bl	8007efc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <PCD_EP_OutSetupPacket_int+0x88>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d90c      	bls.n	8002ca0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d108      	bne.n	8002ca0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	f003 f9ae 	bl	8005ffc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	4f54300a 	.word	0x4f54300a

08002cb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cce:	883b      	ldrh	r3, [r7, #0]
 8002cd0:	0419      	lsls	r1, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
 8002cdc:	e028      	b.n	8002d30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4413      	add	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e00d      	b.n	8002d0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	3340      	adds	r3, #64	; 0x40
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	4413      	add	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d3ec      	bcc.n	8002cf2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d18:	883b      	ldrh	r3, [r7, #0]
 8002d1a:	0418      	lsls	r0, r3, #16
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	4302      	orrs	r2, r0
 8002d28:	3340      	adds	r3, #64	; 0x40
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e316      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b0f      	cmp	r3, #15
 8002d90:	d903      	bls.n	8002d9a <HAL_RCC_OscConfig+0x22>
 8002d92:	21e8      	movs	r1, #232	; 0xe8
 8002d94:	48a3      	ldr	r0, [pc, #652]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002d96:	f7fd fd46 	bl	8000826 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8088 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <HAL_RCC_OscConfig+0x54>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d008      	beq.n	8002dcc <HAL_RCC_OscConfig+0x54>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc2:	d003      	beq.n	8002dcc <HAL_RCC_OscConfig+0x54>
 8002dc4:	21ed      	movs	r1, #237	; 0xed
 8002dc6:	4897      	ldr	r0, [pc, #604]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	f7fd fd2d 	bl	8000826 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dcc:	4b96      	ldr	r3, [pc, #600]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d00c      	beq.n	8002df2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd8:	4b93      	ldr	r3, [pc, #588]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d112      	bne.n	8002e0a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de4:	4b90      	ldr	r3, [pc, #576]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df0:	d10b      	bne.n	8002e0a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df2:	4b8d      	ldr	r3, [pc, #564]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d05b      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x13e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d157      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e2d6      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0xaa>
 8002e14:	4b84      	ldr	r3, [pc, #528]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a83      	ldr	r2, [pc, #524]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	e01d      	b.n	8002e5e <HAL_RCC_OscConfig+0xe6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCC_OscConfig+0xce>
 8002e2c:	4b7e      	ldr	r3, [pc, #504]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a7d      	ldr	r2, [pc, #500]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b7b      	ldr	r3, [pc, #492]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7a      	ldr	r2, [pc, #488]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e00b      	b.n	8002e5e <HAL_RCC_OscConfig+0xe6>
 8002e46:	4b78      	ldr	r3, [pc, #480]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a77      	ldr	r2, [pc, #476]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b75      	ldr	r3, [pc, #468]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a74      	ldr	r2, [pc, #464]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d013      	beq.n	8002e8e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fd feab 	bl	8000bc0 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6e:	f7fd fea7 	bl	8000bc0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b64      	cmp	r3, #100	; 0x64
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e29b      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e80:	4b69      	ldr	r3, [pc, #420]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0xf6>
 8002e8c:	e014      	b.n	8002eb8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fd fe97 	bl	8000bc0 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e96:	f7fd fe93 	bl	8000bc0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	; 0x64
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e287      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea8:	4b5f      	ldr	r3, [pc, #380]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x11e>
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d079      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCC_OscConfig+0x166>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d004      	beq.n	8002ede <HAL_RCC_OscConfig+0x166>
 8002ed4:	f240 111f 	movw	r1, #287	; 0x11f
 8002ed8:	4852      	ldr	r0, [pc, #328]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002eda:	f7fd fca4 	bl	8000826 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b1f      	cmp	r3, #31
 8002ee4:	d904      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x178>
 8002ee6:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002eea:	484e      	ldr	r0, [pc, #312]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	f7fd fc9b 	bl	8000826 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef0:	4b4d      	ldr	r3, [pc, #308]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efc:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d11c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f08:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f14:	4b44      	ldr	r3, [pc, #272]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x1b4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e245      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b3e      	ldr	r3, [pc, #248]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	493b      	ldr	r1, [pc, #236]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f40:	e03a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d020      	beq.n	8002f8c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <HAL_RCC_OscConfig+0x2b4>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fd fe36 	bl	8000bc0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f58:	f7fd fe32 	bl	8000bc0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e226      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4928      	ldr	r1, [pc, #160]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
 8002f8a:	e015      	b.n	8002fb8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x2b4>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fd fe15 	bl	8000bc0 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fd fe11 	bl	8000bc0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e205      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fac:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d046      	beq.n	8003052 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCC_OscConfig+0x266>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d004      	beq.n	8002fde <HAL_RCC_OscConfig+0x266>
 8002fd4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002fd8:	4812      	ldr	r0, [pc, #72]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	f7fd fc24 	bl	8000826 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_RCC_OscConfig+0x2b8>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fd fde8 	bl	8000bc0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fd fde4 	bl	8000bc0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1d8      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x27c>
 8003012:	e01e      	b.n	8003052 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCC_OscConfig+0x2b8>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fd fdd1 	bl	8000bc0 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	e011      	b.n	8003046 <HAL_RCC_OscConfig+0x2ce>
 8003022:	bf00      	nop
 8003024:	080085d4 	.word	0x080085d4
 8003028:	40023800 	.word	0x40023800
 800302c:	42470000 	.word	0x42470000
 8003030:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003034:	f7fd fdc4 	bl	8000bc0 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e1b8      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003046:	4b97      	ldr	r3, [pc, #604]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80a8 	beq.w	80031b0 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003060:	2300      	movs	r3, #0
 8003062:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00c      	beq.n	8003086 <HAL_RCC_OscConfig+0x30e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d008      	beq.n	8003086 <HAL_RCC_OscConfig+0x30e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b05      	cmp	r3, #5
 800307a:	d004      	beq.n	8003086 <HAL_RCC_OscConfig+0x30e>
 800307c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003080:	4889      	ldr	r0, [pc, #548]	; (80032a8 <HAL_RCC_OscConfig+0x530>)
 8003082:	f7fd fbd0 	bl	8000826 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4b87      	ldr	r3, [pc, #540]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	4b83      	ldr	r3, [pc, #524]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a82      	ldr	r2, [pc, #520]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b80      	ldr	r3, [pc, #512]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b7e      	ldr	r3, [pc, #504]	; (80032ac <HAL_RCC_OscConfig+0x534>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4b7b      	ldr	r3, [pc, #492]	; (80032ac <HAL_RCC_OscConfig+0x534>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7a      	ldr	r2, [pc, #488]	; (80032ac <HAL_RCC_OscConfig+0x534>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fd fd79 	bl	8000bc0 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fd fd75 	bl	8000bc0 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e169      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b71      	ldr	r3, [pc, #452]	; (80032ac <HAL_RCC_OscConfig+0x534>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x38e>
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a69      	ldr	r2, [pc, #420]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x3c8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x3b0>
 800310e:	4b65      	ldr	r3, [pc, #404]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a64      	ldr	r2, [pc, #400]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a61      	ldr	r2, [pc, #388]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x3c8>
 8003128:	4b5e      	ldr	r3, [pc, #376]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a5d      	ldr	r2, [pc, #372]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
 8003134:	4b5b      	ldr	r3, [pc, #364]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a5a      	ldr	r2, [pc, #360]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fd fd3a 	bl	8000bc0 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fd fd36 	bl	8000bc0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e128      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ee      	beq.n	8003150 <HAL_RCC_OscConfig+0x3d8>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fd fd24 	bl	8000bc0 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fd fd20 	bl	8000bc0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e112      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	4b44      	ldr	r3, [pc, #272]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ee      	bne.n	800317c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a4:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	4a3e      	ldr	r2, [pc, #248]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 80031aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x45a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_OscConfig+0x45a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d004      	beq.n	80031d2 <HAL_RCC_OscConfig+0x45a>
 80031c8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80031cc:	4836      	ldr	r0, [pc, #216]	; (80032a8 <HAL_RCC_OscConfig+0x530>)
 80031ce:	f7fd fb2a 	bl	8000826 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 80ed 	beq.w	80033b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031dc:	4b31      	ldr	r3, [pc, #196]	; (80032a4 <HAL_RCC_OscConfig+0x52c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	f000 80ae 	beq.w	8003346 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	f040 8092 	bne.w	8003318 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_RCC_OscConfig+0x498>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003204:	d004      	beq.n	8003210 <HAL_RCC_OscConfig+0x498>
 8003206:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800320a:	4827      	ldr	r0, [pc, #156]	; (80032a8 <HAL_RCC_OscConfig+0x530>)
 800320c:	f7fd fb0b 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	2b3f      	cmp	r3, #63	; 0x3f
 8003216:	d904      	bls.n	8003222 <HAL_RCC_OscConfig+0x4aa>
 8003218:	f240 11d9 	movw	r1, #473	; 0x1d9
 800321c:	4822      	ldr	r0, [pc, #136]	; (80032a8 <HAL_RCC_OscConfig+0x530>)
 800321e:	f7fd fb02 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b31      	cmp	r3, #49	; 0x31
 8003228:	d904      	bls.n	8003234 <HAL_RCC_OscConfig+0x4bc>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003232:	d904      	bls.n	800323e <HAL_RCC_OscConfig+0x4c6>
 8003234:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003238:	481b      	ldr	r0, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x530>)
 800323a:	f7fd faf4 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	2b02      	cmp	r3, #2
 8003244:	d010      	beq.n	8003268 <HAL_RCC_OscConfig+0x4f0>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	2b04      	cmp	r3, #4
 800324c:	d00c      	beq.n	8003268 <HAL_RCC_OscConfig+0x4f0>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	2b06      	cmp	r3, #6
 8003254:	d008      	beq.n	8003268 <HAL_RCC_OscConfig+0x4f0>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	2b08      	cmp	r3, #8
 800325c:	d004      	beq.n	8003268 <HAL_RCC_OscConfig+0x4f0>
 800325e:	f240 11db 	movw	r1, #475	; 0x1db
 8003262:	4811      	ldr	r0, [pc, #68]	; (80032a8 <HAL_RCC_OscConfig+0x530>)
 8003264:	f7fd fadf 	bl	8000826 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d903      	bls.n	8003278 <HAL_RCC_OscConfig+0x500>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	2b0f      	cmp	r3, #15
 8003276:	d904      	bls.n	8003282 <HAL_RCC_OscConfig+0x50a>
 8003278:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800327c:	480a      	ldr	r0, [pc, #40]	; (80032a8 <HAL_RCC_OscConfig+0x530>)
 800327e:	f7fd fad2 	bl	8000826 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_OscConfig+0x538>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fc9a 	bl	8000bc0 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e011      	b.n	80032b4 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fd fc96 	bl	8000bc0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d90a      	bls.n	80032b4 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e08a      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	080085d4 	.word	0x080085d4
 80032ac:	40007000 	.word	0x40007000
 80032b0:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b4:	4b42      	ldr	r3, [pc, #264]	; (80033c0 <HAL_RCC_OscConfig+0x648>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e7      	bne.n	8003290 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	019b      	lsls	r3, r3, #6
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	085b      	lsrs	r3, r3, #1
 80032d8:	3b01      	subs	r3, #1
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	061b      	lsls	r3, r3, #24
 80032e4:	4936      	ldr	r1, [pc, #216]	; (80033c0 <HAL_RCC_OscConfig+0x648>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCC_OscConfig+0x64c>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fd fc66 	bl	8000bc0 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fd fc62 	bl	8000bc0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e056      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_OscConfig+0x648>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x580>
 8003316:	e04e      	b.n	80033b6 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <HAL_RCC_OscConfig+0x64c>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fd fc4f 	bl	8000bc0 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003326:	f7fd fc4b 	bl	8000bc0 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e03f      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003338:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <HAL_RCC_OscConfig+0x648>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x5ae>
 8003344:	e037      	b.n	80033b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e032      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003352:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <HAL_RCC_OscConfig+0x648>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d028      	beq.n	80033b2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d121      	bne.n	80033b2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d11a      	bne.n	80033b2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003382:	4013      	ands	r3, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003388:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800338a:	4293      	cmp	r3, r2
 800338c:	d111      	bne.n	80033b2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	3b01      	subs	r3, #1
 800339c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	42470060 	.word	0x42470060

080033c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e174      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_RCC_ClockConfig+0x24>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b0f      	cmp	r3, #15
 80033ea:	d904      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x2e>
 80033ec:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80033f0:	487b      	ldr	r0, [pc, #492]	; (80035e0 <HAL_RCC_ClockConfig+0x218>)
 80033f2:	f7fd fa18 	bl	8000826 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d019      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d016      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d013      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d010      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d00d      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b05      	cmp	r3, #5
 8003418:	d00a      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d007      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b07      	cmp	r3, #7
 8003424:	d004      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
 8003426:	f240 215d 	movw	r1, #605	; 0x25d
 800342a:	486d      	ldr	r0, [pc, #436]	; (80035e0 <HAL_RCC_ClockConfig+0x218>)
 800342c:	f7fd f9fb 	bl	8000826 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003430:	4b6c      	ldr	r3, [pc, #432]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d90c      	bls.n	8003458 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b69      	ldr	r3, [pc, #420]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e136      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d049      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a5c      	ldr	r2, [pc, #368]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800347a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b57      	ldr	r3, [pc, #348]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a56      	ldr	r2, [pc, #344]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 800348e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d024      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b90      	cmp	r3, #144	; 0x90
 80034aa:	d01c      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2ba0      	cmp	r3, #160	; 0xa0
 80034b2:	d018      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2bb0      	cmp	r3, #176	; 0xb0
 80034ba:	d014      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2bc0      	cmp	r3, #192	; 0xc0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2bd0      	cmp	r3, #208	; 0xd0
 80034ca:	d00c      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2be0      	cmp	r3, #224	; 0xe0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2bf0      	cmp	r3, #240	; 0xf0
 80034da:	d004      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
 80034dc:	f44f 7120 	mov.w	r1, #640	; 0x280
 80034e0:	483f      	ldr	r0, [pc, #252]	; (80035e0 <HAL_RCC_ClockConfig+0x218>)
 80034e2:	f7fd f9a0 	bl	8000826 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e6:	4b40      	ldr	r3, [pc, #256]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	493d      	ldr	r1, [pc, #244]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d059      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <HAL_RCC_ClockConfig+0x166>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d00c      	beq.n	800352e <HAL_RCC_ClockConfig+0x166>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d008      	beq.n	800352e <HAL_RCC_ClockConfig+0x166>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d004      	beq.n	800352e <HAL_RCC_ClockConfig+0x166>
 8003524:	f240 2187 	movw	r1, #647	; 0x287
 8003528:	482d      	ldr	r0, [pc, #180]	; (80035e0 <HAL_RCC_ClockConfig+0x218>)
 800352a:	f7fd f97c 	bl	8000826 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d107      	bne.n	8003546 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003536:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d119      	bne.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e0bf      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d003      	beq.n	8003556 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003552:	2b03      	cmp	r3, #3
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0af      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0a7      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003576:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 0203 	bic.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4919      	ldr	r1, [pc, #100]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003588:	f7fd fb1a 	bl	8000bc0 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003590:	f7fd fb16 	bl	8000bc0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e08f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_RCC_ClockConfig+0x220>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 020c 	and.w	r2, r3, #12
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d1eb      	bne.n	8003590 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d212      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_ClockConfig+0x21c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d007      	beq.n	80035ec <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e072      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2fe>
 80035e0:	080085d4 	.word	0x080085d4
 80035e4:	40023c00 	.word	0x40023c00
 80035e8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d025      	beq.n	8003644 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d018      	beq.n	8003632 <HAL_RCC_ClockConfig+0x26a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d013      	beq.n	8003632 <HAL_RCC_ClockConfig+0x26a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003612:	d00e      	beq.n	8003632 <HAL_RCC_ClockConfig+0x26a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x26a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003626:	d004      	beq.n	8003632 <HAL_RCC_ClockConfig+0x26a>
 8003628:	f240 21c5 	movw	r1, #709	; 0x2c5
 800362c:	4828      	ldr	r0, [pc, #160]	; (80036d0 <HAL_RCC_ClockConfig+0x308>)
 800362e:	f7fd f8fa 	bl	8000826 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_RCC_ClockConfig+0x30c>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4925      	ldr	r1, [pc, #148]	; (80036d4 <HAL_RCC_ClockConfig+0x30c>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d026      	beq.n	800369e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d018      	beq.n	800368a <HAL_RCC_ClockConfig+0x2c2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003660:	d013      	beq.n	800368a <HAL_RCC_ClockConfig+0x2c2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800366a:	d00e      	beq.n	800368a <HAL_RCC_ClockConfig+0x2c2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003674:	d009      	beq.n	800368a <HAL_RCC_ClockConfig+0x2c2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800367e:	d004      	beq.n	800368a <HAL_RCC_ClockConfig+0x2c2>
 8003680:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8003684:	4812      	ldr	r0, [pc, #72]	; (80036d0 <HAL_RCC_ClockConfig+0x308>)
 8003686:	f7fd f8ce 	bl	8000826 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x30c>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_RCC_ClockConfig+0x30c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f821 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_ClockConfig+0x30c>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	490a      	ldr	r1, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x310>)
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x314>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x318>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fa3a 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	080085d4 	.word	0x080085d4
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08008690 	.word	0x08008690
 80036dc:	20000010 	.word	0x20000010
 80036e0:	20000014 	.word	0x20000014

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	2300      	movs	r3, #0
 80036f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fc:	4b67      	ldr	r3, [pc, #412]	; (800389c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d00d      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x40>
 8003708:	2b08      	cmp	r3, #8
 800370a:	f200 80bd 	bhi.w	8003888 <HAL_RCC_GetSysClockFreq+0x1a4>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x34>
 8003712:	2b04      	cmp	r3, #4
 8003714:	d003      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x3a>
 8003716:	e0b7      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800371a:	60bb      	str	r3, [r7, #8]
       break;
 800371c:	e0b7      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800371e:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003720:	60bb      	str	r3, [r7, #8]
      break;
 8003722:	e0b4      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003724:	4b5d      	ldr	r3, [pc, #372]	; (800389c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800372c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372e:	4b5b      	ldr	r3, [pc, #364]	; (800389c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d04d      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373a:	4b58      	ldr	r3, [pc, #352]	; (800389c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	099b      	lsrs	r3, r3, #6
 8003740:	461a      	mov	r2, r3
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	f240 10ff 	movw	r0, #511	; 0x1ff
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	ea02 0800 	and.w	r8, r2, r0
 8003752:	ea03 0901 	and.w	r9, r3, r1
 8003756:	4640      	mov	r0, r8
 8003758:	4649      	mov	r1, r9
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	014b      	lsls	r3, r1, #5
 8003764:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003768:	0142      	lsls	r2, r0, #5
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	ebb0 0008 	subs.w	r0, r0, r8
 8003772:	eb61 0109 	sbc.w	r1, r1, r9
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	018b      	lsls	r3, r1, #6
 8003780:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003784:	0182      	lsls	r2, r0, #6
 8003786:	1a12      	subs	r2, r2, r0
 8003788:	eb63 0301 	sbc.w	r3, r3, r1
 800378c:	f04f 0000 	mov.w	r0, #0
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	00d9      	lsls	r1, r3, #3
 8003796:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800379a:	00d0      	lsls	r0, r2, #3
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	eb12 0208 	adds.w	r2, r2, r8
 80037a4:	eb43 0309 	adc.w	r3, r3, r9
 80037a8:	f04f 0000 	mov.w	r0, #0
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	0259      	lsls	r1, r3, #9
 80037b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037b6:	0250      	lsls	r0, r2, #9
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	f7fc fcfe 	bl	80001c8 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	e04a      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	461a      	mov	r2, r3
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037e6:	f04f 0100 	mov.w	r1, #0
 80037ea:	ea02 0400 	and.w	r4, r2, r0
 80037ee:	ea03 0501 	and.w	r5, r3, r1
 80037f2:	4620      	mov	r0, r4
 80037f4:	4629      	mov	r1, r5
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	014b      	lsls	r3, r1, #5
 8003800:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003804:	0142      	lsls	r2, r0, #5
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	1b00      	subs	r0, r0, r4
 800380c:	eb61 0105 	sbc.w	r1, r1, r5
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	018b      	lsls	r3, r1, #6
 800381a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800381e:	0182      	lsls	r2, r0, #6
 8003820:	1a12      	subs	r2, r2, r0
 8003822:	eb63 0301 	sbc.w	r3, r3, r1
 8003826:	f04f 0000 	mov.w	r0, #0
 800382a:	f04f 0100 	mov.w	r1, #0
 800382e:	00d9      	lsls	r1, r3, #3
 8003830:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003834:	00d0      	lsls	r0, r2, #3
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	1912      	adds	r2, r2, r4
 800383c:	eb45 0303 	adc.w	r3, r5, r3
 8003840:	f04f 0000 	mov.w	r0, #0
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	0299      	lsls	r1, r3, #10
 800384a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800384e:	0290      	lsls	r0, r2, #10
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	461a      	mov	r2, r3
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	f7fc fcb2 	bl	80001c8 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4613      	mov	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	3301      	adds	r3, #1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	fbb2 f3f3 	udiv	r3, r2, r3
 8003884:	60bb      	str	r3, [r7, #8]
      break;
 8003886:	e002      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800388a:	60bb      	str	r3, [r7, #8]
      break;
 800388c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800388e:	68bb      	ldr	r3, [r7, #8]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	007a1200 	.word	0x007a1200

080038a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000010 	.word	0x20000010

080038c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038c4:	f7ff fff0 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	0a9b      	lsrs	r3, r3, #10
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	080086a0 	.word	0x080086a0

080038e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038ec:	f7ff ffdc 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0b5b      	lsrs	r3, r3, #13
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4903      	ldr	r1, [pc, #12]	; (800390c <HAL_RCC_GetPCLK2Freq+0x24>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	080086a0 	.word	0x080086a0

08003910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0b4      	b.n	8003a8c <HAL_UART_Init+0x17c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d031      	beq.n	800398e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a59      	ldr	r2, [pc, #356]	; (8003a94 <HAL_UART_Init+0x184>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_UART_Init+0x4c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a57      	ldr	r2, [pc, #348]	; (8003a98 <HAL_UART_Init+0x188>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00e      	beq.n	800395c <HAL_UART_Init+0x4c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a56      	ldr	r2, [pc, #344]	; (8003a9c <HAL_UART_Init+0x18c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_UART_Init+0x4c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a54      	ldr	r2, [pc, #336]	; (8003aa0 <HAL_UART_Init+0x190>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_UART_Init+0x4c>
 8003952:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8003956:	4853      	ldr	r0, [pc, #332]	; (8003aa4 <HAL_UART_Init+0x194>)
 8003958:	f7fc ff65 	bl	8000826 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d037      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396c:	d032      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003976:	d02d      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003980:	d028      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 8003982:	f240 1173 	movw	r1, #371	; 0x173
 8003986:	4847      	ldr	r0, [pc, #284]	; (8003aa4 <HAL_UART_Init+0x194>)
 8003988:	f7fc ff4d 	bl	8000826 <assert_failed>
 800398c:	e022      	b.n	80039d4 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a40      	ldr	r2, [pc, #256]	; (8003a94 <HAL_UART_Init+0x184>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d01d      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a3e      	ldr	r2, [pc, #248]	; (8003a98 <HAL_UART_Init+0x188>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d018      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3d      	ldr	r2, [pc, #244]	; (8003a9c <HAL_UART_Init+0x18c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d013      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <HAL_UART_Init+0x198>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00e      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <HAL_UART_Init+0x19c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d009      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a36      	ldr	r2, [pc, #216]	; (8003aa0 <HAL_UART_Init+0x190>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_UART_Init+0xc4>
 80039ca:	f240 1177 	movw	r1, #375	; 0x177
 80039ce:	4835      	ldr	r0, [pc, #212]	; (8003aa4 <HAL_UART_Init+0x194>)
 80039d0:	f7fc ff29 	bl	8000826 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <HAL_UART_Init+0xe0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d004      	beq.n	80039f0 <HAL_UART_Init+0xe0>
 80039e6:	f240 1179 	movw	r1, #377	; 0x179
 80039ea:	482e      	ldr	r0, [pc, #184]	; (8003aa4 <HAL_UART_Init+0x194>)
 80039ec:	f7fc ff1b 	bl	8000826 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <HAL_UART_Init+0xfc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a00:	d004      	beq.n	8003a0c <HAL_UART_Init+0xfc>
 8003a02:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003a06:	4827      	ldr	r0, [pc, #156]	; (8003aa4 <HAL_UART_Init+0x194>)
 8003a08:	f7fc ff0d 	bl	8000826 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fc ffed 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2224      	movs	r2, #36	; 0x24
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fde8 	bl	8004614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40011000 	.word	0x40011000
 8003a98:	40004400 	.word	0x40004400
 8003a9c:	40004800 	.word	0x40004800
 8003aa0:	40011400 	.word	0x40011400
 8003aa4:	0800860c 	.word	0x0800860c
 8003aa8:	40004c00 	.word	0x40004c00
 8003aac:	40005000 	.word	0x40005000

08003ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d17c      	bne.n	8003bca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_UART_Transmit+0x2c>
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e075      	b.n	8003bcc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Transmit+0x3e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e06e      	b.n	8003bcc <HAL_UART_Transmit+0x11c>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2221      	movs	r2, #33	; 0x21
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b04:	f7fd f85c 	bl	8000bc0 <HAL_GetTick>
 8003b08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1e:	d108      	bne.n	8003b32 <HAL_UART_Transmit+0x82>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	e003      	b.n	8003b3a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b42:	e02a      	b.n	8003b9a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2180      	movs	r1, #128	; 0x80
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fb1e 	bl	8004190 <UART_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e036      	b.n	8003bcc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b72:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	3302      	adds	r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e007      	b.n	8003b8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1cf      	bne.n	8003b44 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2140      	movs	r1, #64	; 0x40
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 faee 	bl	8004190 <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e006      	b.n	8003bcc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d11d      	bne.n	8003c2a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_UART_Receive_IT+0x26>
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e016      	b.n	8003c2c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_UART_Receive_IT+0x38>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e00f      	b.n	8003c2c <HAL_UART_Receive_IT+0x58>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fb23 	bl	800426c <UART_Start_Receive_IT>
 8003c26:	4603      	mov	r3, r0
 8003c28:	e000      	b.n	8003c2c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b0ba      	sub	sp, #232	; 0xe8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_UART_IRQHandler+0x66>
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fc03 	bl	800449e <UART_Receive_IT>
      return;
 8003c98:	e256      	b.n	8004148 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80de 	beq.w	8003e60 <HAL_UART_IRQHandler+0x22c>
 8003ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80d1 	beq.w	8003e60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xae>
 8003cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_UART_IRQHandler+0xd2>
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0202 	orr.w	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_UART_IRQHandler+0xf6>
 8003d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f043 0204 	orr.w	r2, r3, #4
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d011      	beq.n	8003d5a <HAL_UART_IRQHandler+0x126>
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f043 0208 	orr.w	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 81ed 	beq.w	800413e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_UART_IRQHandler+0x14e>
 8003d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fb8e 	bl	800449e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_UART_IRQHandler+0x17a>
 8003da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d04f      	beq.n	8003e4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa96 	bl	80042e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d141      	bne.n	8003e46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3314      	adds	r3, #20
 8003dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1d9      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d013      	beq.n	8003e3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	4a7d      	ldr	r2, [pc, #500]	; (8004010 <HAL_UART_IRQHandler+0x3dc>)
 8003e1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd f8ac 	bl	8000f80 <HAL_DMA_Abort_IT>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d016      	beq.n	8003e5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	e00e      	b.n	8003e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f990 	bl	8004164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	e00a      	b.n	8003e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f98c 	bl	8004164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	e006      	b.n	8003e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f988 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e5a:	e170      	b.n	800413e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5c:	bf00      	nop
    return;
 8003e5e:	e16e      	b.n	800413e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 814a 	bne.w	80040fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8143 	beq.w	80040fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 813c 	beq.w	80040fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	f040 80b4 	bne.w	8004014 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8140 	beq.w	8004142 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	f080 8139 	bcs.w	8004142 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ed6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee2:	f000 8088 	beq.w	8003ff6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1d9      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3314      	adds	r3, #20
 8003f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e1      	bne.n	8003f32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3314      	adds	r3, #20
 8003f74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3314      	adds	r3, #20
 8003f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e3      	bne.n	8003f6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc6:	f023 0310 	bic.w	r3, r3, #16
 8003fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e3      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fc ff55 	bl	8000ea0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	b29b      	uxth	r3, r3
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8b6 	bl	8004178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800400c:	e099      	b.n	8004142 <HAL_UART_IRQHandler+0x50e>
 800400e:	bf00      	nop
 8004010:	080043a7 	.word	0x080043a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401c:	b29b      	uxth	r3, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 808b 	beq.w	8004146 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8086 	beq.w	8004146 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800405e:	647a      	str	r2, [r7, #68]	; 0x44
 8004060:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800406c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e3      	bne.n	800403a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	623b      	str	r3, [r7, #32]
   return(result);
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004096:	633a      	str	r2, [r7, #48]	; 0x30
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800409c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e3      	bne.n	8004072 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0310 	bic.w	r3, r3, #16
 80040ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040dc:	61fa      	str	r2, [r7, #28]
 80040de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	69b9      	ldr	r1, [r7, #24]
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	617b      	str	r3, [r7, #20]
   return(result);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e3      	bne.n	80040b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f83e 	bl	8004178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040fc:	e023      	b.n	8004146 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_UART_IRQHandler+0x4ea>
 800410a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f959 	bl	80043ce <UART_Transmit_IT>
    return;
 800411c:	e014      	b.n	8004148 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00e      	beq.n	8004148 <HAL_UART_IRQHandler+0x514>
 800412a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f999 	bl	800446e <UART_EndTransmit_IT>
    return;
 800413c:	e004      	b.n	8004148 <HAL_UART_IRQHandler+0x514>
    return;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <HAL_UART_IRQHandler+0x514>
      return;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <HAL_UART_IRQHandler+0x514>
      return;
 8004146:	bf00      	nop
  }
}
 8004148:	37e8      	adds	r7, #232	; 0xe8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop

08004150 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b090      	sub	sp, #64	; 0x40
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a0:	e050      	b.n	8004244 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d04c      	beq.n	8004244 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041b0:	f7fc fd06 	bl	8000bc0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041bc:	429a      	cmp	r2, r3
 80041be:	d241      	bcs.n	8004244 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041e0:	637a      	str	r2, [r7, #52]	; 0x34
 80041e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e5      	bne.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3314      	adds	r3, #20
 80041fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	613b      	str	r3, [r7, #16]
   return(result);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	63bb      	str	r3, [r7, #56]	; 0x38
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3314      	adds	r3, #20
 8004212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004214:	623a      	str	r2, [r7, #32]
 8004216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	69f9      	ldr	r1, [r7, #28]
 800421a:	6a3a      	ldr	r2, [r7, #32]
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	61bb      	str	r3, [r7, #24]
   return(result);
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e5      	bne.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e00f      	b.n	8004264 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	429a      	cmp	r2, r3
 8004260:	d09f      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3740      	adds	r7, #64	; 0x40
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	88fa      	ldrh	r2, [r7, #6]
 800428a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2222      	movs	r2, #34	; 0x22
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0220 	orr.w	r2, r2, #32
 80042d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b095      	sub	sp, #84	; 0x54
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004308:	643a      	str	r2, [r7, #64]	; 0x40
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800430e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e5      	bne.n	80042e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3314      	adds	r3, #20
 8004322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	61fb      	str	r3, [r7, #28]
   return(result);
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800433c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e5      	bne.n	800431c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	2b01      	cmp	r3, #1
 8004356:	d119      	bne.n	800438c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	60bb      	str	r3, [r7, #8]
   return(result);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f023 0310 	bic.w	r3, r3, #16
 800436e:	647b      	str	r3, [r7, #68]	; 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004378:	61ba      	str	r2, [r7, #24]
 800437a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6979      	ldr	r1, [r7, #20]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	613b      	str	r3, [r7, #16]
   return(result);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
}
 800439a:	bf00      	nop
 800439c:	3754      	adds	r7, #84	; 0x54
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fecf 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b21      	cmp	r3, #33	; 0x21
 80043e0:	d13e      	bne.n	8004460 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ea:	d114      	bne.n	8004416 <UART_Transmit_IT+0x48>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d110      	bne.n	8004416 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004408:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	621a      	str	r2, [r3, #32]
 8004414:	e008      	b.n	8004428 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	1c59      	adds	r1, r3, #1
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6211      	str	r1, [r2, #32]
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29b      	uxth	r3, r3
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4619      	mov	r1, r3
 8004436:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10f      	bne.n	800445c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800444a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800445a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004484:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff fe5e 	bl	8004150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b08c      	sub	sp, #48	; 0x30
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b22      	cmp	r3, #34	; 0x22
 80044b0:	f040 80ab 	bne.w	800460a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044bc:	d117      	bne.n	80044ee <UART_Receive_IT+0x50>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d113      	bne.n	80044ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	b29a      	uxth	r2, r3
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
 80044ec:	e026      	b.n	800453c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d007      	beq.n	8004512 <UART_Receive_IT+0x74>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <UART_Receive_IT+0x82>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e008      	b.n	8004532 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800452c:	b2da      	uxtb	r2, r3
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29b      	uxth	r3, r3
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4619      	mov	r1, r3
 800454a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800454c:	2b00      	cmp	r3, #0
 800454e:	d15a      	bne.n	8004606 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0220 	bic.w	r2, r2, #32
 800455e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800456e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	2b01      	cmp	r3, #1
 800458e:	d135      	bne.n	80045fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	613b      	str	r3, [r7, #16]
   return(result);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f023 0310 	bic.w	r3, r3, #16
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b6:	623a      	str	r2, [r7, #32]
 80045b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	69f9      	ldr	r1, [r7, #28]
 80045bc:	6a3a      	ldr	r2, [r7, #32]
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d10a      	bne.n	80045ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff fdbf 	bl	8004178 <HAL_UARTEx_RxEventCallback>
 80045fa:	e002      	b.n	8004602 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fc f9a5 	bl	800094c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e002      	b.n	800460c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3730      	adds	r7, #48	; 0x30
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004618:	b09f      	sub	sp, #124	; 0x7c
 800461a:	af00      	add	r7, sp, #0
 800461c:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800461e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	4b9b      	ldr	r3, [pc, #620]	; (8004890 <UART_SetConfig+0x27c>)
 8004624:	429a      	cmp	r2, r3
 8004626:	d904      	bls.n	8004632 <UART_SetConfig+0x1e>
 8004628:	f640 6156 	movw	r1, #3670	; 0xe56
 800462c:	4899      	ldr	r0, [pc, #612]	; (8004894 <UART_SetConfig+0x280>)
 800462e:	f7fc f8fa 	bl	8000826 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <UART_SetConfig+0x3a>
 800463a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004642:	d004      	beq.n	800464e <UART_SetConfig+0x3a>
 8004644:	f640 6157 	movw	r1, #3671	; 0xe57
 8004648:	4892      	ldr	r0, [pc, #584]	; (8004894 <UART_SetConfig+0x280>)
 800464a:	f7fc f8ec 	bl	8000826 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800464e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00e      	beq.n	8004674 <UART_SetConfig+0x60>
 8004656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d009      	beq.n	8004674 <UART_SetConfig+0x60>
 8004660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004668:	d004      	beq.n	8004674 <UART_SetConfig+0x60>
 800466a:	f640 6158 	movw	r1, #3672	; 0xe58
 800466e:	4889      	ldr	r0, [pc, #548]	; (8004894 <UART_SetConfig+0x280>)
 8004670:	f7fc f8d9 	bl	8000826 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <UART_SetConfig+0x76>
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <UART_SetConfig+0x80>
 800468a:	f640 6159 	movw	r1, #3673	; 0xe59
 800468e:	4881      	ldr	r0, [pc, #516]	; (8004894 <UART_SetConfig+0x280>)
 8004690:	f7fc f8c9 	bl	8000826 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a0:	68d9      	ldr	r1, [r3, #12]
 80046a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	ea40 0301 	orr.w	r3, r0, r1
 80046aa:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046ce:	f021 010c 	bic.w	r1, r1, #12
 80046d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d8:	430b      	orrs	r3, r1
 80046da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	ea40 0301 	orr.w	r3, r0, r1
 80046f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b67      	ldr	r3, [pc, #412]	; (8004898 <UART_SetConfig+0x284>)
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d004      	beq.n	8004708 <UART_SetConfig+0xf4>
 80046fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b66      	ldr	r3, [pc, #408]	; (800489c <UART_SetConfig+0x288>)
 8004704:	429a      	cmp	r2, r3
 8004706:	d103      	bne.n	8004710 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004708:	f7ff f8ee 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 800470c:	6778      	str	r0, [r7, #116]	; 0x74
 800470e:	e002      	b.n	8004716 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004710:	f7ff f8d6 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 8004714:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471e:	f040 80c1 	bne.w	80048a4 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004724:	461c      	mov	r4, r3
 8004726:	f04f 0500 	mov.w	r5, #0
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	1891      	adds	r1, r2, r2
 8004730:	6439      	str	r1, [r7, #64]	; 0x40
 8004732:	415b      	adcs	r3, r3
 8004734:	647b      	str	r3, [r7, #68]	; 0x44
 8004736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800473a:	1912      	adds	r2, r2, r4
 800473c:	eb45 0303 	adc.w	r3, r5, r3
 8004740:	f04f 0000 	mov.w	r0, #0
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	00d9      	lsls	r1, r3, #3
 800474a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800474e:	00d0      	lsls	r0, r2, #3
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	1911      	adds	r1, r2, r4
 8004756:	6639      	str	r1, [r7, #96]	; 0x60
 8004758:	416b      	adcs	r3, r5
 800475a:	667b      	str	r3, [r7, #100]	; 0x64
 800475c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	461a      	mov	r2, r3
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	1891      	adds	r1, r2, r2
 8004768:	63b9      	str	r1, [r7, #56]	; 0x38
 800476a:	415b      	adcs	r3, r3
 800476c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004772:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004776:	f7fb fd27 	bl	80001c8 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <UART_SetConfig+0x28c>)
 8004780:	fba3 2302 	umull	r2, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	011e      	lsls	r6, r3, #4
 8004788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478a:	461c      	mov	r4, r3
 800478c:	f04f 0500 	mov.w	r5, #0
 8004790:	4622      	mov	r2, r4
 8004792:	462b      	mov	r3, r5
 8004794:	1891      	adds	r1, r2, r2
 8004796:	6339      	str	r1, [r7, #48]	; 0x30
 8004798:	415b      	adcs	r3, r3
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
 800479c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047a0:	1912      	adds	r2, r2, r4
 80047a2:	eb45 0303 	adc.w	r3, r5, r3
 80047a6:	f04f 0000 	mov.w	r0, #0
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	00d9      	lsls	r1, r3, #3
 80047b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b4:	00d0      	lsls	r0, r2, #3
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	1911      	adds	r1, r2, r4
 80047bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80047be:	416b      	adcs	r3, r5
 80047c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	1891      	adds	r1, r2, r2
 80047ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80047d0:	415b      	adcs	r3, r3
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047d8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047dc:	f7fb fcf4 	bl	80001c8 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <UART_SetConfig+0x28c>)
 80047e6:	fba3 1302 	umull	r1, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2164      	movs	r1, #100	; 0x64
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	3332      	adds	r3, #50	; 0x32
 80047f8:	4a29      	ldr	r2, [pc, #164]	; (80048a0 <UART_SetConfig+0x28c>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004806:	441e      	add	r6, r3
 8004808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480a:	4618      	mov	r0, r3
 800480c:	f04f 0100 	mov.w	r1, #0
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	1894      	adds	r4, r2, r2
 8004816:	623c      	str	r4, [r7, #32]
 8004818:	415b      	adcs	r3, r3
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
 800481c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004820:	1812      	adds	r2, r2, r0
 8004822:	eb41 0303 	adc.w	r3, r1, r3
 8004826:	f04f 0400 	mov.w	r4, #0
 800482a:	f04f 0500 	mov.w	r5, #0
 800482e:	00dd      	lsls	r5, r3, #3
 8004830:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004834:	00d4      	lsls	r4, r2, #3
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	1814      	adds	r4, r2, r0
 800483c:	653c      	str	r4, [r7, #80]	; 0x50
 800483e:	414b      	adcs	r3, r1
 8004840:	657b      	str	r3, [r7, #84]	; 0x54
 8004842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	461a      	mov	r2, r3
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	1891      	adds	r1, r2, r2
 800484e:	61b9      	str	r1, [r7, #24]
 8004850:	415b      	adcs	r3, r3
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004858:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800485c:	f7fb fcb4 	bl	80001c8 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <UART_SetConfig+0x28c>)
 8004866:	fba3 1302 	umull	r1, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2164      	movs	r1, #100	; 0x64
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	3332      	adds	r3, #50	; 0x32
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <UART_SetConfig+0x28c>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	f003 0207 	and.w	r2, r3, #7
 8004884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4432      	add	r2, r6
 800488a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800488c:	e0c4      	b.n	8004a18 <UART_SetConfig+0x404>
 800488e:	bf00      	nop
 8004890:	00a037a0 	.word	0x00a037a0
 8004894:	0800860c 	.word	0x0800860c
 8004898:	40011000 	.word	0x40011000
 800489c:	40011400 	.word	0x40011400
 80048a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a6:	461c      	mov	r4, r3
 80048a8:	f04f 0500 	mov.w	r5, #0
 80048ac:	4622      	mov	r2, r4
 80048ae:	462b      	mov	r3, r5
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	6139      	str	r1, [r7, #16]
 80048b4:	415b      	adcs	r3, r3
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048bc:	1912      	adds	r2, r2, r4
 80048be:	eb45 0303 	adc.w	r3, r5, r3
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f04f 0100 	mov.w	r1, #0
 80048ca:	00d9      	lsls	r1, r3, #3
 80048cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048d0:	00d0      	lsls	r0, r2, #3
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	eb12 0804 	adds.w	r8, r2, r4
 80048da:	eb43 0905 	adc.w	r9, r3, r5
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f04f 0100 	mov.w	r1, #0
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	008b      	lsls	r3, r1, #2
 80048f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048f6:	0082      	lsls	r2, r0, #2
 80048f8:	4640      	mov	r0, r8
 80048fa:	4649      	mov	r1, r9
 80048fc:	f7fb fc64 	bl	80001c8 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <UART_SetConfig+0x410>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	011e      	lsls	r6, r3, #4
 800490e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004910:	4618      	mov	r0, r3
 8004912:	f04f 0100 	mov.w	r1, #0
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	1894      	adds	r4, r2, r2
 800491c:	60bc      	str	r4, [r7, #8]
 800491e:	415b      	adcs	r3, r3
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004926:	1812      	adds	r2, r2, r0
 8004928:	eb41 0303 	adc.w	r3, r1, r3
 800492c:	f04f 0400 	mov.w	r4, #0
 8004930:	f04f 0500 	mov.w	r5, #0
 8004934:	00dd      	lsls	r5, r3, #3
 8004936:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800493a:	00d4      	lsls	r4, r2, #3
 800493c:	4622      	mov	r2, r4
 800493e:	462b      	mov	r3, r5
 8004940:	1814      	adds	r4, r2, r0
 8004942:	64bc      	str	r4, [r7, #72]	; 0x48
 8004944:	414b      	adcs	r3, r1
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	4618      	mov	r0, r3
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	008b      	lsls	r3, r1, #2
 800495c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004960:	0082      	lsls	r2, r0, #2
 8004962:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004966:	f7fb fc2f 	bl	80001c8 <__aeabi_uldivmod>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <UART_SetConfig+0x410>)
 8004970:	fba3 1302 	umull	r1, r3, r3, r2
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	2164      	movs	r1, #100	; 0x64
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	3332      	adds	r3, #50	; 0x32
 8004982:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <UART_SetConfig+0x410>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498e:	441e      	add	r6, r3
 8004990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004992:	4618      	mov	r0, r3
 8004994:	f04f 0100 	mov.w	r1, #0
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	1894      	adds	r4, r2, r2
 800499e:	603c      	str	r4, [r7, #0]
 80049a0:	415b      	adcs	r3, r3
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a8:	1812      	adds	r2, r2, r0
 80049aa:	eb41 0303 	adc.w	r3, r1, r3
 80049ae:	f04f 0400 	mov.w	r4, #0
 80049b2:	f04f 0500 	mov.w	r5, #0
 80049b6:	00dd      	lsls	r5, r3, #3
 80049b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049bc:	00d4      	lsls	r4, r2, #3
 80049be:	4622      	mov	r2, r4
 80049c0:	462b      	mov	r3, r5
 80049c2:	eb12 0a00 	adds.w	sl, r2, r0
 80049c6:	eb43 0b01 	adc.w	fp, r3, r1
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	008b      	lsls	r3, r1, #2
 80049de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049e2:	0082      	lsls	r2, r0, #2
 80049e4:	4650      	mov	r0, sl
 80049e6:	4659      	mov	r1, fp
 80049e8:	f7fb fbee 	bl	80001c8 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <UART_SetConfig+0x410>)
 80049f2:	fba3 1302 	umull	r1, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2164      	movs	r1, #100	; 0x64
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	3332      	adds	r3, #50	; 0x32
 8004a04:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <UART_SetConfig+0x410>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	f003 020f 	and.w	r2, r3, #15
 8004a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4432      	add	r2, r6
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	377c      	adds	r7, #124	; 0x7c
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a22:	bf00      	nop
 8004a24:	51eb851f 	.word	0x51eb851f

08004a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a28:	b084      	sub	sp, #16
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	f107 001c 	add.w	r0, r7, #28
 8004a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d122      	bne.n	8004a86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d105      	bne.n	8004a7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f001 fb1c 	bl	80060b8 <USB_CoreReset>
 8004a80:	4603      	mov	r3, r0
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e01a      	b.n	8004abc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f001 fb10 	bl	80060b8 <USB_CoreReset>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
 8004aae:	e005      	b.n	8004abc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d10b      	bne.n	8004ada <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f043 0206 	orr.w	r2, r3, #6
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae6:	b004      	add	sp, #16
 8004ae8:	4770      	bx	lr
	...

08004aec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d165      	bne.n	8004bcc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <USB_SetTurnaroundTime+0x11c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d906      	bls.n	8004b16 <USB_SetTurnaroundTime+0x2a>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4a40      	ldr	r2, [pc, #256]	; (8004c0c <USB_SetTurnaroundTime+0x120>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d202      	bcs.n	8004b16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b10:	230f      	movs	r3, #15
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e062      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4a3c      	ldr	r2, [pc, #240]	; (8004c0c <USB_SetTurnaroundTime+0x120>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d306      	bcc.n	8004b2c <USB_SetTurnaroundTime+0x40>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4a3b      	ldr	r2, [pc, #236]	; (8004c10 <USB_SetTurnaroundTime+0x124>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d202      	bcs.n	8004b2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b26:	230e      	movs	r3, #14
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e057      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4a38      	ldr	r2, [pc, #224]	; (8004c10 <USB_SetTurnaroundTime+0x124>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d306      	bcc.n	8004b42 <USB_SetTurnaroundTime+0x56>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4a37      	ldr	r2, [pc, #220]	; (8004c14 <USB_SetTurnaroundTime+0x128>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d202      	bcs.n	8004b42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b3c:	230d      	movs	r3, #13
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	e04c      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <USB_SetTurnaroundTime+0x128>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d306      	bcc.n	8004b58 <USB_SetTurnaroundTime+0x6c>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <USB_SetTurnaroundTime+0x12c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d802      	bhi.n	8004b58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b52:	230c      	movs	r3, #12
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e041      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4a2f      	ldr	r2, [pc, #188]	; (8004c18 <USB_SetTurnaroundTime+0x12c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d906      	bls.n	8004b6e <USB_SetTurnaroundTime+0x82>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4a2e      	ldr	r2, [pc, #184]	; (8004c1c <USB_SetTurnaroundTime+0x130>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d802      	bhi.n	8004b6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b68:	230b      	movs	r3, #11
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e036      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4a2a      	ldr	r2, [pc, #168]	; (8004c1c <USB_SetTurnaroundTime+0x130>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d906      	bls.n	8004b84 <USB_SetTurnaroundTime+0x98>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <USB_SetTurnaroundTime+0x134>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d802      	bhi.n	8004b84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b7e:	230a      	movs	r3, #10
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e02b      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4a26      	ldr	r2, [pc, #152]	; (8004c20 <USB_SetTurnaroundTime+0x134>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d906      	bls.n	8004b9a <USB_SetTurnaroundTime+0xae>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <USB_SetTurnaroundTime+0x138>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d202      	bcs.n	8004b9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b94:	2309      	movs	r3, #9
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e020      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4a21      	ldr	r2, [pc, #132]	; (8004c24 <USB_SetTurnaroundTime+0x138>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d306      	bcc.n	8004bb0 <USB_SetTurnaroundTime+0xc4>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4a20      	ldr	r2, [pc, #128]	; (8004c28 <USB_SetTurnaroundTime+0x13c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d802      	bhi.n	8004bb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004baa:	2308      	movs	r3, #8
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e015      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <USB_SetTurnaroundTime+0x13c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d906      	bls.n	8004bc6 <USB_SetTurnaroundTime+0xda>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <USB_SetTurnaroundTime+0x140>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d202      	bcs.n	8004bc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bc0:	2307      	movs	r3, #7
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e00a      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bc6:	2306      	movs	r3, #6
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	e007      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bd2:	2309      	movs	r3, #9
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e001      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bd8:	2309      	movs	r3, #9
 8004bda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	029b      	lsls	r3, r3, #10
 8004bf0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	00d8acbf 	.word	0x00d8acbf
 8004c0c:	00e4e1c0 	.word	0x00e4e1c0
 8004c10:	00f42400 	.word	0x00f42400
 8004c14:	01067380 	.word	0x01067380
 8004c18:	011a499f 	.word	0x011a499f
 8004c1c:	01312cff 	.word	0x01312cff
 8004c20:	014ca43f 	.word	0x014ca43f
 8004c24:	016e3600 	.word	0x016e3600
 8004c28:	01a6ab1f 	.word	0x01a6ab1f
 8004c2c:	01e84800 	.word	0x01e84800

08004c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f043 0201 	orr.w	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 0201 	bic.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d115      	bne.n	8004cc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f7fb ff98 	bl	8000bd8 <HAL_Delay>
      ms++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f001 f972 	bl	8005f98 <USB_GetMode>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d01e      	beq.n	8004cf8 <USB_SetCurrentMode+0x84>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b31      	cmp	r3, #49	; 0x31
 8004cbe:	d9f0      	bls.n	8004ca2 <USB_SetCurrentMode+0x2e>
 8004cc0:	e01a      	b.n	8004cf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d115      	bne.n	8004cf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f7fb ff7f 	bl	8000bd8 <HAL_Delay>
      ms++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f001 f959 	bl	8005f98 <USB_GetMode>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <USB_SetCurrentMode+0x84>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b31      	cmp	r3, #49	; 0x31
 8004cf0:	d9f0      	bls.n	8004cd4 <USB_SetCurrentMode+0x60>
 8004cf2:	e001      	b.n	8004cf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e005      	b.n	8004d04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b32      	cmp	r3, #50	; 0x32
 8004cfc:	d101      	bne.n	8004d02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e009      	b.n	8004d40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3340      	adds	r3, #64	; 0x40
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	2200      	movs	r2, #0
 8004d38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b0e      	cmp	r3, #14
 8004d44:	d9f2      	bls.n	8004d2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11c      	bne.n	8004d86 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
 8004d84:	e00b      	b.n	8004d9e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004da4:	461a      	mov	r2, r3
 8004da6:	2300      	movs	r3, #0
 8004da8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db0:	4619      	mov	r1, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db8:	461a      	mov	r2, r3
 8004dba:	680b      	ldr	r3, [r1, #0]
 8004dbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d10c      	bne.n	8004dde <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dca:	2100      	movs	r1, #0
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f945 	bl	800505c <USB_SetDevSpeed>
 8004dd2:	e008      	b.n	8004de6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f940 	bl	800505c <USB_SetDevSpeed>
 8004ddc:	e003      	b.n	8004de6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dde:	2103      	movs	r1, #3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f93b 	bl	800505c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004de6:	2110      	movs	r1, #16
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8f3 	bl	8004fd4 <USB_FlushTxFifo>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f90f 	bl	800501c <USB_FlushRxFifo>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2300      	movs	r3, #0
 8004e12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	461a      	mov	r2, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	e043      	b.n	8004eba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e48:	d118      	bne.n	8004e7c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	e013      	b.n	8004e8e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e72:	461a      	mov	r2, r3
 8004e74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e008      	b.n	8004e8e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	461a      	mov	r2, r3
 8004eae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004eb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d3b7      	bcc.n	8004e32 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	e043      	b.n	8004f50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ede:	d118      	bne.n	8004f12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e013      	b.n	8004f24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	e008      	b.n	8004f24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2300      	movs	r3, #0
 8004f22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	461a      	mov	r2, r3
 8004f32:	2300      	movs	r3, #0
 8004f34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f42:	461a      	mov	r2, r3
 8004f44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d3b7      	bcc.n	8004ec8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f043 0210 	orr.w	r2, r3, #16
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <USB_DevInit+0x2c4>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f043 0208 	orr.w	r2, r3, #8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb8:	f043 0304 	orr.w	r3, r3, #4
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fcc:	b004      	add	sp, #16
 8004fce:	4770      	bx	lr
 8004fd0:	803c3800 	.word	0x803c3800

08004fd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	019b      	lsls	r3, r3, #6
 8004fe6:	f043 0220 	orr.w	r2, r3, #32
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	4a08      	ldr	r2, [pc, #32]	; (8005018 <USB_FlushTxFifo+0x44>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e006      	b.n	800500c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b20      	cmp	r3, #32
 8005008:	d0f1      	beq.n	8004fee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	00030d40 	.word	0x00030d40

0800501c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2210      	movs	r2, #16
 800502c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	4a08      	ldr	r2, [pc, #32]	; (8005058 <USB_FlushRxFifo+0x3c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e006      	b.n	800504c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0310 	and.w	r3, r3, #16
 8005046:	2b10      	cmp	r3, #16
 8005048:	d0f1      	beq.n	800502e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	00030d40 	.word	0x00030d40

0800505c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800507c:	4313      	orrs	r3, r2
 800507e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800508e:	b480      	push	{r7}
 8005090:	b087      	sub	sp, #28
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0306 	and.w	r3, r3, #6
 80050a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
 80050b2:	e00a      	b.n	80050ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d002      	beq.n	80050c0 <USB_GetDevSpeed+0x32>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b06      	cmp	r3, #6
 80050be:	d102      	bne.n	80050c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050c0:	2302      	movs	r3, #2
 80050c2:	75fb      	strb	r3, [r7, #23]
 80050c4:	e001      	b.n	80050ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050c6:	230f      	movs	r3, #15
 80050c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d13a      	bne.n	800516a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	69da      	ldr	r2, [r3, #28]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	2101      	movs	r1, #1
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	b29b      	uxth	r3, r3
 800510c:	68f9      	ldr	r1, [r7, #12]
 800510e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005112:	4313      	orrs	r3, r2
 8005114:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d155      	bne.n	80051d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	78db      	ldrb	r3, [r3, #3]
 8005146:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005148:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	059b      	lsls	r3, r3, #22
 800514e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005150:	4313      	orrs	r3, r2
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e036      	b.n	80051d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	69da      	ldr	r2, [r3, #28]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005188:	4313      	orrs	r3, r2
 800518a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11a      	bne.n	80051d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	78db      	ldrb	r3, [r3, #3]
 80051bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051be:	430b      	orrs	r3, r1
 80051c0:	4313      	orrs	r3, r2
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	0151      	lsls	r1, r2, #5
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	440a      	add	r2, r1
 80051ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d161      	bne.n	80052c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800521a:	d11f      	bne.n	800525c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005236:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800523a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800525a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	2101      	movs	r1, #1
 800526e:	fa01 f303 	lsl.w	r3, r1, r3
 8005272:	b29b      	uxth	r3, r3
 8005274:	43db      	mvns	r3, r3
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800527c:	4013      	ands	r3, r2
 800527e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	2101      	movs	r1, #1
 8005292:	fa01 f303 	lsl.w	r3, r1, r3
 8005296:	b29b      	uxth	r3, r3
 8005298:	43db      	mvns	r3, r3
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a0:	4013      	ands	r3, r2
 80052a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	0159      	lsls	r1, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	440b      	add	r3, r1
 80052ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052be:	4619      	mov	r1, r3
 80052c0:	4b35      	ldr	r3, [pc, #212]	; (8005398 <USB_DeactivateEndpoint+0x1b0>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]
 80052c6:	e060      	b.n	800538a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052de:	d11f      	bne.n	8005320 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800531e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	2101      	movs	r1, #1
 8005332:	fa01 f303 	lsl.w	r3, r1, r3
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	43db      	mvns	r3, r3
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005340:	4013      	ands	r3, r2
 8005342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	2101      	movs	r1, #1
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	041b      	lsls	r3, r3, #16
 800535c:	43db      	mvns	r3, r3
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005364:	4013      	ands	r3, r2
 8005366:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	0159      	lsls	r1, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	440b      	add	r3, r1
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	4619      	mov	r1, r3
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <USB_DeactivateEndpoint+0x1b4>)
 8005386:	4013      	ands	r3, r2
 8005388:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	ec337800 	.word	0xec337800
 800539c:	eff37800 	.word	0xeff37800

080053a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	; 0x28
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	4613      	mov	r3, r2
 80053ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	f040 815c 	bne.w	800567a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d132      	bne.n	8005430 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800540c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005428:	0cdb      	lsrs	r3, r3, #19
 800542a:	04db      	lsls	r3, r3, #19
 800542c:	6113      	str	r3, [r2, #16]
 800542e:	e074      	b.n	800551a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544a:	0cdb      	lsrs	r3, r3, #19
 800544c:	04db      	lsls	r3, r3, #19
 800544e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800546e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6959      	ldr	r1, [r3, #20]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	440b      	add	r3, r1
 800548c:	1e59      	subs	r1, r3, #1
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	fbb1 f3f3 	udiv	r3, r1, r3
 8005496:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005498:	4b9d      	ldr	r3, [pc, #628]	; (8005710 <USB_EPStartXfer+0x370>)
 800549a:	400b      	ands	r3, r1
 800549c:	69b9      	ldr	r1, [r7, #24]
 800549e:	0148      	lsls	r0, r1, #5
 80054a0:	69f9      	ldr	r1, [r7, #28]
 80054a2:	4401      	add	r1, r0
 80054a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054a8:	4313      	orrs	r3, r2
 80054aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c2:	69b9      	ldr	r1, [r7, #24]
 80054c4:	0148      	lsls	r0, r1, #5
 80054c6:	69f9      	ldr	r1, [r7, #28]
 80054c8:	4401      	add	r1, r0
 80054ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054ce:	4313      	orrs	r3, r2
 80054d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	78db      	ldrb	r3, [r3, #3]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d11f      	bne.n	800551a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	440a      	add	r2, r1
 8005510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005514:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005518:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d14b      	bne.n	80055b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	461a      	mov	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	78db      	ldrb	r3, [r3, #3]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d128      	bne.n	8005596 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d110      	bne.n	8005576 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	e00f      	b.n	8005596 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e12f      	b.n	8005818 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	78db      	ldrb	r3, [r3, #3]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d015      	beq.n	800560c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8117 	beq.w	8005818 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	2101      	movs	r1, #1
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	69f9      	ldr	r1, [r7, #28]
 8005602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005606:	4313      	orrs	r3, r2
 8005608:	634b      	str	r3, [r1, #52]	; 0x34
 800560a:	e105      	b.n	8005818 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d110      	bne.n	800563e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005636:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	e00f      	b.n	800565e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	440a      	add	r2, r1
 8005654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	68d9      	ldr	r1, [r3, #12]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	781a      	ldrb	r2, [r3, #0]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	b298      	uxth	r0, r3
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4603      	mov	r3, r0
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 fa2b 	bl	8005ace <USB_WritePacket>
 8005678:	e0ce      	b.n	8005818 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005694:	0cdb      	lsrs	r3, r3, #19
 8005696:	04db      	lsls	r3, r3, #19
 8005698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d126      	bne.n	8005714 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056dc:	69b9      	ldr	r1, [r7, #24]
 80056de:	0148      	lsls	r0, r1, #5
 80056e0:	69f9      	ldr	r1, [r7, #28]
 80056e2:	4401      	add	r1, r0
 80056e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056e8:	4313      	orrs	r3, r2
 80056ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800570a:	6113      	str	r3, [r2, #16]
 800570c:	e036      	b.n	800577c <USB_EPStartXfer+0x3dc>
 800570e:	bf00      	nop
 8005710:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4413      	add	r3, r2
 800571e:	1e5a      	subs	r2, r3, #1
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	8afb      	ldrh	r3, [r7, #22]
 800573a:	04d9      	lsls	r1, r3, #19
 800573c:	4b39      	ldr	r3, [pc, #228]	; (8005824 <USB_EPStartXfer+0x484>)
 800573e:	400b      	ands	r3, r1
 8005740:	69b9      	ldr	r1, [r7, #24]
 8005742:	0148      	lsls	r0, r1, #5
 8005744:	69f9      	ldr	r1, [r7, #28]
 8005746:	4401      	add	r1, r0
 8005748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800574c:	4313      	orrs	r3, r2
 800574e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	8af9      	ldrh	r1, [r7, #22]
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	0148      	lsls	r0, r1, #5
 8005770:	69f9      	ldr	r1, [r7, #28]
 8005772:	4401      	add	r1, r0
 8005774:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005778:	4313      	orrs	r3, r2
 800577a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10d      	bne.n	800579e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	68d9      	ldr	r1, [r3, #12]
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	460a      	mov	r2, r1
 800579c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	78db      	ldrb	r3, [r3, #3]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d128      	bne.n	80057f8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d110      	bne.n	80057d8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e00f      	b.n	80057f8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005812:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005816:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	1ff80000 	.word	0x1ff80000

08005828 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b01      	cmp	r3, #1
 8005846:	f040 80cd 	bne.w	80059e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d132      	bne.n	80058b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005874:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005894:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b0:	0cdb      	lsrs	r3, r3, #19
 80058b2:	04db      	lsls	r3, r3, #19
 80058b4:	6113      	str	r3, [r2, #16]
 80058b6:	e04e      	b.n	8005956 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d2:	0cdb      	lsrs	r3, r3, #19
 80058d4:	04db      	lsls	r3, r3, #19
 80058d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d903      	bls.n	8005910 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800592e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005946:	6939      	ldr	r1, [r7, #16]
 8005948:	0148      	lsls	r0, r1, #5
 800594a:	6979      	ldr	r1, [r7, #20]
 800594c:	4401      	add	r1, r0
 800594e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005952:	4313      	orrs	r3, r2
 8005954:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d11e      	bne.n	800599a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d009      	beq.n	8005978 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	e092      	b.n	8005ac0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d07e      	beq.n	8005ac0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	2101      	movs	r1, #1
 80059d4:	fa01 f303 	lsl.w	r3, r1, r3
 80059d8:	6979      	ldr	r1, [r7, #20]
 80059da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059de:	4313      	orrs	r3, r2
 80059e0:	634b      	str	r3, [r1, #52]	; 0x34
 80059e2:	e06d      	b.n	8005ac0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fe:	0cdb      	lsrs	r3, r3, #19
 8005a00:	04db      	lsls	r3, r3, #19
 8005a02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	0151      	lsls	r1, r2, #5
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	440a      	add	r2, r1
 8005a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a26:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6e:	6939      	ldr	r1, [r7, #16]
 8005a70:	0148      	lsls	r0, r1, #5
 8005a72:	6979      	ldr	r1, [r7, #20]
 8005a74:	4401      	add	r1, r0
 8005a76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10d      	bne.n	8005aa0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	68d9      	ldr	r1, [r3, #12]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9c:	460a      	mov	r2, r1
 8005a9e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005abe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b089      	sub	sp, #36	; 0x24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	461a      	mov	r2, r3
 8005adc:	460b      	mov	r3, r1
 8005ade:	71fb      	strb	r3, [r7, #7]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d123      	bne.n	8005b3c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005af4:	88bb      	ldrh	r3, [r7, #4]
 8005af6:	3303      	adds	r3, #3
 8005af8:	089b      	lsrs	r3, r3, #2
 8005afa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e018      	b.n	8005b34 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	031a      	lsls	r2, r3, #12
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	461a      	mov	r2, r3
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	3301      	adds	r3, #1
 8005b26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	3301      	adds	r3, #1
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d3e2      	bcc.n	8005b02 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3724      	adds	r7, #36	; 0x24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b08b      	sub	sp, #44	; 0x2c
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	4613      	mov	r3, r2
 8005b56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b70:	2300      	movs	r3, #0
 8005b72:	623b      	str	r3, [r7, #32]
 8005b74:	e014      	b.n	8005ba0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	3301      	adds	r3, #1
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	3301      	adds	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	3301      	adds	r3, #1
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	623b      	str	r3, [r7, #32]
 8005ba0:	6a3a      	ldr	r2, [r7, #32]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d3e6      	bcc.n	8005b76 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ba8:	8bfb      	ldrh	r3, [r7, #30]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01e      	beq.n	8005bec <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f107 0310 	add.w	r3, r7, #16
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	701a      	strb	r2, [r3, #0]
      i++;
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	3301      	adds	r3, #1
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005be0:	8bfb      	ldrh	r3, [r7, #30]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005be6:	8bfb      	ldrh	r3, [r7, #30]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1ea      	bne.n	8005bc2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	372c      	adds	r7, #44	; 0x2c
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d12c      	bne.n	8005c70 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	db12      	blt.n	8005c4e <USB_EPSetStall+0x54>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00f      	beq.n	8005c4e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c4c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	e02b      	b.n	8005cc8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	db12      	blt.n	8005ca8 <USB_EPSetStall+0xae>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00f      	beq.n	8005ca8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ca6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d128      	bne.n	8005d44 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	78db      	ldrb	r3, [r3, #3]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d003      	beq.n	8005d22 <USB_EPClearStall+0x4c>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	78db      	ldrb	r3, [r3, #3]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d138      	bne.n	8005d94 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e027      	b.n	8005d94 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	78db      	ldrb	r3, [r3, #3]
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d003      	beq.n	8005d74 <USB_EPClearStall+0x9e>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	78db      	ldrb	r3, [r3, #3]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d10f      	bne.n	8005d94 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d92:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dc0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dc4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e08:	f023 0303 	bic.w	r3, r3, #3
 8005e0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e1c:	f023 0302 	bic.w	r3, r3, #2
 8005e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e4a:	f023 0303 	bic.w	r3, r3, #3
 8005e4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5e:	f043 0302 	orr.w	r3, r3, #2
 8005e62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4013      	ands	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	0c1b      	lsrs	r3, r3, #16
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	4013      	ands	r3, r2
 8005eee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	b29b      	uxth	r3, r3
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	01db      	lsls	r3, r3, #7
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4013      	ands	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fd2:	f023 0307 	bic.w	r3, r3, #7
 8005fd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	460b      	mov	r3, r1
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	333c      	adds	r3, #60	; 0x3c
 8006012:	3304      	adds	r3, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <USB_EP0_OutStart+0xb8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d90a      	bls.n	8006036 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800602c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006030:	d101      	bne.n	8006036 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	e037      	b.n	80060a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	461a      	mov	r2, r3
 800603e:	2300      	movs	r3, #0
 8006040:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006064:	f043 0318 	orr.w	r3, r3, #24
 8006068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006078:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800607c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d10f      	bne.n	80060a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80060a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	4f54300a 	.word	0x4f54300a

080060b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	4a13      	ldr	r2, [pc, #76]	; (8006118 <USB_CoreReset+0x60>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e01a      	b.n	800610a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	daf3      	bge.n	80060c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f043 0201 	orr.w	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3301      	adds	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	4a09      	ldr	r2, [pc, #36]	; (8006118 <USB_CoreReset+0x60>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d901      	bls.n	80060fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e006      	b.n	800610a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	d0f1      	beq.n	80060ec <USB_CoreReset+0x34>

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	00030d40 	.word	0x00030d40

0800611c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006128:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800612c:	f002 f962 	bl	80083f4 <USBD_static_malloc>
 8006130:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d105      	bne.n	8006144 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006140:	2302      	movs	r3, #2
 8006142:	e066      	b.n	8006212 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7c1b      	ldrb	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d119      	bne.n	8006188 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006158:	2202      	movs	r2, #2
 800615a:	2181      	movs	r1, #129	; 0x81
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f002 f826 	bl	80081ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800616c:	2202      	movs	r2, #2
 800616e:	2101      	movs	r1, #1
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f002 f81c 	bl	80081ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2210      	movs	r2, #16
 8006182:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006186:	e016      	b.n	80061b6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006188:	2340      	movs	r3, #64	; 0x40
 800618a:	2202      	movs	r2, #2
 800618c:	2181      	movs	r1, #129	; 0x81
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f002 f80d 	bl	80081ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800619a:	2340      	movs	r3, #64	; 0x40
 800619c:	2202      	movs	r2, #2
 800619e:	2101      	movs	r1, #1
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f002 f804 	bl	80081ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2210      	movs	r2, #16
 80061b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061b6:	2308      	movs	r3, #8
 80061b8:	2203      	movs	r2, #3
 80061ba:	2182      	movs	r1, #130	; 0x82
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 fff6 	bl	80081ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7c1b      	ldrb	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d109      	bne.n	8006200 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061f6:	2101      	movs	r1, #1
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f002 f8c7 	bl	800838c <USBD_LL_PrepareReceive>
 80061fe:	e007      	b.n	8006210 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006206:	2340      	movs	r3, #64	; 0x40
 8006208:	2101      	movs	r1, #1
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f002 f8be 	bl	800838c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006226:	2181      	movs	r1, #129	; 0x81
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 ffe6 	bl	80081fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006234:	2101      	movs	r1, #1
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 ffdf 	bl	80081fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006244:	2182      	movs	r1, #130	; 0x82
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 ffd7 	bl	80081fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00e      	beq.n	8006284 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006276:	4618      	mov	r0, r3
 8006278:	f002 f8ca 	bl	8008410 <USBD_static_free>
    pdev->pClassData = NULL;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e0af      	b.n	8006418 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d03f      	beq.n	8006344 <USBD_CDC_Setup+0xb4>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	f040 809f 	bne.w	8006408 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	88db      	ldrh	r3, [r3, #6]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d02e      	beq.n	8006330 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	b25b      	sxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da16      	bge.n	800630a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80062e8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	88d2      	ldrh	r2, [r2, #6]
 80062ee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	88db      	ldrh	r3, [r3, #6]
 80062f4:	2b07      	cmp	r3, #7
 80062f6:	bf28      	it	cs
 80062f8:	2307      	movcs	r3, #7
 80062fa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	89fa      	ldrh	r2, [r7, #14]
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fb19 	bl	800793a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006308:	e085      	b.n	8006416 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	785a      	ldrb	r2, [r3, #1]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	88db      	ldrh	r3, [r3, #6]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006320:	6939      	ldr	r1, [r7, #16]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	88db      	ldrh	r3, [r3, #6]
 8006326:	461a      	mov	r2, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fb32 	bl	8007992 <USBD_CtlPrepareRx>
      break;
 800632e:	e072      	b.n	8006416 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	7850      	ldrb	r0, [r2, #1]
 800633c:	2200      	movs	r2, #0
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	4798      	blx	r3
      break;
 8006342:	e068      	b.n	8006416 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b0b      	cmp	r3, #11
 800634a:	d852      	bhi.n	80063f2 <USBD_CDC_Setup+0x162>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <USBD_CDC_Setup+0xc4>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006385 	.word	0x08006385
 8006358:	08006401 	.word	0x08006401
 800635c:	080063f3 	.word	0x080063f3
 8006360:	080063f3 	.word	0x080063f3
 8006364:	080063f3 	.word	0x080063f3
 8006368:	080063f3 	.word	0x080063f3
 800636c:	080063f3 	.word	0x080063f3
 8006370:	080063f3 	.word	0x080063f3
 8006374:	080063f3 	.word	0x080063f3
 8006378:	080063f3 	.word	0x080063f3
 800637c:	080063af 	.word	0x080063af
 8006380:	080063d9 	.word	0x080063d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b03      	cmp	r3, #3
 800638e:	d107      	bne.n	80063a0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006390:	f107 030a 	add.w	r3, r7, #10
 8006394:	2202      	movs	r2, #2
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 face 	bl	800793a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800639e:	e032      	b.n	8006406 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 fa58 	bl	8007858 <USBD_CtlError>
            ret = USBD_FAIL;
 80063a8:	2303      	movs	r3, #3
 80063aa:	75fb      	strb	r3, [r7, #23]
          break;
 80063ac:	e02b      	b.n	8006406 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d107      	bne.n	80063ca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063ba:	f107 030d 	add.w	r3, r7, #13
 80063be:	2201      	movs	r2, #1
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fab9 	bl	800793a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063c8:	e01d      	b.n	8006406 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fa43 	bl	8007858 <USBD_CtlError>
            ret = USBD_FAIL;
 80063d2:	2303      	movs	r3, #3
 80063d4:	75fb      	strb	r3, [r7, #23]
          break;
 80063d6:	e016      	b.n	8006406 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d00f      	beq.n	8006404 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 fa36 	bl	8007858 <USBD_CtlError>
            ret = USBD_FAIL;
 80063ec:	2303      	movs	r3, #3
 80063ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063f0:	e008      	b.n	8006404 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fa2f 	bl	8007858 <USBD_CtlError>
          ret = USBD_FAIL;
 80063fa:	2303      	movs	r3, #3
 80063fc:	75fb      	strb	r3, [r7, #23]
          break;
 80063fe:	e002      	b.n	8006406 <USBD_CDC_Setup+0x176>
          break;
 8006400:	bf00      	nop
 8006402:	e008      	b.n	8006416 <USBD_CDC_Setup+0x186>
          break;
 8006404:	bf00      	nop
      }
      break;
 8006406:	e006      	b.n	8006416 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fa24 	bl	8007858 <USBD_CtlError>
      ret = USBD_FAIL;
 8006410:	2303      	movs	r3, #3
 8006412:	75fb      	strb	r3, [r7, #23]
      break;
 8006414:	bf00      	nop
  }

  return (uint8_t)ret;
 8006416:	7dfb      	ldrb	r3, [r7, #23]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006432:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800643e:	2303      	movs	r3, #3
 8006440:	e04f      	b.n	80064e2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006448:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	3318      	adds	r3, #24
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d029      	beq.n	80064b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	3318      	adds	r3, #24
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	78f9      	ldrb	r1, [r7, #3]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	460b      	mov	r3, r1
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	1a5b      	subs	r3, r3, r1
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4403      	add	r3, r0
 8006480:	3344      	adds	r3, #68	; 0x44
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	fbb2 f1f3 	udiv	r1, r2, r3
 8006488:	fb03 f301 	mul.w	r3, r3, r1
 800648c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800648e:	2b00      	cmp	r3, #0
 8006490:	d110      	bne.n	80064b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006492:	78fa      	ldrb	r2, [r7, #3]
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	440b      	add	r3, r1
 80064a0:	3318      	adds	r3, #24
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064a6:	78f9      	ldrb	r1, [r7, #3]
 80064a8:	2300      	movs	r3, #0
 80064aa:	2200      	movs	r2, #0
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 ff4c 	bl	800834a <USBD_LL_Transmit>
 80064b2:	e015      	b.n	80064e0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006508:	2303      	movs	r3, #3
 800650a:	e015      	b.n	8006538 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 ff5c 	bl	80083ce <USBD_LL_GetRxDataSize>
 8006516:	4602      	mov	r2, r0
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006532:	4611      	mov	r1, r2
 8006534:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006556:	2303      	movs	r3, #3
 8006558:	e01b      	b.n	8006592 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d015      	beq.n	8006590 <USBD_CDC_EP0_RxReady+0x50>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800656a:	2bff      	cmp	r3, #255	; 0xff
 800656c:	d010      	beq.n	8006590 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800657c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006584:	b292      	uxth	r2, r2
 8006586:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	22ff      	movs	r2, #255	; 0xff
 800658c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2243      	movs	r2, #67	; 0x43
 80065a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80065aa:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	200000a4 	.word	0x200000a4

080065bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2243      	movs	r2, #67	; 0x43
 80065c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80065ca:	4b03      	ldr	r3, [pc, #12]	; (80065d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	20000060 	.word	0x20000060

080065dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2243      	movs	r2, #67	; 0x43
 80065e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80065ea:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	200000e8 	.word	0x200000e8

080065fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	220a      	movs	r2, #10
 8006608:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800660a:	4b03      	ldr	r3, [pc, #12]	; (8006618 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	2000001c 	.word	0x2000001c

0800661c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800662c:	2303      	movs	r3, #3
 800662e:	e004      	b.n	800663a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006646:	b480      	push	{r7}
 8006648:	b087      	sub	sp, #28
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006658:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006660:	2303      	movs	r3, #3
 8006662:	e008      	b.n	8006676 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006692:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800669a:	2303      	movs	r3, #3
 800669c:	e004      	b.n	80066a8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e01a      	b.n	800670c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d114      	bne.n	800670a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066fe:	2181      	movs	r1, #129	; 0x81
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fe22 	bl	800834a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006722:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800672e:	2303      	movs	r3, #3
 8006730:	e016      	b.n	8006760 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	7c1b      	ldrb	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006744:	2101      	movs	r1, #1
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fe20 	bl	800838c <USBD_LL_PrepareReceive>
 800674c:	e007      	b.n	800675e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006754:	2340      	movs	r3, #64	; 0x40
 8006756:	2101      	movs	r1, #1
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fe17 	bl	800838c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800677c:	2303      	movs	r3, #3
 800677e:	e01f      	b.n	80067c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	79fa      	ldrb	r2, [r7, #7]
 80067b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f001 fc93 	bl	80080e0 <USBD_LL_Init>
 80067ba:	4603      	mov	r3, r0
 80067bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80067dc:	2303      	movs	r3, #3
 80067de:	e016      	b.n	800680e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	f107 020e 	add.w	r2, r7, #14
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	4602      	mov	r2, r0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 fcaa 	bl	8008178 <USBD_LL_Start>
 8006824:	4603      	mov	r3, r0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006850:	2303      	movs	r3, #3
 8006852:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d009      	beq.n	8006872 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	4611      	mov	r1, r2
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
 800686e:	4603      	mov	r3, r0
 8006870:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d007      	beq.n	80068a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	4611      	mov	r1, r2
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
  }

  return USBD_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 ff90 	bl	80077e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d01a      	beq.n	800691e <USBD_LL_SetupStage+0x72>
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d822      	bhi.n	8006932 <USBD_LL_SetupStage+0x86>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <USBD_LL_SetupStage+0x4a>
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d00a      	beq.n	800690a <USBD_LL_SetupStage+0x5e>
 80068f4:	e01d      	b.n	8006932 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fa62 	bl	8006dc8 <USBD_StdDevReq>
 8006904:	4603      	mov	r3, r0
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e020      	b.n	800694c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fac6 	bl	8006ea4 <USBD_StdItfReq>
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]
      break;
 800691c:	e016      	b.n	800694c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fb05 	bl	8006f36 <USBD_StdEPReq>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	e00c      	b.n	800694c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006938:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 fc79 	bl	8008238 <USBD_LL_StallEP>
 8006946:	4603      	mov	r3, r0
 8006948:	73fb      	strb	r3, [r7, #15]
      break;
 800694a:	bf00      	nop
  }

  return ret;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b086      	sub	sp, #24
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	460b      	mov	r3, r1
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d138      	bne.n	80069dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006970:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006978:	2b03      	cmp	r3, #3
 800697a:	d14a      	bne.n	8006a12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	429a      	cmp	r2, r3
 8006986:	d913      	bls.n	80069b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	1ad2      	subs	r2, r2, r3
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	4293      	cmp	r3, r2
 80069a0:	bf28      	it	cs
 80069a2:	4613      	movcs	r3, r2
 80069a4:	461a      	mov	r2, r3
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f001 f80f 	bl	80079cc <USBD_CtlContinueRx>
 80069ae:	e030      	b.n	8006a12 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d10b      	bne.n	80069d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 f80a 	bl	80079ee <USBD_CtlSendStatus>
 80069da:	e01a      	b.n	8006a12 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d114      	bne.n	8006a12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00e      	beq.n	8006a12 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	7afa      	ldrb	r2, [r7, #11]
 80069fe:	4611      	mov	r1, r2
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	4798      	blx	r3
 8006a04:	4603      	mov	r3, r0
 8006a06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	e000      	b.n	8006a14 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	460b      	mov	r3, r1
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d16b      	bne.n	8006b08 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3314      	adds	r3, #20
 8006a34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d156      	bne.n	8006aee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d914      	bls.n	8006a76 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	1ad2      	subs	r2, r2, r3
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 ff84 	bl	8007970 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f001 fc8c 	bl	800838c <USBD_LL_PrepareReceive>
 8006a74:	e03b      	b.n	8006aee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d11c      	bne.n	8006abc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d316      	bcc.n	8006abc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d20f      	bcs.n	8006abc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 ff65 	bl	8007970 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f001 fc69 	bl	800838c <USBD_LL_PrepareReceive>
 8006aba:	e018      	b.n	8006aee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d10b      	bne.n	8006ae0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ae0:	2180      	movs	r1, #128	; 0x80
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f001 fba8 	bl	8008238 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 ff93 	bl	8007a14 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d122      	bne.n	8006b3e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f7ff fe98 	bl	800682e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b06:	e01a      	b.n	8006b3e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d114      	bne.n	8006b3e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00e      	beq.n	8006b3e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	7afa      	ldrb	r2, [r7, #11]
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	4798      	blx	r3
 8006b30:	4603      	mov	r3, r0
 8006b32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	e000      	b.n	8006b40 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e02f      	b.n	8006bdc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00f      	beq.n	8006ba6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d009      	beq.n	8006ba6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6852      	ldr	r2, [r2, #4]
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ba6:	2340      	movs	r3, #64	; 0x40
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2100      	movs	r1, #0
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 fafe 	bl	80081ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2240      	movs	r2, #64	; 0x40
 8006bbe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bc2:	2340      	movs	r3, #64	; 0x40
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2180      	movs	r1, #128	; 0x80
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 faf0 	bl	80081ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2240      	movs	r2, #64	; 0x40
 8006bd8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d106      	bne.n	8006c52 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e012      	b.n	8006c9c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d10b      	bne.n	8006c9a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e014      	b.n	8006ce8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d10d      	bne.n	8006ce6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	78fa      	ldrb	r2, [r7, #3]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e014      	b.n	8006d34 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d10d      	bne.n	8006d32 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b082      	sub	sp, #8
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d009      	beq.n	8006d80 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6852      	ldr	r2, [r2, #4]
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
  }

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b087      	sub	sp, #28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006da8:	8a3b      	ldrh	r3, [r7, #16]
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	b21a      	sxth	r2, r3
 8006dae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	b21b      	sxth	r3, r3
 8006db6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006db8:	89fb      	ldrh	r3, [r7, #14]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d005      	beq.n	8006dee <USBD_StdDevReq+0x26>
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d853      	bhi.n	8006e8e <USBD_StdDevReq+0xc6>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <USBD_StdDevReq+0x3a>
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d14f      	bne.n	8006e8e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006e00:	e04a      	b.n	8006e98 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	2b09      	cmp	r3, #9
 8006e08:	d83b      	bhi.n	8006e82 <USBD_StdDevReq+0xba>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <USBD_StdDevReq+0x48>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e65 	.word	0x08006e65
 8006e14:	08006e79 	.word	0x08006e79
 8006e18:	08006e83 	.word	0x08006e83
 8006e1c:	08006e6f 	.word	0x08006e6f
 8006e20:	08006e83 	.word	0x08006e83
 8006e24:	08006e43 	.word	0x08006e43
 8006e28:	08006e39 	.word	0x08006e39
 8006e2c:	08006e83 	.word	0x08006e83
 8006e30:	08006e5b 	.word	0x08006e5b
 8006e34:	08006e4d 	.word	0x08006e4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f9de 	bl	80071fc <USBD_GetDescriptor>
          break;
 8006e40:	e024      	b.n	8006e8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fb43 	bl	80074d0 <USBD_SetAddress>
          break;
 8006e4a:	e01f      	b.n	8006e8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fb82 	bl	8007558 <USBD_SetConfig>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
          break;
 8006e58:	e018      	b.n	8006e8c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fc21 	bl	80076a4 <USBD_GetConfig>
          break;
 8006e62:	e013      	b.n	8006e8c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fc52 	bl	8007710 <USBD_GetStatus>
          break;
 8006e6c:	e00e      	b.n	8006e8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fc81 	bl	8007778 <USBD_SetFeature>
          break;
 8006e76:	e009      	b.n	8006e8c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fc90 	bl	80077a0 <USBD_ClrFeature>
          break;
 8006e80:	e004      	b.n	8006e8c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fce7 	bl	8007858 <USBD_CtlError>
          break;
 8006e8a:	bf00      	nop
      }
      break;
 8006e8c:	e004      	b.n	8006e98 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fce1 	bl	8007858 <USBD_CtlError>
      break;
 8006e96:	bf00      	nop
  }

  return ret;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop

08006ea4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	d005      	beq.n	8006eca <USBD_StdItfReq+0x26>
 8006ebe:	2b40      	cmp	r3, #64	; 0x40
 8006ec0:	d82f      	bhi.n	8006f22 <USBD_StdItfReq+0x7e>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <USBD_StdItfReq+0x26>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d12b      	bne.n	8006f22 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d81d      	bhi.n	8006f14 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	889b      	ldrh	r3, [r3, #4]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d813      	bhi.n	8006f0a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	88db      	ldrh	r3, [r3, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d110      	bne.n	8006f1e <USBD_StdItfReq+0x7a>
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10d      	bne.n	8006f1e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fd73 	bl	80079ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f08:	e009      	b.n	8006f1e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fca3 	bl	8007858 <USBD_CtlError>
          break;
 8006f12:	e004      	b.n	8006f1e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fc9e 	bl	8007858 <USBD_CtlError>
          break;
 8006f1c:	e000      	b.n	8006f20 <USBD_StdItfReq+0x7c>
          break;
 8006f1e:	bf00      	nop
      }
      break;
 8006f20:	e004      	b.n	8006f2c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc97 	bl	8007858 <USBD_CtlError>
      break;
 8006f2a:	bf00      	nop
  }

  return ret;
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	889b      	ldrh	r3, [r3, #4]
 8006f48:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d007      	beq.n	8006f66 <USBD_StdEPReq+0x30>
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	f200 8145 	bhi.w	80071e6 <USBD_StdEPReq+0x2b0>
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00c      	beq.n	8006f7a <USBD_StdEPReq+0x44>
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	f040 8140 	bne.w	80071e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]
      break;
 8006f78:	e13a      	b.n	80071f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d007      	beq.n	8006f92 <USBD_StdEPReq+0x5c>
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	f300 8129 	bgt.w	80071da <USBD_StdEPReq+0x2a4>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d07f      	beq.n	800708c <USBD_StdEPReq+0x156>
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d03c      	beq.n	800700a <USBD_StdEPReq+0xd4>
 8006f90:	e123      	b.n	80071da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d002      	beq.n	8006fa4 <USBD_StdEPReq+0x6e>
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d016      	beq.n	8006fd0 <USBD_StdEPReq+0x9a>
 8006fa2:	e02c      	b.n	8006ffe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00d      	beq.n	8006fc6 <USBD_StdEPReq+0x90>
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	2b80      	cmp	r3, #128	; 0x80
 8006fae:	d00a      	beq.n	8006fc6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f93f 	bl	8008238 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fba:	2180      	movs	r1, #128	; 0x80
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f93b 	bl	8008238 <USBD_LL_StallEP>
 8006fc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fc4:	e020      	b.n	8007008 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fc45 	bl	8007858 <USBD_CtlError>
              break;
 8006fce:	e01b      	b.n	8007008 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	885b      	ldrh	r3, [r3, #2]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10e      	bne.n	8006ff6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00b      	beq.n	8006ff6 <USBD_StdEPReq+0xc0>
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	2b80      	cmp	r3, #128	; 0x80
 8006fe2:	d008      	beq.n	8006ff6 <USBD_StdEPReq+0xc0>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	88db      	ldrh	r3, [r3, #6]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 f921 	bl	8008238 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fcf9 	bl	80079ee <USBD_CtlSendStatus>

              break;
 8006ffc:	e004      	b.n	8007008 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fc29 	bl	8007858 <USBD_CtlError>
              break;
 8007006:	bf00      	nop
          }
          break;
 8007008:	e0ec      	b.n	80071e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b02      	cmp	r3, #2
 8007014:	d002      	beq.n	800701c <USBD_StdEPReq+0xe6>
 8007016:	2b03      	cmp	r3, #3
 8007018:	d016      	beq.n	8007048 <USBD_StdEPReq+0x112>
 800701a:	e030      	b.n	800707e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <USBD_StdEPReq+0x108>
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d00a      	beq.n	800703e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 f903 	bl	8008238 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007032:	2180      	movs	r1, #128	; 0x80
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 f8ff 	bl	8008238 <USBD_LL_StallEP>
 800703a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800703c:	e025      	b.n	800708a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fc09 	bl	8007858 <USBD_CtlError>
              break;
 8007046:	e020      	b.n	800708a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	885b      	ldrh	r3, [r3, #2]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d11b      	bne.n	8007088 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 f909 	bl	8008276 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fcc2 	bl	80079ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800707c:	e004      	b.n	8007088 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fbe9 	bl	8007858 <USBD_CtlError>
              break;
 8007086:	e000      	b.n	800708a <USBD_StdEPReq+0x154>
              break;
 8007088:	bf00      	nop
          }
          break;
 800708a:	e0ab      	b.n	80071e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d002      	beq.n	800709e <USBD_StdEPReq+0x168>
 8007098:	2b03      	cmp	r3, #3
 800709a:	d032      	beq.n	8007102 <USBD_StdEPReq+0x1cc>
 800709c:	e097      	b.n	80071ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d007      	beq.n	80070b4 <USBD_StdEPReq+0x17e>
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b80      	cmp	r3, #128	; 0x80
 80070a8:	d004      	beq.n	80070b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fbd3 	bl	8007858 <USBD_CtlError>
                break;
 80070b2:	e091      	b.n	80071d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	da0b      	bge.n	80070d4 <USBD_StdEPReq+0x19e>
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070c2:	4613      	mov	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	3310      	adds	r3, #16
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	4413      	add	r3, r2
 80070d0:	3304      	adds	r3, #4
 80070d2:	e00b      	b.n	80070ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	4413      	add	r3, r2
 80070ea:	3304      	adds	r3, #4
 80070ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2202      	movs	r2, #2
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fc1d 	bl	800793a <USBD_CtlSendData>
              break;
 8007100:	e06a      	b.n	80071d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007106:	2b00      	cmp	r3, #0
 8007108:	da11      	bge.n	800712e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	f003 020f 	and.w	r2, r3, #15
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	440b      	add	r3, r1
 800711c:	3324      	adds	r3, #36	; 0x24
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d117      	bne.n	8007154 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fb96 	bl	8007858 <USBD_CtlError>
                  break;
 800712c:	e054      	b.n	80071d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	f003 020f 	and.w	r2, r3, #15
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fb83 	bl	8007858 <USBD_CtlError>
                  break;
 8007152:	e041      	b.n	80071d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007158:	2b00      	cmp	r3, #0
 800715a:	da0b      	bge.n	8007174 <USBD_StdEPReq+0x23e>
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	3310      	adds	r3, #16
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	4413      	add	r3, r2
 8007170:	3304      	adds	r3, #4
 8007172:	e00b      	b.n	800718c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	4413      	add	r3, r2
 800718a:	3304      	adds	r3, #4
 800718c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <USBD_StdEPReq+0x264>
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	2b80      	cmp	r3, #128	; 0x80
 8007198:	d103      	bne.n	80071a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	e00e      	b.n	80071c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 f884 	bl	80082b4 <USBD_LL_IsStallEP>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e002      	b.n	80071c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2202      	movs	r2, #2
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fbb7 	bl	800793a <USBD_CtlSendData>
              break;
 80071cc:	e004      	b.n	80071d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fb41 	bl	8007858 <USBD_CtlError>
              break;
 80071d6:	bf00      	nop
          }
          break;
 80071d8:	e004      	b.n	80071e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fb3b 	bl	8007858 <USBD_CtlError>
          break;
 80071e2:	bf00      	nop
      }
      break;
 80071e4:	e004      	b.n	80071f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fb35 	bl	8007858 <USBD_CtlError>
      break;
 80071ee:	bf00      	nop
  }

  return ret;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	885b      	ldrh	r3, [r3, #2]
 8007216:	0a1b      	lsrs	r3, r3, #8
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	2b06      	cmp	r3, #6
 800721e:	f200 8128 	bhi.w	8007472 <USBD_GetDescriptor+0x276>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <USBD_GetDescriptor+0x2c>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007245 	.word	0x08007245
 800722c:	0800725d 	.word	0x0800725d
 8007230:	0800729d 	.word	0x0800729d
 8007234:	08007473 	.word	0x08007473
 8007238:	08007473 	.word	0x08007473
 800723c:	08007413 	.word	0x08007413
 8007240:	0800743f 	.word	0x0800743f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7c12      	ldrb	r2, [r2, #16]
 8007250:	f107 0108 	add.w	r1, r7, #8
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
 8007258:	60f8      	str	r0, [r7, #12]
      break;
 800725a:	e112      	b.n	8007482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	7c1b      	ldrb	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10d      	bne.n	8007280 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	f107 0208 	add.w	r2, r7, #8
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	2202      	movs	r2, #2
 800727c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800727e:	e100      	b.n	8007482 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	f107 0208 	add.w	r2, r7, #8
 800728c:	4610      	mov	r0, r2
 800728e:	4798      	blx	r3
 8007290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	2202      	movs	r2, #2
 8007298:	701a      	strb	r2, [r3, #0]
      break;
 800729a:	e0f2      	b.n	8007482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	885b      	ldrh	r3, [r3, #2]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	f200 80ac 	bhi.w	8007400 <USBD_GetDescriptor+0x204>
 80072a8:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <USBD_GetDescriptor+0xb4>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072c9 	.word	0x080072c9
 80072b4:	080072fd 	.word	0x080072fd
 80072b8:	08007331 	.word	0x08007331
 80072bc:	08007365 	.word	0x08007365
 80072c0:	08007399 	.word	0x08007399
 80072c4:	080073cd 	.word	0x080073cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00b      	beq.n	80072ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	7c12      	ldrb	r2, [r2, #16]
 80072e0:	f107 0108 	add.w	r1, r7, #8
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ea:	e091      	b.n	8007410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fab2 	bl	8007858 <USBD_CtlError>
            err++;
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	3301      	adds	r3, #1
 80072f8:	72fb      	strb	r3, [r7, #11]
          break;
 80072fa:	e089      	b.n	8007410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00b      	beq.n	8007320 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7c12      	ldrb	r2, [r2, #16]
 8007314:	f107 0108 	add.w	r1, r7, #8
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
 800731c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800731e:	e077      	b.n	8007410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa98 	bl	8007858 <USBD_CtlError>
            err++;
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	3301      	adds	r3, #1
 800732c:	72fb      	strb	r3, [r7, #11]
          break;
 800732e:	e06f      	b.n	8007410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	7c12      	ldrb	r2, [r2, #16]
 8007348:	f107 0108 	add.w	r1, r7, #8
 800734c:	4610      	mov	r0, r2
 800734e:	4798      	blx	r3
 8007350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007352:	e05d      	b.n	8007410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa7e 	bl	8007858 <USBD_CtlError>
            err++;
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	3301      	adds	r3, #1
 8007360:	72fb      	strb	r3, [r7, #11]
          break;
 8007362:	e055      	b.n	8007410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	7c12      	ldrb	r2, [r2, #16]
 800737c:	f107 0108 	add.w	r1, r7, #8
 8007380:	4610      	mov	r0, r2
 8007382:	4798      	blx	r3
 8007384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007386:	e043      	b.n	8007410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa64 	bl	8007858 <USBD_CtlError>
            err++;
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	3301      	adds	r3, #1
 8007394:	72fb      	strb	r3, [r7, #11]
          break;
 8007396:	e03b      	b.n	8007410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	7c12      	ldrb	r2, [r2, #16]
 80073b0:	f107 0108 	add.w	r1, r7, #8
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
 80073b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ba:	e029      	b.n	8007410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa4a 	bl	8007858 <USBD_CtlError>
            err++;
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	3301      	adds	r3, #1
 80073c8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ca:	e021      	b.n	8007410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00b      	beq.n	80073f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	7c12      	ldrb	r2, [r2, #16]
 80073e4:	f107 0108 	add.w	r1, r7, #8
 80073e8:	4610      	mov	r0, r2
 80073ea:	4798      	blx	r3
 80073ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ee:	e00f      	b.n	8007410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa30 	bl	8007858 <USBD_CtlError>
            err++;
 80073f8:	7afb      	ldrb	r3, [r7, #11]
 80073fa:	3301      	adds	r3, #1
 80073fc:	72fb      	strb	r3, [r7, #11]
          break;
 80073fe:	e007      	b.n	8007410 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa28 	bl	8007858 <USBD_CtlError>
          err++;
 8007408:	7afb      	ldrb	r3, [r7, #11]
 800740a:	3301      	adds	r3, #1
 800740c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800740e:	bf00      	nop
      }
      break;
 8007410:	e037      	b.n	8007482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	7c1b      	ldrb	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007422:	f107 0208 	add.w	r2, r7, #8
 8007426:	4610      	mov	r0, r2
 8007428:	4798      	blx	r3
 800742a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800742c:	e029      	b.n	8007482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa11 	bl	8007858 <USBD_CtlError>
        err++;
 8007436:	7afb      	ldrb	r3, [r7, #11]
 8007438:	3301      	adds	r3, #1
 800743a:	72fb      	strb	r3, [r7, #11]
      break;
 800743c:	e021      	b.n	8007482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	7c1b      	ldrb	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10d      	bne.n	8007462 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	f107 0208 	add.w	r2, r7, #8
 8007452:	4610      	mov	r0, r2
 8007454:	4798      	blx	r3
 8007456:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
 800745c:	2207      	movs	r2, #7
 800745e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007460:	e00f      	b.n	8007482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f9f7 	bl	8007858 <USBD_CtlError>
        err++;
 800746a:	7afb      	ldrb	r3, [r7, #11]
 800746c:	3301      	adds	r3, #1
 800746e:	72fb      	strb	r3, [r7, #11]
      break;
 8007470:	e007      	b.n	8007482 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f9ef 	bl	8007858 <USBD_CtlError>
      err++;
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	3301      	adds	r3, #1
 800747e:	72fb      	strb	r3, [r7, #11]
      break;
 8007480:	bf00      	nop
  }

  if (err != 0U)
 8007482:	7afb      	ldrb	r3, [r7, #11]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d11e      	bne.n	80074c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	88db      	ldrh	r3, [r3, #6]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d016      	beq.n	80074be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007490:	893b      	ldrh	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00e      	beq.n	80074b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	88da      	ldrh	r2, [r3, #6]
 800749a:	893b      	ldrh	r3, [r7, #8]
 800749c:	4293      	cmp	r3, r2
 800749e:	bf28      	it	cs
 80074a0:	4613      	movcs	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074a6:	893b      	ldrh	r3, [r7, #8]
 80074a8:	461a      	mov	r2, r3
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fa44 	bl	800793a <USBD_CtlSendData>
 80074b2:	e009      	b.n	80074c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9ce 	bl	8007858 <USBD_CtlError>
 80074bc:	e004      	b.n	80074c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa95 	bl	80079ee <USBD_CtlSendStatus>
 80074c4:	e000      	b.n	80074c8 <USBD_GetDescriptor+0x2cc>
    return;
 80074c6:	bf00      	nop
  }
}
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	889b      	ldrh	r3, [r3, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d131      	bne.n	8007546 <USBD_SetAddress+0x76>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	88db      	ldrh	r3, [r3, #6]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d12d      	bne.n	8007546 <USBD_SetAddress+0x76>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	2b7f      	cmp	r3, #127	; 0x7f
 80074f0:	d829      	bhi.n	8007546 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	885b      	ldrh	r3, [r3, #2]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b03      	cmp	r3, #3
 8007508:	d104      	bne.n	8007514 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f9a3 	bl	8007858 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007512:	e01d      	b.n	8007550 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	7bfa      	ldrb	r2, [r7, #15]
 8007518:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fef3 	bl	800830c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa61 	bl	80079ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2202      	movs	r2, #2
 8007536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753a:	e009      	b.n	8007550 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007544:	e004      	b.n	8007550 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f985 	bl	8007858 <USBD_CtlError>
  }
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	885b      	ldrh	r3, [r3, #2]
 800756a:	b2da      	uxtb	r2, r3
 800756c:	4b4c      	ldr	r3, [pc, #304]	; (80076a0 <USBD_SetConfig+0x148>)
 800756e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007570:	4b4b      	ldr	r3, [pc, #300]	; (80076a0 <USBD_SetConfig+0x148>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d905      	bls.n	8007584 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f96c 	bl	8007858 <USBD_CtlError>
    return USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	e088      	b.n	8007696 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d002      	beq.n	8007596 <USBD_SetConfig+0x3e>
 8007590:	2b03      	cmp	r3, #3
 8007592:	d025      	beq.n	80075e0 <USBD_SetConfig+0x88>
 8007594:	e071      	b.n	800767a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007596:	4b42      	ldr	r3, [pc, #264]	; (80076a0 <USBD_SetConfig+0x148>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01c      	beq.n	80075d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800759e:	4b40      	ldr	r3, [pc, #256]	; (80076a0 <USBD_SetConfig+0x148>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075a8:	4b3d      	ldr	r3, [pc, #244]	; (80076a0 <USBD_SetConfig+0x148>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff f948 	bl	8006844 <USBD_SetClassConfig>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f949 	bl	8007858 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075c6:	e065      	b.n	8007694 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fa10 	bl	80079ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2203      	movs	r2, #3
 80075d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075d6:	e05d      	b.n	8007694 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fa08 	bl	80079ee <USBD_CtlSendStatus>
      break;
 80075de:	e059      	b.n	8007694 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075e0:	4b2f      	ldr	r3, [pc, #188]	; (80076a0 <USBD_SetConfig+0x148>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d112      	bne.n	800760e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80075f0:	4b2b      	ldr	r3, [pc, #172]	; (80076a0 <USBD_SetConfig+0x148>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075fa:	4b29      	ldr	r3, [pc, #164]	; (80076a0 <USBD_SetConfig+0x148>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff f93b 	bl	800687c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f9f1 	bl	80079ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800760c:	e042      	b.n	8007694 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800760e:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <USBD_SetConfig+0x148>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	429a      	cmp	r2, r3
 800761a:	d02a      	beq.n	8007672 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff f929 	bl	800687c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800762a:	4b1d      	ldr	r3, [pc, #116]	; (80076a0 <USBD_SetConfig+0x148>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007634:	4b1a      	ldr	r3, [pc, #104]	; (80076a0 <USBD_SetConfig+0x148>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff f902 	bl	8006844 <USBD_SetClassConfig>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00f      	beq.n	800766a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f903 	bl	8007858 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff f90e 	bl	800687c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007668:	e014      	b.n	8007694 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f9bf 	bl	80079ee <USBD_CtlSendStatus>
      break;
 8007670:	e010      	b.n	8007694 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f9bb 	bl	80079ee <USBD_CtlSendStatus>
      break;
 8007678:	e00c      	b.n	8007694 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f8eb 	bl	8007858 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007682:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <USBD_SetConfig+0x148>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff f8f7 	bl	800687c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800768e:	2303      	movs	r3, #3
 8007690:	73fb      	strb	r3, [r7, #15]
      break;
 8007692:	bf00      	nop
  }

  return ret;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	200001ac 	.word	0x200001ac

080076a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	88db      	ldrh	r3, [r3, #6]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d004      	beq.n	80076c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f8cd 	bl	8007858 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076be:	e023      	b.n	8007708 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	dc02      	bgt.n	80076d2 <USBD_GetConfig+0x2e>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dc03      	bgt.n	80076d8 <USBD_GetConfig+0x34>
 80076d0:	e015      	b.n	80076fe <USBD_GetConfig+0x5a>
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d00b      	beq.n	80076ee <USBD_GetConfig+0x4a>
 80076d6:	e012      	b.n	80076fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3308      	adds	r3, #8
 80076e2:	2201      	movs	r2, #1
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f927 	bl	800793a <USBD_CtlSendData>
        break;
 80076ec:	e00c      	b.n	8007708 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3304      	adds	r3, #4
 80076f2:	2201      	movs	r2, #1
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f91f 	bl	800793a <USBD_CtlSendData>
        break;
 80076fc:	e004      	b.n	8007708 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8a9 	bl	8007858 <USBD_CtlError>
        break;
 8007706:	bf00      	nop
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007720:	b2db      	uxtb	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	2b02      	cmp	r3, #2
 8007726:	d81e      	bhi.n	8007766 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	88db      	ldrh	r3, [r3, #6]
 800772c:	2b02      	cmp	r3, #2
 800772e:	d004      	beq.n	800773a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f890 	bl	8007858 <USBD_CtlError>
        break;
 8007738:	e01a      	b.n	8007770 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007746:	2b00      	cmp	r3, #0
 8007748:	d005      	beq.n	8007756 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f043 0202 	orr.w	r2, r3, #2
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	330c      	adds	r3, #12
 800775a:	2202      	movs	r2, #2
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f8eb 	bl	800793a <USBD_CtlSendData>
      break;
 8007764:	e004      	b.n	8007770 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f875 	bl	8007858 <USBD_CtlError>
      break;
 800776e:	bf00      	nop
  }
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	885b      	ldrh	r3, [r3, #2]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d106      	bne.n	8007798 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f92b 	bl	80079ee <USBD_CtlSendStatus>
  }
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d80b      	bhi.n	80077d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	885b      	ldrh	r3, [r3, #2]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d10c      	bne.n	80077da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f910 	bl	80079ee <USBD_CtlSendStatus>
      }
      break;
 80077ce:	e004      	b.n	80077da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f840 	bl	8007858 <USBD_CtlError>
      break;
 80077d8:	e000      	b.n	80077dc <USBD_ClrFeature+0x3c>
      break;
 80077da:	bf00      	nop
  }
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	781a      	ldrb	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3301      	adds	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	781a      	ldrb	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff fabb 	bl	8006d8a <SWAPBYTE>
 8007814:	4603      	mov	r3, r0
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3301      	adds	r3, #1
 8007826:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff faae 	bl	8006d8a <SWAPBYTE>
 800782e:	4603      	mov	r3, r0
 8007830:	461a      	mov	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3301      	adds	r3, #1
 800783a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f7ff faa1 	bl	8006d8a <SWAPBYTE>
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	80da      	strh	r2, [r3, #6]
}
 8007850:	bf00      	nop
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007862:	2180      	movs	r1, #128	; 0x80
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fce7 	bl	8008238 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800786a:	2100      	movs	r1, #0
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fce3 	bl	8008238 <USBD_LL_StallEP>
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b086      	sub	sp, #24
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d036      	beq.n	80078fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007894:	6938      	ldr	r0, [r7, #16]
 8007896:	f000 f836 	bl	8007906 <USBD_GetLen>
 800789a:	4603      	mov	r3, r0
 800789c:	3301      	adds	r3, #1
 800789e:	b29b      	uxth	r3, r3
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	4413      	add	r3, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	7812      	ldrb	r2, [r2, #0]
 80078b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	3301      	adds	r3, #1
 80078b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	4413      	add	r3, r2
 80078c0:	2203      	movs	r2, #3
 80078c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	3301      	adds	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80078ca:	e013      	b.n	80078f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	4413      	add	r3, r2
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	7812      	ldrb	r2, [r2, #0]
 80078d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	3301      	adds	r3, #1
 80078dc:	613b      	str	r3, [r7, #16]
    idx++;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
 80078e0:	3301      	adds	r3, #1
 80078e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	4413      	add	r3, r2
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
    idx++;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	3301      	adds	r3, #1
 80078f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e7      	bne.n	80078cc <USBD_GetString+0x52>
 80078fc:	e000      	b.n	8007900 <USBD_GetString+0x86>
    return;
 80078fe:	bf00      	nop
  }
}
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007906:	b480      	push	{r7}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007916:	e005      	b.n	8007924 <USBD_GetLen+0x1e>
  {
    len++;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	3301      	adds	r3, #1
 800791c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	3301      	adds	r3, #1
 8007922:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f5      	bne.n	8007918 <USBD_GetLen+0x12>
  }

  return len;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2202      	movs	r2, #2
 800794a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	2100      	movs	r1, #0
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fcf2 	bl	800834a <USBD_LL_Transmit>

  return USBD_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	2100      	movs	r1, #0
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fce1 	bl	800834a <USBD_LL_Transmit>

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2203      	movs	r2, #3
 80079a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	2100      	movs	r1, #0
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fce5 	bl	800838c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	2100      	movs	r1, #0
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fcd4 	bl	800838c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2204      	movs	r2, #4
 80079fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80079fe:	2300      	movs	r3, #0
 8007a00:	2200      	movs	r2, #0
 8007a02:	2100      	movs	r1, #0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fca0 	bl	800834a <USBD_LL_Transmit>

  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2205      	movs	r2, #5
 8007a20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a24:	2300      	movs	r3, #0
 8007a26:	2200      	movs	r2, #0
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fcae 	bl	800838c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a40:	2200      	movs	r2, #0
 8007a42:	4912      	ldr	r1, [pc, #72]	; (8007a8c <MX_USB_DEVICE_Init+0x50>)
 8007a44:	4812      	ldr	r0, [pc, #72]	; (8007a90 <MX_USB_DEVICE_Init+0x54>)
 8007a46:	f7fe fe8f 	bl	8006768 <USBD_Init>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a50:	f7f8 fee4 	bl	800081c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a54:	490f      	ldr	r1, [pc, #60]	; (8007a94 <MX_USB_DEVICE_Init+0x58>)
 8007a56:	480e      	ldr	r0, [pc, #56]	; (8007a90 <MX_USB_DEVICE_Init+0x54>)
 8007a58:	f7fe feb6 	bl	80067c8 <USBD_RegisterClass>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a62:	f7f8 fedb 	bl	800081c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a66:	490c      	ldr	r1, [pc, #48]	; (8007a98 <MX_USB_DEVICE_Init+0x5c>)
 8007a68:	4809      	ldr	r0, [pc, #36]	; (8007a90 <MX_USB_DEVICE_Init+0x54>)
 8007a6a:	f7fe fdd7 	bl	800661c <USBD_CDC_RegisterInterface>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a74:	f7f8 fed2 	bl	800081c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a78:	4805      	ldr	r0, [pc, #20]	; (8007a90 <MX_USB_DEVICE_Init+0x54>)
 8007a7a:	f7fe fecc 	bl	8006816 <USBD_Start>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a84:	f7f8 feca 	bl	800081c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a88:	bf00      	nop
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20000140 	.word	0x20000140
 8007a90:	20000480 	.word	0x20000480
 8007a94:	20000028 	.word	0x20000028
 8007a98:	2000012c 	.word	0x2000012c

08007a9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4905      	ldr	r1, [pc, #20]	; (8007ab8 <CDC_Init_FS+0x1c>)
 8007aa4:	4805      	ldr	r0, [pc, #20]	; (8007abc <CDC_Init_FS+0x20>)
 8007aa6:	f7fe fdce 	bl	8006646 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007aaa:	4905      	ldr	r1, [pc, #20]	; (8007ac0 <CDC_Init_FS+0x24>)
 8007aac:	4803      	ldr	r0, [pc, #12]	; (8007abc <CDC_Init_FS+0x20>)
 8007aae:	f7fe fde8 	bl	8006682 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ab2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000f50 	.word	0x20000f50
 8007abc:	20000480 	.word	0x20000480
 8007ac0:	20000750 	.word	0x20000750

08007ac4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ac8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	71fb      	strb	r3, [r7, #7]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	2b23      	cmp	r3, #35	; 0x23
 8007ae8:	d84a      	bhi.n	8007b80 <CDC_Control_FS+0xac>
 8007aea:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <CDC_Control_FS+0x1c>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b81 	.word	0x08007b81
 8007af4:	08007b81 	.word	0x08007b81
 8007af8:	08007b81 	.word	0x08007b81
 8007afc:	08007b81 	.word	0x08007b81
 8007b00:	08007b81 	.word	0x08007b81
 8007b04:	08007b81 	.word	0x08007b81
 8007b08:	08007b81 	.word	0x08007b81
 8007b0c:	08007b81 	.word	0x08007b81
 8007b10:	08007b81 	.word	0x08007b81
 8007b14:	08007b81 	.word	0x08007b81
 8007b18:	08007b81 	.word	0x08007b81
 8007b1c:	08007b81 	.word	0x08007b81
 8007b20:	08007b81 	.word	0x08007b81
 8007b24:	08007b81 	.word	0x08007b81
 8007b28:	08007b81 	.word	0x08007b81
 8007b2c:	08007b81 	.word	0x08007b81
 8007b30:	08007b81 	.word	0x08007b81
 8007b34:	08007b81 	.word	0x08007b81
 8007b38:	08007b81 	.word	0x08007b81
 8007b3c:	08007b81 	.word	0x08007b81
 8007b40:	08007b81 	.word	0x08007b81
 8007b44:	08007b81 	.word	0x08007b81
 8007b48:	08007b81 	.word	0x08007b81
 8007b4c:	08007b81 	.word	0x08007b81
 8007b50:	08007b81 	.word	0x08007b81
 8007b54:	08007b81 	.word	0x08007b81
 8007b58:	08007b81 	.word	0x08007b81
 8007b5c:	08007b81 	.word	0x08007b81
 8007b60:	08007b81 	.word	0x08007b81
 8007b64:	08007b81 	.word	0x08007b81
 8007b68:	08007b81 	.word	0x08007b81
 8007b6c:	08007b81 	.word	0x08007b81
 8007b70:	08007b81 	.word	0x08007b81
 8007b74:	08007b81 	.word	0x08007b81
 8007b78:	08007b81 	.word	0x08007b81
 8007b7c:	08007b81 	.word	0x08007b81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b80:	bf00      	nop
  }

  return (USBD_OK);
 8007b82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Transmit_FS(Buf,*Len);//添加数据原样返回
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f80e 	bl	8007bc4 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <CDC_Receive_FS+0x30>)
 8007bac:	f7fe fd69 	bl	8006682 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007bb0:	4803      	ldr	r0, [pc, #12]	; (8007bc0 <CDC_Receive_FS+0x30>)
 8007bb2:	f7fe fdaf 	bl	8006714 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007bb6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20000480 	.word	0x20000480

08007bc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007bd4:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <CDC_Transmit_FS+0x48>)
 8007bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e00b      	b.n	8007c02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007bea:	887b      	ldrh	r3, [r7, #2]
 8007bec:	461a      	mov	r2, r3
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4806      	ldr	r0, [pc, #24]	; (8007c0c <CDC_Transmit_FS+0x48>)
 8007bf2:	f7fe fd28 	bl	8006646 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007bf6:	4805      	ldr	r0, [pc, #20]	; (8007c0c <CDC_Transmit_FS+0x48>)
 8007bf8:	f7fe fd5c 	bl	80066b4 <USBD_CDC_TransmitPacket>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000480 	.word	0x20000480

08007c10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
	...

08007c34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2212      	movs	r2, #18
 8007c44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c46:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	2000015c 	.word	0x2000015c

08007c58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	6039      	str	r1, [r7, #0]
 8007c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2204      	movs	r2, #4
 8007c68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c6a:	4b03      	ldr	r3, [pc, #12]	; (8007c78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20000170 	.word	0x20000170

08007c7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	6039      	str	r1, [r7, #0]
 8007c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d105      	bne.n	8007c9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	4907      	ldr	r1, [pc, #28]	; (8007cb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c92:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c94:	f7ff fdf1 	bl	800787a <USBD_GetString>
 8007c98:	e004      	b.n	8007ca4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	4904      	ldr	r1, [pc, #16]	; (8007cb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c9e:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ca0:	f7ff fdeb 	bl	800787a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca4:	4b02      	ldr	r3, [pc, #8]	; (8007cb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20001750 	.word	0x20001750
 8007cb4:	08008648 	.word	0x08008648

08007cb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6039      	str	r1, [r7, #0]
 8007cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	4904      	ldr	r1, [pc, #16]	; (8007cd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007cc8:	4804      	ldr	r0, [pc, #16]	; (8007cdc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cca:	f7ff fdd6 	bl	800787a <USBD_GetString>
  return USBD_StrDesc;
 8007cce:	4b02      	ldr	r3, [pc, #8]	; (8007cd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20001750 	.word	0x20001750
 8007cdc:	08008660 	.word	0x08008660

08007ce0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	6039      	str	r1, [r7, #0]
 8007cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	221a      	movs	r2, #26
 8007cf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cf2:	f000 f843 	bl	8007d7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cf6:	4b02      	ldr	r3, [pc, #8]	; (8007d00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20000174 	.word	0x20000174

08007d04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	6039      	str	r1, [r7, #0]
 8007d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d105      	bne.n	8007d22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	4907      	ldr	r1, [pc, #28]	; (8007d38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d1a:	4808      	ldr	r0, [pc, #32]	; (8007d3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d1c:	f7ff fdad 	bl	800787a <USBD_GetString>
 8007d20:	e004      	b.n	8007d2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	4904      	ldr	r1, [pc, #16]	; (8007d38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d26:	4805      	ldr	r0, [pc, #20]	; (8007d3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d28:	f7ff fda7 	bl	800787a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d2c:	4b02      	ldr	r3, [pc, #8]	; (8007d38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20001750 	.word	0x20001750
 8007d3c:	08008674 	.word	0x08008674

08007d40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	6039      	str	r1, [r7, #0]
 8007d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d105      	bne.n	8007d5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	4907      	ldr	r1, [pc, #28]	; (8007d74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d56:	4808      	ldr	r0, [pc, #32]	; (8007d78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d58:	f7ff fd8f 	bl	800787a <USBD_GetString>
 8007d5c:	e004      	b.n	8007d68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	4904      	ldr	r1, [pc, #16]	; (8007d74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d62:	4805      	ldr	r0, [pc, #20]	; (8007d78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d64:	f7ff fd89 	bl	800787a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d68:	4b02      	ldr	r3, [pc, #8]	; (8007d74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20001750 	.word	0x20001750
 8007d78:	08008680 	.word	0x08008680

08007d7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d82:	4b0f      	ldr	r3, [pc, #60]	; (8007dc0 <Get_SerialNum+0x44>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d88:	4b0e      	ldr	r3, [pc, #56]	; (8007dc4 <Get_SerialNum+0x48>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d8e:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <Get_SerialNum+0x4c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4413      	add	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007da2:	2208      	movs	r2, #8
 8007da4:	4909      	ldr	r1, [pc, #36]	; (8007dcc <Get_SerialNum+0x50>)
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 f814 	bl	8007dd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007dac:	2204      	movs	r2, #4
 8007dae:	4908      	ldr	r1, [pc, #32]	; (8007dd0 <Get_SerialNum+0x54>)
 8007db0:	68b8      	ldr	r0, [r7, #8]
 8007db2:	f000 f80f 	bl	8007dd4 <IntToUnicode>
  }
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	1fff7a10 	.word	0x1fff7a10
 8007dc4:	1fff7a14 	.word	0x1fff7a14
 8007dc8:	1fff7a18 	.word	0x1fff7a18
 8007dcc:	20000176 	.word	0x20000176
 8007dd0:	20000186 	.word	0x20000186

08007dd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]
 8007dea:	e027      	b.n	8007e3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	0f1b      	lsrs	r3, r3, #28
 8007df0:	2b09      	cmp	r3, #9
 8007df2:	d80b      	bhi.n	8007e0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	0f1b      	lsrs	r3, r3, #28
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	4619      	mov	r1, r3
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	440b      	add	r3, r1
 8007e04:	3230      	adds	r2, #48	; 0x30
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	e00a      	b.n	8007e22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	0f1b      	lsrs	r3, r3, #28
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	4619      	mov	r1, r3
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	440b      	add	r3, r1
 8007e1c:	3237      	adds	r2, #55	; 0x37
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	4413      	add	r3, r2
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	75fb      	strb	r3, [r7, #23]
 8007e3c:	7dfa      	ldrb	r2, [r7, #23]
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d3d3      	bcc.n	8007dec <IntToUnicode+0x18>
  }
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08a      	sub	sp, #40	; 0x28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e5c:	f107 0314 	add.w	r3, r7, #20
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	609a      	str	r2, [r3, #8]
 8007e68:	60da      	str	r2, [r3, #12]
 8007e6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e74:	d13a      	bne.n	8007eec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e76:	2300      	movs	r3, #0
 8007e78:	613b      	str	r3, [r7, #16]
 8007e7a:	4b1e      	ldr	r3, [pc, #120]	; (8007ef4 <HAL_PCD_MspInit+0xa0>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	4a1d      	ldr	r2, [pc, #116]	; (8007ef4 <HAL_PCD_MspInit+0xa0>)
 8007e80:	f043 0301 	orr.w	r3, r3, #1
 8007e84:	6313      	str	r3, [r2, #48]	; 0x30
 8007e86:	4b1b      	ldr	r3, [pc, #108]	; (8007ef4 <HAL_PCD_MspInit+0xa0>)
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	613b      	str	r3, [r7, #16]
 8007e90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007e92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e98:	2302      	movs	r3, #2
 8007e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ea4:	230a      	movs	r3, #10
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ea8:	f107 0314 	add.w	r3, r7, #20
 8007eac:	4619      	mov	r1, r3
 8007eae:	4812      	ldr	r0, [pc, #72]	; (8007ef8 <HAL_PCD_MspInit+0xa4>)
 8007eb0:	f7f9 f888 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007eb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <HAL_PCD_MspInit+0xa0>)
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb8:	4a0e      	ldr	r2, [pc, #56]	; (8007ef4 <HAL_PCD_MspInit+0xa0>)
 8007eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebe:	6353      	str	r3, [r2, #52]	; 0x34
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <HAL_PCD_MspInit+0xa0>)
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec8:	4a0a      	ldr	r2, [pc, #40]	; (8007ef4 <HAL_PCD_MspInit+0xa0>)
 8007eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ece:	6453      	str	r3, [r2, #68]	; 0x44
 8007ed0:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <HAL_PCD_MspInit+0xa0>)
 8007ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007edc:	2200      	movs	r2, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	2043      	movs	r0, #67	; 0x43
 8007ee2:	f7f8 ff8d 	bl	8000e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ee6:	2043      	movs	r0, #67	; 0x43
 8007ee8:	f7f8 ffb6 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007eec:	bf00      	nop
 8007eee:	3728      	adds	r7, #40	; 0x28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	40020000 	.word	0x40020000

08007efc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f7fe fcca 	bl	80068ac <USBD_LL_SetupStage>
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	00db      	lsls	r3, r3, #3
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	440b      	add	r3, r1
 8007f40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	78fb      	ldrb	r3, [r7, #3]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	f7fe fd04 	bl	8006956 <USBD_LL_DataOutStage>
}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	3348      	adds	r3, #72	; 0x48
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	f7fe fd4d 	bl	8006a1c <USBD_LL_DataInStage>
}
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe fe61 	bl	8006c60 <USBD_LL_SOF>
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
 8007fbe:	e008      	b.n	8007fd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d102      	bne.n	8007fce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	73fb      	strb	r3, [r7, #15]
 8007fcc:	e001      	b.n	8007fd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007fce:	f7f8 fc25 	bl	800081c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fd8:	7bfa      	ldrb	r2, [r7, #15]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fe01 	bl	8006be4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fdad 	bl	8006b48 <USBD_LL_Reset>
}
 8007fee:	bf00      	nop
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe fdfc 	bl	8006c04 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <HAL_PCD_SuspendCallback+0x48>)
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	4a03      	ldr	r2, [pc, #12]	; (8008040 <HAL_PCD_SuspendCallback+0x48>)
 8008032:	f043 0306 	orr.w	r3, r3, #6
 8008036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008038:	bf00      	nop
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	e000ed00 	.word	0xe000ed00

08008044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fdec 	bl	8006c30 <USBD_LL_Resume>
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	4611      	mov	r1, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fe3a 	bl	8006cf0 <USBD_LL_IsoOUTIncomplete>
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe fe02 	bl	8006ca4 <USBD_LL_IsoINIncomplete>
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fe40 	bl	8006d3c <USBD_LL_DevConnected>
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fe3d 	bl	8006d52 <USBD_LL_DevDisconnected>
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d13c      	bne.n	800816a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80080f0:	4a20      	ldr	r2, [pc, #128]	; (8008174 <USBD_LL_Init+0x94>)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a1e      	ldr	r2, [pc, #120]	; (8008174 <USBD_LL_Init+0x94>)
 80080fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008100:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <USBD_LL_Init+0x94>)
 8008102:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008108:	4b1a      	ldr	r3, [pc, #104]	; (8008174 <USBD_LL_Init+0x94>)
 800810a:	2204      	movs	r2, #4
 800810c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800810e:	4b19      	ldr	r3, [pc, #100]	; (8008174 <USBD_LL_Init+0x94>)
 8008110:	2202      	movs	r2, #2
 8008112:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008114:	4b17      	ldr	r3, [pc, #92]	; (8008174 <USBD_LL_Init+0x94>)
 8008116:	2200      	movs	r2, #0
 8008118:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800811a:	4b16      	ldr	r3, [pc, #88]	; (8008174 <USBD_LL_Init+0x94>)
 800811c:	2202      	movs	r2, #2
 800811e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008120:	4b14      	ldr	r3, [pc, #80]	; (8008174 <USBD_LL_Init+0x94>)
 8008122:	2200      	movs	r2, #0
 8008124:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008126:	4b13      	ldr	r3, [pc, #76]	; (8008174 <USBD_LL_Init+0x94>)
 8008128:	2200      	movs	r2, #0
 800812a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800812c:	4b11      	ldr	r3, [pc, #68]	; (8008174 <USBD_LL_Init+0x94>)
 800812e:	2200      	movs	r2, #0
 8008130:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008132:	4b10      	ldr	r3, [pc, #64]	; (8008174 <USBD_LL_Init+0x94>)
 8008134:	2200      	movs	r2, #0
 8008136:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008138:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <USBD_LL_Init+0x94>)
 800813a:	2200      	movs	r2, #0
 800813c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800813e:	480d      	ldr	r0, [pc, #52]	; (8008174 <USBD_LL_Init+0x94>)
 8008140:	f7f9 fc84 	bl	8001a4c <HAL_PCD_Init>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800814a:	f7f8 fb67 	bl	800081c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800814e:	2180      	movs	r1, #128	; 0x80
 8008150:	4808      	ldr	r0, [pc, #32]	; (8008174 <USBD_LL_Init+0x94>)
 8008152:	f7fa fdf4 	bl	8002d3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008156:	2240      	movs	r2, #64	; 0x40
 8008158:	2100      	movs	r1, #0
 800815a:	4806      	ldr	r0, [pc, #24]	; (8008174 <USBD_LL_Init+0x94>)
 800815c:	f7fa fda8 	bl	8002cb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008160:	2280      	movs	r2, #128	; 0x80
 8008162:	2101      	movs	r1, #1
 8008164:	4803      	ldr	r0, [pc, #12]	; (8008174 <USBD_LL_Init+0x94>)
 8008166:	f7fa fda3 	bl	8002cb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20001950 	.word	0x20001950

08008178 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800818e:	4618      	mov	r0, r3
 8008190:	f7f9 fd8c 	bl	8001cac <HAL_PCD_Start>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f942 	bl	8008424 <USBD_Get_USB_Status>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	4608      	mov	r0, r1
 80081b8:	4611      	mov	r1, r2
 80081ba:	461a      	mov	r2, r3
 80081bc:	4603      	mov	r3, r0
 80081be:	70fb      	strb	r3, [r7, #3]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70bb      	strb	r3, [r7, #2]
 80081c4:	4613      	mov	r3, r2
 80081c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081d6:	78bb      	ldrb	r3, [r7, #2]
 80081d8:	883a      	ldrh	r2, [r7, #0]
 80081da:	78f9      	ldrb	r1, [r7, #3]
 80081dc:	f7fa f970 	bl	80024c0 <HAL_PCD_EP_Open>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f91c 	bl	8008424 <USBD_Get_USB_Status>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008214:	78fa      	ldrb	r2, [r7, #3]
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f7fa f9b9 	bl	8002590 <HAL_PCD_EP_Close>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f8fd 	bl	8008424 <USBD_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800822e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f7fa fa91 	bl	800277e <HAL_PCD_EP_SetStall>
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f8de 	bl	8008424 <USBD_Get_USB_Status>
 8008268:	4603      	mov	r3, r0
 800826a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800826c:	7bbb      	ldrb	r3, [r7, #14]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008290:	78fa      	ldrb	r2, [r7, #3]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f7fa fad6 	bl	8002846 <HAL_PCD_EP_ClrStall>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f8bf 	bl	8008424 <USBD_Get_USB_Status>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	da0b      	bge.n	80082e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	4613      	mov	r3, r2
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	1a9b      	subs	r3, r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	440b      	add	r3, r1
 80082e2:	333e      	adds	r3, #62	; 0x3e
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	e00b      	b.n	8008300 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	4613      	mov	r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	1a9b      	subs	r3, r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80082fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008326:	78fa      	ldrb	r2, [r7, #3]
 8008328:	4611      	mov	r1, r2
 800832a:	4618      	mov	r0, r3
 800832c:	f7fa f8a3 	bl	8002476 <HAL_PCD_SetAddress>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 f874 	bl	8008424 <USBD_Get_USB_Status>
 800833c:	4603      	mov	r3, r0
 800833e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008340:	7bbb      	ldrb	r3, [r7, #14]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
 8008356:	460b      	mov	r3, r1
 8008358:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008368:	7af9      	ldrb	r1, [r7, #11]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	f7fa f9bc 	bl	80026ea <HAL_PCD_EP_Transmit>
 8008372:	4603      	mov	r3, r0
 8008374:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	4618      	mov	r0, r3
 800837a:	f000 f853 	bl	8008424 <USBD_Get_USB_Status>
 800837e:	4603      	mov	r3, r0
 8008380:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008382:	7dbb      	ldrb	r3, [r7, #22]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	460b      	mov	r3, r1
 800839a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083aa:	7af9      	ldrb	r1, [r7, #11]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	f7fa f938 	bl	8002624 <HAL_PCD_EP_Receive>
 80083b4:	4603      	mov	r3, r0
 80083b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 f832 	bl	8008424 <USBD_Get_USB_Status>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	460b      	mov	r3, r1
 80083d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083e0:	78fa      	ldrb	r2, [r7, #3]
 80083e2:	4611      	mov	r1, r2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fa f968 	bl	80026ba <HAL_PCD_EP_GetRxCount>
 80083ea:	4603      	mov	r3, r0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80083fc:	4b03      	ldr	r3, [pc, #12]	; (800840c <USBD_static_malloc+0x18>)
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	200001b0 	.word	0x200001b0

08008410 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]

}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	2b03      	cmp	r3, #3
 8008436:	d817      	bhi.n	8008468 <USBD_Get_USB_Status+0x44>
 8008438:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <USBD_Get_USB_Status+0x1c>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	08008451 	.word	0x08008451
 8008444:	08008457 	.word	0x08008457
 8008448:	0800845d 	.word	0x0800845d
 800844c:	08008463 	.word	0x08008463
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
    break;
 8008454:	e00b      	b.n	800846e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008456:	2303      	movs	r3, #3
 8008458:	73fb      	strb	r3, [r7, #15]
    break;
 800845a:	e008      	b.n	800846e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
    break;
 8008460:	e005      	b.n	800846e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008462:	2303      	movs	r3, #3
 8008464:	73fb      	strb	r3, [r7, #15]
    break;
 8008466:	e002      	b.n	800846e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008468:	2303      	movs	r3, #3
 800846a:	73fb      	strb	r3, [r7, #15]
    break;
 800846c:	bf00      	nop
  }
  return usb_status;
 800846e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	4d0d      	ldr	r5, [pc, #52]	; (80084b4 <__libc_init_array+0x38>)
 8008480:	4c0d      	ldr	r4, [pc, #52]	; (80084b8 <__libc_init_array+0x3c>)
 8008482:	1b64      	subs	r4, r4, r5
 8008484:	10a4      	asrs	r4, r4, #2
 8008486:	2600      	movs	r6, #0
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	4d0b      	ldr	r5, [pc, #44]	; (80084bc <__libc_init_array+0x40>)
 800848e:	4c0c      	ldr	r4, [pc, #48]	; (80084c0 <__libc_init_array+0x44>)
 8008490:	f000 f820 	bl	80084d4 <_init>
 8008494:	1b64      	subs	r4, r4, r5
 8008496:	10a4      	asrs	r4, r4, #2
 8008498:	2600      	movs	r6, #0
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	080086b0 	.word	0x080086b0
 80084b8:	080086b0 	.word	0x080086b0
 80084bc:	080086b0 	.word	0x080086b0
 80084c0:	080086b4 	.word	0x080086b4

080084c4 <memset>:
 80084c4:	4402      	add	r2, r0
 80084c6:	4603      	mov	r3, r0
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d100      	bne.n	80084ce <memset+0xa>
 80084cc:	4770      	bx	lr
 80084ce:	f803 1b01 	strb.w	r1, [r3], #1
 80084d2:	e7f9      	b.n	80084c8 <memset+0x4>

080084d4 <_init>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	bf00      	nop
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr

080084e0 <_fini>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	bf00      	nop
 80084e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e6:	bc08      	pop	{r3}
 80084e8:	469e      	mov	lr, r3
 80084ea:	4770      	bx	lr
