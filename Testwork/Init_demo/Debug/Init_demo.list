
Init_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007250  08007250  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007258  08007258  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08007260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          00001b70  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001cf4  20001cf4  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160ca  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032db  00000000  00000000  0003627e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00039560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc0  00000000  00000000  0003a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236dd  00000000  00000000  0003b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e8e  00000000  00000000  0005e6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c66cd  00000000  00000000  0007258b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138c58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003884  00000000  00000000  00138cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070b8 	.word	0x080070b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	080070b8 	.word	0x080070b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a31      	ldr	r2, [pc, #196]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004e0:	f043 0320 	orr.w	r3, r3, #32
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0320 	and.w	r3, r3, #32
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a2a      	ldr	r2, [pc, #168]	; (80005a4 <MX_GPIO_Init+0xe4>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a23      	ldr	r2, [pc, #140]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <MX_GPIO_Init+0xe4>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_GPIO_Init+0xe4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0310 	and.w	r3, r3, #16
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054c:	4816      	ldr	r0, [pc, #88]	; (80005a8 <MX_GPIO_Init+0xe8>)
 800054e:	f000 fed1 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	480f      	ldr	r0, [pc, #60]	; (80005a8 <MX_GPIO_Init+0xe8>)
 800056c:	f000 fbbc 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000570:	2302      	movs	r3, #2
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000574:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800057a:	2301      	movs	r3, #1
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <MX_GPIO_Init+0xec>)
 8000586:	f000 fbaf 	bl	8000ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2101      	movs	r1, #1
 800058e:	2007      	movs	r0, #7
 8000590:	f000 fb5a 	bl	8000c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000594:	2007      	movs	r0, #7
 8000596:	f000 fb83 	bl	8000ca0 <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40021000 	.word	0x40021000

080005b0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C2_Init+0x50>)
 80005b6:	4a13      	ldr	r2, [pc, #76]	; (8000604 <MX_I2C2_Init+0x54>)
 80005b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C2_Init+0x50>)
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <MX_I2C2_Init+0x58>)
 80005be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C2_Init+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_I2C2_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_I2C2_Init+0x50>)
 80005ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_I2C2_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_I2C2_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_I2C2_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_I2C2_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_I2C2_Init+0x50>)
 80005ee:	f000 fef3 	bl	80013d8 <HAL_I2C_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80005f8:	f000 f8ca 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200003c4 	.word	0x200003c4
 8000604:	40005800 	.word	0x40005800
 8000608:	000186a0 	.word	0x000186a0

0800060c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a19      	ldr	r2, [pc, #100]	; (8000690 <HAL_I2C_MspInit+0x84>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d12b      	bne.n	8000686 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800064a:	2303      	movs	r3, #3
 800064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800064e:	2312      	movs	r3, #18
 8000650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800065a:	2304      	movs	r3, #4
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <HAL_I2C_MspInit+0x8c>)
 8000666:	f000 fb3f 	bl	8000ce8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_I2C_MspInit+0x88>)
 8000674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_I2C_MspInit+0x88>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40005800 	.word	0x40005800
 8000694:	40023800 	.word	0x40023800
 8000698:	40021400 	.word	0x40021400

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 f94c 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f808 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f7ff ff0a 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80006ac:	f7ff ff80 	bl	80005b0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80006b0:	f005 ffb6 	bl	8006620 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x18>
	...

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 fcee 	bl	80070a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <SystemClock_Config+0xd0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a28      	ldr	r2, [pc, #160]	; (8000788 <SystemClock_Config+0xd0>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xd4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemClock_Config+0xd4>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000714:	2303      	movs	r3, #3
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071e:	2301      	movs	r3, #1
 8000720:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	2310      	movs	r3, #16
 8000724:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000734:	2348      	movs	r3, #72	; 0x48
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800073c:	2303      	movs	r3, #3
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f9a9 	bl	8002a9c <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000750:	f000 f81e 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fcbc 	bl	80030ec <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800077a:	f000 f809 	bl	8000790 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079c:	f000 f940 	bl	8000a20 <HAL_Delay>
	  CDC_Transmit_FS(buff,sizeof(buff));
 80007a0:	2104      	movs	r1, #4
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <Error_Handler+0x1c>)
 80007a4:	f006 f800 	bl	80067a8 <CDC_Transmit_FS>
  {
 80007a8:	e7f6      	b.n	8000798 <Error_Handler+0x8>
 80007aa:	bf00      	nop
 80007ac:	20000000 	.word	0x20000000

080007b0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f8bc 	bl	80009e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000870:	2002      	movs	r0, #2
 8000872:	f000 fd99 	bl	80013a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <OTG_FS_IRQHandler+0x10>)
 8000882:	f001 f8d8 	bl	8001a36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200018ec 	.word	0x200018ec

08000890 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]

        if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 0)
 800089a:	2102      	movs	r1, #2
 800089c:	4807      	ldr	r0, [pc, #28]	; (80008bc <HAL_GPIO_EXTI_Callback+0x2c>)
 800089e:	f000 fd03 	bl	80012a8 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d104      	bne.n	80008b2 <HAL_GPIO_EXTI_Callback+0x22>
        {
            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 80008a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x30>)
 80008ae:	f000 fd53 	bl	8001358 <HAL_GPIO_TogglePin>
        }

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40020000 	.word	0x40020000

080008c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000920 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ee:	490e      	ldr	r1, [pc, #56]	; (8000928 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000904:	4c0b      	ldr	r4, [pc, #44]	; (8000934 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000912:	f7ff ffd7 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000916:	f006 fba3 	bl	8007060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091a:	f7ff febf 	bl	800069c <main>
  bx  lr    
 800091e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800092c:	08007260 	.word	0x08007260
  ldr r2, =_sbss
 8000930:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000934:	20001cf4 	.word	0x20001cf4

08000938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC_IRQHandler>
	...

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0d      	ldr	r2, [pc, #52]	; (800097c <HAL_Init+0x40>)
 8000946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_Init+0x40>)
 8000952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_Init+0x40>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_Init+0x40>)
 800095e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 f94f 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f808 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000970:	f7ff ff2a 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023c00 	.word	0x40023c00

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_InitTick+0x54>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_InitTick+0x58>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000996:	fbb3 f3f1 	udiv	r3, r3, r1
 800099a:	fbb2 f3f3 	udiv	r3, r2, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f996 	bl	8000cd0 <HAL_SYSTICK_Config>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00e      	b.n	80009cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d80a      	bhi.n	80009ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f000 f944 	bl	8000c48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c0:	4a06      	ldr	r2, [pc, #24]	; (80009dc <HAL_InitTick+0x5c>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e000      	b.n	80009cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000004 	.word	0x20000004
 80009d8:	2000000c 	.word	0x2000000c
 80009dc:	20000008 	.word	0x20000008

080009e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x20>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_IncTick+0x24>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_IncTick+0x24>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000000c 	.word	0x2000000c
 8000a04:	20000418 	.word	0x20000418

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_GetTick+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000418 	.word	0x20000418

08000a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a28:	f7ff ffee 	bl	8000a08 <HAL_GetTick>
 8000a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d005      	beq.n	8000a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_Delay+0x44>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a46:	bf00      	nop
 8000a48:	f7ff ffde 	bl	8000a08 <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8f7      	bhi.n	8000a48 <HAL_Delay+0x28>
  {
  }
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000000c 	.word	0x2000000c

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4907      	ldr	r1, [pc, #28]	; (8000b04 <__NVIC_EnableIRQ+0x38>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd4:	d301      	bcc.n	8000bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00f      	b.n	8000bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <SysTick_Config+0x40>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be2:	210f      	movs	r1, #15
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f7ff ff8e 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <SysTick_Config+0x40>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SysTick_Config+0x40>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	d00f      	beq.n	8000c36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b06      	cmp	r3, #6
 8000c1a:	d00c      	beq.n	8000c36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b05      	cmp	r3, #5
 8000c20:	d009      	beq.n	8000c36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d006      	beq.n	8000c36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d003      	beq.n	8000c36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c2e:	2192      	movs	r1, #146	; 0x92
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c32:	f7ff fdbd 	bl	80007b0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff16 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	080070d0 	.word	0x080070d0

08000c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d903      	bls.n	8000c68 <HAL_NVIC_SetPriority+0x20>
 8000c60:	21aa      	movs	r1, #170	; 0xaa
 8000c62:	480e      	ldr	r0, [pc, #56]	; (8000c9c <HAL_NVIC_SetPriority+0x54>)
 8000c64:	f7ff fda4 	bl	80007b0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	d903      	bls.n	8000c76 <HAL_NVIC_SetPriority+0x2e>
 8000c6e:	21ab      	movs	r1, #171	; 0xab
 8000c70:	480a      	ldr	r0, [pc, #40]	; (8000c9c <HAL_NVIC_SetPriority+0x54>)
 8000c72:	f7ff fd9d 	bl	80007b0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c76:	f7ff ff1b 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000c7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	6978      	ldr	r0, [r7, #20]
 8000c82:	f7ff ff6b 	bl	8000b5c <NVIC_EncodePriority>
 8000c86:	4602      	mov	r2, r0
 8000c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff3a 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	080070d0 	.word	0x080070d0

08000ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	da03      	bge.n	8000cba <HAL_NVIC_EnableIRQ+0x1a>
 8000cb2:	21be      	movs	r1, #190	; 0xbe
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_NVIC_EnableIRQ+0x2c>)
 8000cb6:	f7ff fd7b 	bl	80007b0 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff04 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	080070d0 	.word	0x080070d0

08000cd0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff73 	bl	8000bc4 <SysTick_Config>
 8000cde:	4603      	mov	r3, r0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a39      	ldr	r2, [pc, #228]	; (8000de8 <HAL_GPIO_Init+0x100>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d023      	beq.n	8000d4e <HAL_GPIO_Init+0x66>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a38      	ldr	r2, [pc, #224]	; (8000dec <HAL_GPIO_Init+0x104>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d01f      	beq.n	8000d4e <HAL_GPIO_Init+0x66>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a37      	ldr	r2, [pc, #220]	; (8000df0 <HAL_GPIO_Init+0x108>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d01b      	beq.n	8000d4e <HAL_GPIO_Init+0x66>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a36      	ldr	r2, [pc, #216]	; (8000df4 <HAL_GPIO_Init+0x10c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d017      	beq.n	8000d4e <HAL_GPIO_Init+0x66>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a35      	ldr	r2, [pc, #212]	; (8000df8 <HAL_GPIO_Init+0x110>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d013      	beq.n	8000d4e <HAL_GPIO_Init+0x66>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <HAL_GPIO_Init+0x114>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d00f      	beq.n	8000d4e <HAL_GPIO_Init+0x66>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a33      	ldr	r2, [pc, #204]	; (8000e00 <HAL_GPIO_Init+0x118>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00b      	beq.n	8000d4e <HAL_GPIO_Init+0x66>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <HAL_GPIO_Init+0x11c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d007      	beq.n	8000d4e <HAL_GPIO_Init+0x66>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <HAL_GPIO_Init+0x120>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x66>
 8000d46:	21ac      	movs	r1, #172	; 0xac
 8000d48:	4830      	ldr	r0, [pc, #192]	; (8000e0c <HAL_GPIO_Init+0x124>)
 8000d4a:	f7ff fd31 	bl	80007b0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d005      	beq.n	8000d64 <HAL_GPIO_Init+0x7c>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	0c1b      	lsrs	r3, r3, #16
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x84>
 8000d64:	21ad      	movs	r1, #173	; 0xad
 8000d66:	4829      	ldr	r0, [pc, #164]	; (8000e0c <HAL_GPIO_Init+0x124>)
 8000d68:	f7ff fd22 	bl	80007b0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d035      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d031      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b11      	cmp	r3, #17
 8000d82:	d02d      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d029      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b12      	cmp	r3, #18
 8000d92:	d025      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000d9c:	d020      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000da6:	d01b      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000db0:	d016      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000dba:	d011      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000dc4:	d00c      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000dce:	d007      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0xf8>
 8000dd8:	21ae      	movs	r1, #174	; 0xae
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <HAL_GPIO_Init+0x124>)
 8000ddc:	f7ff fce8 	bl	80007b0 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	e240      	b.n	8001268 <HAL_GPIO_Init+0x580>
 8000de6:	bf00      	nop
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40020800 	.word	0x40020800
 8000df4:	40020c00 	.word	0x40020c00
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40021400 	.word	0x40021400
 8000e00:	40021800 	.word	0x40021800
 8000e04:	40021c00 	.word	0x40021c00
 8000e08:	40022000 	.word	0x40022000
 8000e0c:	0800710c 	.word	0x0800710c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 821a 	bne.w	8001262 <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d144      	bne.n	8000ed0 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00f      	beq.n	8000e6e <HAL_GPIO_Init+0x186>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d00b      	beq.n	8000e6e <HAL_GPIO_Init+0x186>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x186>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x186>
 8000e66:	21c0      	movs	r1, #192	; 0xc0
 8000e68:	4892      	ldr	r0, [pc, #584]	; (80010b4 <HAL_GPIO_Init+0x3cc>)
 8000e6a:	f7ff fca1 	bl	80007b0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d027      	beq.n	8000f2c <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00b      	beq.n	8000efc <HAL_GPIO_Init+0x214>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x214>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x214>
 8000ef4:	21d1      	movs	r1, #209	; 0xd1
 8000ef6:	486f      	ldr	r0, [pc, #444]	; (80010b4 <HAL_GPIO_Init+0x3cc>)
 8000ef8:	f7ff fc5a 	bl	80007b0 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	f040 80bf 	bne.w	80010b8 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8093 	beq.w	800106a <HAL_GPIO_Init+0x382>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2b09      	cmp	r3, #9
 8000f4a:	f000 808e 	beq.w	800106a <HAL_GPIO_Init+0x382>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8089 	beq.w	800106a <HAL_GPIO_Init+0x382>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 8084 	beq.w	800106a <HAL_GPIO_Init+0x382>
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d07f      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d07b      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d077      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d073      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d06f      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d06b      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d067      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d063      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d05f      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d05b      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d057      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d053      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d04f      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d04b      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d047      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b09      	cmp	r3, #9
 8000fe0:	d043      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	d03f      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	d03b      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b07      	cmp	r3, #7
 8000ff8:	d037      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d033      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b08      	cmp	r3, #8
 8001008:	d02f      	beq.n	800106a <HAL_GPIO_Init+0x382>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	2b08      	cmp	r3, #8
 8001010:	d02b      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b09      	cmp	r3, #9
 8001018:	d027      	beq.n	800106a <HAL_GPIO_Init+0x382>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d023      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b0a      	cmp	r3, #10
 8001028:	d01f      	beq.n	800106a <HAL_GPIO_Init+0x382>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d01b      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b0b      	cmp	r3, #11
 8001038:	d017      	beq.n	800106a <HAL_GPIO_Init+0x382>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b0c      	cmp	r3, #12
 8001048:	d00f      	beq.n	800106a <HAL_GPIO_Init+0x382>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	2b0d      	cmp	r3, #13
 8001050:	d00b      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	2b0c      	cmp	r3, #12
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x382>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x382>
 8001062:	21de      	movs	r1, #222	; 0xde
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <HAL_GPIO_Init+0x3cc>)
 8001066:	f7ff fba3 	bl	80007b0 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	69b9      	ldr	r1, [r7, #24]
 80010ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80010b2:	e001      	b.n	80010b8 <HAL_GPIO_Init+0x3d0>
 80010b4:	0800710c 	.word	0x0800710c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80b4 	beq.w	8001262 <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b5f      	ldr	r3, [pc, #380]	; (800127c <HAL_GPIO_Init+0x594>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a5e      	ldr	r2, [pc, #376]	; (800127c <HAL_GPIO_Init+0x594>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b5c      	ldr	r3, [pc, #368]	; (800127c <HAL_GPIO_Init+0x594>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001116:	4a5a      	ldr	r2, [pc, #360]	; (8001280 <HAL_GPIO_Init+0x598>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a51      	ldr	r2, [pc, #324]	; (8001284 <HAL_GPIO_Init+0x59c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d02b      	beq.n	800119a <HAL_GPIO_Init+0x4b2>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a50      	ldr	r2, [pc, #320]	; (8001288 <HAL_GPIO_Init+0x5a0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d025      	beq.n	8001196 <HAL_GPIO_Init+0x4ae>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4f      	ldr	r2, [pc, #316]	; (800128c <HAL_GPIO_Init+0x5a4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d01f      	beq.n	8001192 <HAL_GPIO_Init+0x4aa>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4e      	ldr	r2, [pc, #312]	; (8001290 <HAL_GPIO_Init+0x5a8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d019      	beq.n	800118e <HAL_GPIO_Init+0x4a6>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4d      	ldr	r2, [pc, #308]	; (8001294 <HAL_GPIO_Init+0x5ac>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x4a2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4c      	ldr	r2, [pc, #304]	; (8001298 <HAL_GPIO_Init+0x5b0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x49e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4b      	ldr	r2, [pc, #300]	; (800129c <HAL_GPIO_Init+0x5b4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x49a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <HAL_GPIO_Init+0x5b8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x496>
 800117a:	2307      	movs	r3, #7
 800117c:	e00e      	b.n	800119c <HAL_GPIO_Init+0x4b4>
 800117e:	2308      	movs	r3, #8
 8001180:	e00c      	b.n	800119c <HAL_GPIO_Init+0x4b4>
 8001182:	2306      	movs	r3, #6
 8001184:	e00a      	b.n	800119c <HAL_GPIO_Init+0x4b4>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x4b4>
 800118a:	2304      	movs	r3, #4
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x4b4>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x4b4>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x4b4>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x4b4>
 800119a:	2300      	movs	r3, #0
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ac:	4934      	ldr	r1, [pc, #208]	; (8001280 <HAL_GPIO_Init+0x598>)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <HAL_GPIO_Init+0x5bc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011de:	4a31      	ldr	r2, [pc, #196]	; (80012a4 <HAL_GPIO_Init+0x5bc>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <HAL_GPIO_Init+0x5bc>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <HAL_GPIO_Init+0x5bc>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_GPIO_Init+0x5bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <HAL_GPIO_Init+0x5bc>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_GPIO_Init+0x5bc>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <HAL_GPIO_Init+0x5bc>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3301      	adds	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	f67f add0 	bls.w	8000e10 <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40021400 	.word	0x40021400
 800129c:	40021800 	.word	0x40021800
 80012a0:	40021c00 	.word	0x40021c00
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <HAL_GPIO_ReadPin+0x1c>
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	0c1b      	lsrs	r3, r3, #16
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <HAL_GPIO_ReadPin+0x26>
 80012c4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <HAL_GPIO_ReadPin+0x48>)
 80012ca:	f7ff fa71 	bl	80007b0 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e001      	b.n	80012e4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	0800710c 	.word	0x0800710c

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d004      	beq.n	8001314 <HAL_GPIO_WritePin+0x20>
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	0c1b      	lsrs	r3, r3, #16
 800130e:	041b      	lsls	r3, r3, #16
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <HAL_GPIO_WritePin+0x2a>
 8001314:	f240 119d 	movw	r1, #413	; 0x19d
 8001318:	480e      	ldr	r0, [pc, #56]	; (8001354 <HAL_GPIO_WritePin+0x60>)
 800131a:	f7ff fa49 	bl	80007b0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800131e:	787b      	ldrb	r3, [r7, #1]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d007      	beq.n	8001334 <HAL_GPIO_WritePin+0x40>
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d004      	beq.n	8001334 <HAL_GPIO_WritePin+0x40>
 800132a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <HAL_GPIO_WritePin+0x60>)
 8001330:	f7ff fa3e 	bl	80007b0 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	0800710c 	.word	0x0800710c

08001358 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <HAL_GPIO_TogglePin+0x1c>
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	0c1b      	lsrs	r3, r3, #16
 800136e:	041b      	lsls	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_GPIO_TogglePin+0x26>
 8001374:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <HAL_GPIO_TogglePin+0x4c>)
 800137a:	f7ff fa19 	bl	80007b0 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001384:	887a      	ldrh	r2, [r7, #2]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	041a      	lsls	r2, r3, #16
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43d9      	mvns	r1, r3
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	400b      	ands	r3, r1
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	0800710c 	.word	0x0800710c

080013a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fa62 	bl	8000890 <HAL_GPIO_EXTI_Callback>
  }
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1be      	b.n	8001768 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a9f      	ldr	r2, [pc, #636]	; (800166c <HAL_I2C_Init+0x294>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00e      	beq.n	8001412 <HAL_I2C_Init+0x3a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a9d      	ldr	r2, [pc, #628]	; (8001670 <HAL_I2C_Init+0x298>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d009      	beq.n	8001412 <HAL_I2C_Init+0x3a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a9c      	ldr	r2, [pc, #624]	; (8001674 <HAL_I2C_Init+0x29c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d004      	beq.n	8001412 <HAL_I2C_Init+0x3a>
 8001408:	f240 11bf 	movw	r1, #447	; 0x1bf
 800140c:	489a      	ldr	r0, [pc, #616]	; (8001678 <HAL_I2C_Init+0x2a0>)
 800140e:	f7ff f9cf 	bl	80007b0 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <HAL_I2C_Init+0x4c>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a97      	ldr	r2, [pc, #604]	; (800167c <HAL_I2C_Init+0x2a4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d904      	bls.n	800142e <HAL_I2C_Init+0x56>
 8001424:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001428:	4893      	ldr	r0, [pc, #588]	; (8001678 <HAL_I2C_Init+0x2a0>)
 800142a:	f7ff f9c1 	bl	80007b0 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_I2C_Init+0x72>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800143e:	d004      	beq.n	800144a <HAL_I2C_Init+0x72>
 8001440:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001444:	488c      	ldr	r0, [pc, #560]	; (8001678 <HAL_I2C_Init+0x2a0>)
 8001446:	f7ff f9b3 	bl	80007b0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001452:	f023 0303 	bic.w	r3, r3, #3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <HAL_I2C_Init+0x8c>
 800145a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800145e:	4886      	ldr	r0, [pc, #536]	; (8001678 <HAL_I2C_Init+0x2a0>)
 8001460:	f7ff f9a6 	bl	80007b0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800146c:	d009      	beq.n	8001482 <HAL_I2C_Init+0xaa>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001476:	d004      	beq.n	8001482 <HAL_I2C_Init+0xaa>
 8001478:	f240 11c3 	movw	r1, #451	; 0x1c3
 800147c:	487e      	ldr	r0, [pc, #504]	; (8001678 <HAL_I2C_Init+0x2a0>)
 800147e:	f7ff f997 	bl	80007b0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_I2C_Init+0xc4>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d004      	beq.n	800149c <HAL_I2C_Init+0xc4>
 8001492:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001496:	4878      	ldr	r0, [pc, #480]	; (8001678 <HAL_I2C_Init+0x2a0>)
 8001498:	f7ff f98a 	bl	80007b0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_I2C_Init+0xda>
 80014a8:	f240 11c5 	movw	r1, #453	; 0x1c5
 80014ac:	4872      	ldr	r0, [pc, #456]	; (8001678 <HAL_I2C_Init+0x2a0>)
 80014ae:	f7ff f97f 	bl	80007b0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <HAL_I2C_Init+0xf4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	2b40      	cmp	r3, #64	; 0x40
 80014c0:	d004      	beq.n	80014cc <HAL_I2C_Init+0xf4>
 80014c2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80014c6:	486c      	ldr	r0, [pc, #432]	; (8001678 <HAL_I2C_Init+0x2a0>)
 80014c8:	f7ff f972 	bl	80007b0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_I2C_Init+0x10e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	2b80      	cmp	r3, #128	; 0x80
 80014da:	d004      	beq.n	80014e6 <HAL_I2C_Init+0x10e>
 80014dc:	f240 11c7 	movw	r1, #455	; 0x1c7
 80014e0:	4865      	ldr	r0, [pc, #404]	; (8001678 <HAL_I2C_Init+0x2a0>)
 80014e2:	f7ff f965 	bl	80007b0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff f886 	bl	800060c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001538:	f002 f854 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 800153c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4a4f      	ldr	r2, [pc, #316]	; (8001680 <HAL_I2C_Init+0x2a8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d807      	bhi.n	8001558 <HAL_I2C_Init+0x180>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4a4e      	ldr	r2, [pc, #312]	; (8001684 <HAL_I2C_Init+0x2ac>)
 800154c:	4293      	cmp	r3, r2
 800154e:	bf94      	ite	ls
 8001550:	2301      	movls	r3, #1
 8001552:	2300      	movhi	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	e006      	b.n	8001566 <HAL_I2C_Init+0x18e>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4a4b      	ldr	r2, [pc, #300]	; (8001688 <HAL_I2C_Init+0x2b0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	bf94      	ite	ls
 8001560:	2301      	movls	r3, #1
 8001562:	2300      	movhi	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0fc      	b.n	8001768 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4a46      	ldr	r2, [pc, #280]	; (800168c <HAL_I2C_Init+0x2b4>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0c9b      	lsrs	r3, r3, #18
 8001578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a38      	ldr	r2, [pc, #224]	; (8001680 <HAL_I2C_Init+0x2a8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d802      	bhi.n	80015a8 <HAL_I2C_Init+0x1d0>
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	3301      	adds	r3, #1
 80015a6:	e009      	b.n	80015bc <HAL_I2C_Init+0x1e4>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	4a37      	ldr	r2, [pc, #220]	; (8001690 <HAL_I2C_Init+0x2b8>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	099b      	lsrs	r3, r3, #6
 80015ba:	3301      	adds	r3, #1
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	492a      	ldr	r1, [pc, #168]	; (8001680 <HAL_I2C_Init+0x2a8>)
 80015d8:	428b      	cmp	r3, r1
 80015da:	d819      	bhi.n	8001610 <HAL_I2C_Init+0x238>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e59      	subs	r1, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ea:	1c59      	adds	r1, r3, #1
 80015ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015f0:	400b      	ands	r3, r1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00a      	beq.n	800160c <HAL_I2C_Init+0x234>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1e59      	subs	r1, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fbb1 f3f3 	udiv	r3, r1, r3
 8001604:	3301      	adds	r3, #1
 8001606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160a:	e066      	b.n	80016da <HAL_I2C_Init+0x302>
 800160c:	2304      	movs	r3, #4
 800160e:	e064      	b.n	80016da <HAL_I2C_Init+0x302>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d111      	bne.n	800163c <HAL_I2C_Init+0x264>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e58      	subs	r0, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	440b      	add	r3, r1
 8001626:	fbb0 f3f3 	udiv	r3, r0, r3
 800162a:	3301      	adds	r3, #1
 800162c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	e012      	b.n	8001662 <HAL_I2C_Init+0x28a>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1e58      	subs	r0, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	0099      	lsls	r1, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf0c      	ite	eq
 800165c:	2301      	moveq	r3, #1
 800165e:	2300      	movne	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d016      	beq.n	8001694 <HAL_I2C_Init+0x2bc>
 8001666:	2301      	movs	r3, #1
 8001668:	e037      	b.n	80016da <HAL_I2C_Init+0x302>
 800166a:	bf00      	nop
 800166c:	40005400 	.word	0x40005400
 8001670:	40005800 	.word	0x40005800
 8001674:	40005c00 	.word	0x40005c00
 8001678:	08007148 	.word	0x08007148
 800167c:	00061a80 	.word	0x00061a80
 8001680:	000186a0 	.word	0x000186a0
 8001684:	001e847f 	.word	0x001e847f
 8001688:	003d08ff 	.word	0x003d08ff
 800168c:	431bde83 	.word	0x431bde83
 8001690:	10624dd3 	.word	0x10624dd3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10e      	bne.n	80016ba <HAL_I2C_Init+0x2e2>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b8:	e00f      	b.n	80016da <HAL_I2C_Init+0x302>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1e58      	subs	r0, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6859      	ldr	r1, [r3, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	0099      	lsls	r1, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	6809      	ldr	r1, [r1, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69da      	ldr	r2, [r3, #28]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001708:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6911      	ldr	r1, [r2, #16]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68d2      	ldr	r2, [r2, #12]
 8001714:	4311      	orrs	r1, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	430b      	orrs	r3, r1
 800171c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001772:	b08f      	sub	sp, #60	; 0x3c
 8001774:	af0a      	add	r7, sp, #40	; 0x28
 8001776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e11d      	b.n	80019be <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800178a:	d008      	beq.n	800179e <HAL_PCD_Init+0x2e>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a8d      	ldr	r2, [pc, #564]	; (80019c8 <HAL_PCD_Init+0x258>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <HAL_PCD_Init+0x2e>
 8001796:	2187      	movs	r1, #135	; 0x87
 8001798:	488c      	ldr	r0, [pc, #560]	; (80019cc <HAL_PCD_Init+0x25c>)
 800179a:	f7ff f809 	bl	80007b0 <assert_failed>

  USBx = hpcd->Instance;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d106      	bne.n	80017be <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f005 f93d 	bl	8006a38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2203      	movs	r2, #3
 80017c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 f82a 	bl	8003836 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	687e      	ldr	r6, [r7, #4]
 80017ea:	466d      	mov	r5, sp
 80017ec:	f106 0410 	add.w	r4, r6, #16
 80017f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001800:	1d33      	adds	r3, r6, #4
 8001802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f001 ff01 	bl	800360c <USB_CoreInit>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2202      	movs	r2, #2
 8001814:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0d0      	b.n	80019be <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f002 f818 	bl	8003858 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]
 800182c:	e04a      	b.n	80018c4 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	333d      	adds	r3, #61	; 0x3d
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	333c      	adds	r3, #60	; 0x3c
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	b298      	uxth	r0, r3
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	3342      	adds	r3, #66	; 0x42
 800186a:	4602      	mov	r2, r0
 800186c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	333f      	adds	r3, #63	; 0x3f
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	3344      	adds	r3, #68	; 0x44
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3348      	adds	r3, #72	; 0x48
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3350      	adds	r3, #80	; 0x50
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	3301      	adds	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d3af      	bcc.n	800182e <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	e044      	b.n	800195e <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	3301      	adds	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	d3b5      	bcc.n	80018d4 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	687e      	ldr	r6, [r7, #4]
 8001970:	466d      	mov	r5, sp
 8001972:	f106 0410 	add.w	r4, r6, #16
 8001976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001982:	e885 0003 	stmia.w	r5, {r0, r1}
 8001986:	1d33      	adds	r3, r6, #4
 8001988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800198a:	6838      	ldr	r0, [r7, #0]
 800198c:	f001 ffb0 	bl	80038f0 <USB_DevInit>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00d      	b.n	80019be <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 f82c 	bl	8004a14 <USB_DevDisconnect>

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40040000 	.word	0x40040000
 80019cc:	08007180 	.word	0x08007180

080019d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_PCD_Start+0x1c>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e020      	b.n	8001a2e <HAL_PCD_Start+0x5e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d109      	bne.n	8001a10 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d005      	beq.n	8001a10 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fefd 	bl	8003814 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 ffd7 	bl	80049d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a36:	b590      	push	{r4, r7, lr}
 8001a38:	b08d      	sub	sp, #52	; 0x34
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 f895 	bl	8004b7c <USB_GetMode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 839d 	bne.w	8002194 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fff9 	bl	8004a56 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8393 	beq.w	8002192 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fff0 	bl	8004a56 <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d107      	bne.n	8001a90 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f002 0202 	and.w	r2, r2, #2
 8001a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 ffde 	bl	8004a56 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d161      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0210 	bic.w	r2, r2, #16
 8001ab2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f003 020f 	and.w	r2, r3, #15
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	0c5b      	lsrs	r3, r3, #17
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d124      	bne.n	8001b2a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d035      	beq.n	8001b58 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	6a38      	ldr	r0, [r7, #32]
 8001b00:	f002 fe15 	bl	800472e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b10:	441a      	add	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b22:	441a      	add	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	619a      	str	r2, [r3, #24]
 8001b28:	e016      	b.n	8001b58 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	0c5b      	lsrs	r3, r3, #17
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d110      	bne.n	8001b58 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6a38      	ldr	r0, [r7, #32]
 8001b42:	f002 fdf4 	bl	800472e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b52:	441a      	add	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0210 	orr.w	r2, r2, #16
 8001b66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 ff72 	bl	8004a56 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b7c:	d16e      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 ff78 	bl	8004a7c <USB_ReadDevAllOutEpInterrupt>
 8001b8c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b8e:	e062      	b.n	8001c56 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d057      	beq.n	8001c4a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 ff9d 	bl	8004ae4 <USB_ReadDevOutEPInterrupt>
 8001baa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fdb0 	bl	8002730 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00c      	beq.n	8001bf4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be6:	461a      	mov	r2, r3
 8001be8:	2308      	movs	r3, #8
 8001bea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 feaa 	bl	8002948 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c26:	461a      	mov	r2, r3
 8001c28:	2320      	movs	r3, #32
 8001c2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c42:	461a      	mov	r2, r3
 8001c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	085b      	lsrs	r3, r3, #1
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d199      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fef8 	bl	8004a56 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c70:	f040 80c0 	bne.w	8001df4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 ff19 	bl	8004ab0 <USB_ReadDevAllInEpInterrupt>
 8001c7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c84:	e0b2      	b.n	8001dec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80a7 	beq.w	8001de0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 ff3f 	bl	8004b20 <USB_ReadDevInEPInterrupt>
 8001ca2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d057      	beq.n	8001d5e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69f9      	ldr	r1, [r7, #28]
 8001cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cce:	4013      	ands	r3, r2
 8001cd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d132      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3348      	adds	r3, #72	; 0x48
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4403      	add	r3, r0
 8001d0c:	3344      	adds	r3, #68	; 0x44
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4419      	add	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4403      	add	r3, r0
 8001d20:	3348      	adds	r3, #72	; 0x48
 8001d22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d113      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x31c>
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3350      	adds	r3, #80	; 0x50
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d108      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	f002 ff47 	bl	8004be0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f004 feee 	bl	8006b3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d74:	461a      	mov	r2, r3
 8001d76:	2308      	movs	r3, #8
 8001d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d90:	461a      	mov	r2, r3
 8001d92:	2310      	movs	r3, #16
 8001d94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dac:	461a      	mov	r2, r3
 8001dae:	2340      	movs	r3, #64	; 0x40
 8001db0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2302      	movs	r3, #2
 8001dcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fc1b 	bl	8002616 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	3301      	adds	r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f47f af49 	bne.w	8001c86 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fe2c 	bl	8004a56 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e08:	d122      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d108      	bne.n	8001e3a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e30:	2100      	movs	r1, #0
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fe26 	bl	8002a84 <HAL_PCDEx_LPM_Callback>
 8001e38:	e002      	b.n	8001e40 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f004 fef4 	bl	8006c28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 fdfe 	bl	8004a56 <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e64:	d112      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f004 feb0 	bl	8006bdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e8a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 fde0 	bl	8004a56 <USB_ReadInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea0:	f040 80c7 	bne.w	8002032 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 fe7a 	bl	8003bb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec8:	e056      	b.n	8001f78 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001edc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eee:	0151      	lsls	r1, r2, #5
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	440a      	add	r2, r1
 8001ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ef8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001efc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f0e:	0151      	lsls	r1, r2, #5
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	440a      	add	r2, r1
 8001f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f42:	0151      	lsls	r1, r2, #5
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	440a      	add	r2, r1
 8001f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f62:	0151      	lsls	r1, r2, #5
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	440a      	add	r2, r1
 8001f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	3301      	adds	r3, #1
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3a3      	bcc.n	8001eca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f90:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f94:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d016      	beq.n	8001fcc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fae:	f043 030b 	orr.w	r3, r3, #11
 8001fb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc4:	f043 030b 	orr.w	r3, r3, #11
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	e015      	b.n	8001ff8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fde:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001fe2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff2:	f043 030b 	orr.w	r3, r3, #11
 8001ff6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002006:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800200a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800201c:	461a      	mov	r2, r3
 800201e:	f002 fddf 	bl	8004be0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f002 fd0d 	bl	8004a56 <USB_ReadInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002046:	d124      	bne.n	8002092 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f002 fda3 	bl	8004b98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f001 fe0b 	bl	8003c72 <USB_GetDevSpeed>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681c      	ldr	r4, [r3, #0]
 8002068:	f001 fab0 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 800206c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	4620      	mov	r0, r4
 8002078:	f001 fb2a 	bl	80036d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f004 fd84 	bl	8006b8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002090:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f002 fcdd 	bl	8004a56 <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d10a      	bne.n	80020bc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f004 fd61 	bl	8006b6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f002 0208 	and.w	r2, r2, #8
 80020ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fcc8 	bl	8004a56 <USB_ReadInterrupts>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020d0:	d10f      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f004 fdc3 	bl	8006c68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 fcad 	bl	8004a56 <USB_ReadInterrupts>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002106:	d10f      	bne.n	8002128 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	b2db      	uxtb	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f004 fd96 	bl	8006c44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fc92 	bl	8004a56 <USB_ReadInterrupts>
 8002132:	4603      	mov	r3, r0
 8002134:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213c:	d10a      	bne.n	8002154 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f004 fda4 	bl	8006c8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fc7c 	bl	8004a56 <USB_ReadInterrupts>
 800215e:	4603      	mov	r3, r0
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b04      	cmp	r3, #4
 8002166:	d115      	bne.n	8002194 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f004 fd94 	bl	8006ca8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	e000      	b.n	8002194 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002192:	bf00      	nop
    }
  }
}
 8002194:	3734      	adds	r7, #52	; 0x34
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}

0800219a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_PCD_SetAddress+0x1a>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e013      	b.n	80021dc <HAL_PCD_SetAddress+0x42>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f002 fbda 	bl	8004986 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	70fb      	strb	r3, [r7, #3]
 80021f6:	460b      	mov	r3, r1
 80021f8:	803b      	strh	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002206:	2b00      	cmp	r3, #0
 8002208:	da0f      	bge.n	800222a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	3338      	adds	r3, #56	; 0x38
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	705a      	strb	r2, [r3, #1]
 8002228:	e00f      	b.n	800224a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	f003 020f 	and.w	r2, r3, #15
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	3304      	adds	r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	b2da      	uxtb	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002256:	883a      	ldrh	r2, [r7, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	78ba      	ldrb	r2, [r7, #2]
 8002260:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002274:	78bb      	ldrb	r3, [r7, #2]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d102      	bne.n	8002280 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_PCD_EP_Open+0xaa>
 800228a:	2302      	movs	r3, #2
 800228c:	e00e      	b.n	80022ac <HAL_PCD_EP_Open+0xc8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68f9      	ldr	r1, [r7, #12]
 800229c:	4618      	mov	r0, r3
 800229e:	f001 fd0d 	bl	8003cbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022aa:	7afb      	ldrb	r3, [r7, #11]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	da0f      	bge.n	80022e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 020f 	and.w	r2, r3, #15
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	3338      	adds	r3, #56	; 0x38
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	3304      	adds	r3, #4
 80022de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	705a      	strb	r2, [r3, #1]
 80022e6:	e00f      	b.n	8002308 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	f003 020f 	and.w	r2, r3, #15
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	3304      	adds	r3, #4
 8002300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	b2da      	uxtb	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_PCD_EP_Close+0x6e>
 800231e:	2302      	movs	r3, #2
 8002320:	e00e      	b.n	8002340 <HAL_PCD_EP_Close+0x8c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	4618      	mov	r0, r3
 8002332:	f001 fd4b 	bl	8003dcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	460b      	mov	r3, r1
 8002356:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002358:	7afb      	ldrb	r3, [r7, #11]
 800235a:	f003 020f 	and.w	r2, r3, #15
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4413      	add	r3, r2
 800236e:	3304      	adds	r3, #4
 8002370:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2200      	movs	r2, #0
 8002388:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238a:	7afb      	ldrb	r3, [r7, #11]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	b2da      	uxtb	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	6979      	ldr	r1, [r7, #20]
 80023bc:	f002 f826 	bl	800440c <USB_EP0StartXfer>
 80023c0:	e008      	b.n	80023d4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	6979      	ldr	r1, [r7, #20]
 80023d0:	f001 fdd8 	bl	8003f84 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002400:	681b      	ldr	r3, [r3, #0]
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	460b      	mov	r3, r1
 800241c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241e:	7afb      	ldrb	r3, [r7, #11]
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	3338      	adds	r3, #56	; 0x38
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2201      	movs	r2, #1
 800244c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800244e:	7afb      	ldrb	r3, [r7, #11]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	b2da      	uxtb	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d102      	bne.n	8002468 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002468:	7afb      	ldrb	r3, [r7, #11]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	6979      	ldr	r1, [r7, #20]
 8002480:	f001 ffc4 	bl	800440c <USB_EP0StartXfer>
 8002484:	e008      	b.n	8002498 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	6979      	ldr	r1, [r7, #20]
 8002494:	f001 fd76 	bl	8003f84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d901      	bls.n	80024c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e050      	b.n	8002562 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da0f      	bge.n	80024e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 020f 	and.w	r2, r3, #15
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	3338      	adds	r3, #56	; 0x38
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	705a      	strb	r2, [r3, #1]
 80024e6:	e00d      	b.n	8002504 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	3304      	adds	r3, #4
 80024fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_PCD_EP_SetStall+0x82>
 8002520:	2302      	movs	r3, #2
 8002522:	e01e      	b.n	8002562 <HAL_PCD_EP_SetStall+0xc0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 f953 	bl	80047de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	b2d9      	uxtb	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002552:	461a      	mov	r2, r3
 8002554:	f002 fb44 	bl	8004be0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	f003 020f 	and.w	r2, r3, #15
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d901      	bls.n	8002588 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e042      	b.n	800260e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800258c:	2b00      	cmp	r3, #0
 800258e:	da0f      	bge.n	80025b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	f003 020f 	and.w	r2, r3, #15
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	3338      	adds	r3, #56	; 0x38
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	705a      	strb	r2, [r3, #1]
 80025ae:	e00f      	b.n	80025d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	3304      	adds	r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_PCD_EP_ClrStall+0x86>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e00e      	b.n	800260e <HAL_PCD_EP_ClrStall+0xa4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68f9      	ldr	r1, [r7, #12]
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 f95b 	bl	80048ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b08a      	sub	sp, #40	; 0x28
 800261a:	af02      	add	r7, sp, #8
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	3338      	adds	r3, #56	; 0x38
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	3304      	adds	r3, #4
 800263c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	429a      	cmp	r2, r3
 8002648:	d901      	bls.n	800264e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06c      	b.n	8002728 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	429a      	cmp	r2, r3
 8002662:	d902      	bls.n	800266a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3303      	adds	r3, #3
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002672:	e02b      	b.n	80026cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	429a      	cmp	r2, r3
 8002688:	d902      	bls.n	8002690 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	3303      	adds	r3, #3
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68d9      	ldr	r1, [r3, #12]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	4603      	mov	r3, r0
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f001 ffff 	bl	80046b2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	441a      	add	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	441a      	add	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d809      	bhi.n	80026f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d203      	bcs.n	80026f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1be      	bne.n	8002674 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d811      	bhi.n	8002726 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	2201      	movs	r2, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	43db      	mvns	r3, r3
 800271c:	6939      	ldr	r1, [r7, #16]
 800271e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002722:	4013      	ands	r3, r2
 8002724:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	333c      	adds	r3, #60	; 0x3c
 8002748:	3304      	adds	r3, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b01      	cmp	r3, #1
 8002764:	f040 80a0 	bne.w	80028a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d015      	beq.n	800279e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4a72      	ldr	r2, [pc, #456]	; (8002940 <PCD_EP_OutXfrComplete_int+0x210>)
 8002776:	4293      	cmp	r3, r2
 8002778:	f240 80dd 	bls.w	8002936 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80d7 	beq.w	8002936 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002794:	461a      	mov	r2, r3
 8002796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800279a:	6093      	str	r3, [r2, #8]
 800279c:	e0cb      	b.n	8002936 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b4:	461a      	mov	r2, r3
 80027b6:	2320      	movs	r3, #32
 80027b8:	6093      	str	r3, [r2, #8]
 80027ba:	e0bc      	b.n	8002936 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 80b7 	bne.w	8002936 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a5d      	ldr	r2, [pc, #372]	; (8002940 <PCD_EP_OutXfrComplete_int+0x210>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d90f      	bls.n	80027f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e6:	461a      	mov	r2, r3
 80027e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ec:	6093      	str	r3, [r2, #8]
 80027ee:	e0a2      	b.n	8002936 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002802:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	0159      	lsls	r1, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	440b      	add	r3, r1
 800280c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002816:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4403      	add	r3, r0
 8002826:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800282a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4403      	add	r3, r0
 800284e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4419      	add	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4403      	add	r3, r0
 8002864:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002868:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d114      	bne.n	800289a <PCD_EP_OutXfrComplete_int+0x16a>
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d108      	bne.n	800289a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002892:	461a      	mov	r2, r3
 8002894:	2101      	movs	r1, #1
 8002896:	f002 f9a3 	bl	8004be0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f004 f92f 	bl	8006b04 <HAL_PCD_DataOutStageCallback>
 80028a6:	e046      	b.n	8002936 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a26      	ldr	r2, [pc, #152]	; (8002944 <PCD_EP_OutXfrComplete_int+0x214>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d124      	bne.n	80028fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c6:	461a      	mov	r2, r3
 80028c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028cc:	6093      	str	r3, [r2, #8]
 80028ce:	e032      	b.n	8002936 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e6:	461a      	mov	r2, r3
 80028e8:	2320      	movs	r3, #32
 80028ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	4619      	mov	r1, r3
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f004 f906 	bl	8006b04 <HAL_PCD_DataOutStageCallback>
 80028f8:	e01d      	b.n	8002936 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d114      	bne.n	800292a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002922:	461a      	mov	r2, r3
 8002924:	2100      	movs	r1, #0
 8002926:	f002 f95b 	bl	8004be0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f004 f8e7 	bl	8006b04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	4f54300a 	.word	0x4f54300a
 8002944:	4f54310a 	.word	0x4f54310a

08002948 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	333c      	adds	r3, #60	; 0x3c
 8002960:	3304      	adds	r3, #4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d90e      	bls.n	800299c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f004 f89f 	bl	8006ae0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d90c      	bls.n	80029c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d108      	bne.n	80029c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029bc:	461a      	mov	r2, r3
 80029be:	2101      	movs	r1, #1
 80029c0:	f002 f90e 	bl	8004be0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	4f54300a 	.word	0x4f54300a

080029d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
 80029e0:	4613      	mov	r3, r2
 80029e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029f2:	883b      	ldrh	r3, [r7, #0]
 80029f4:	0419      	lsls	r1, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002a00:	e028      	b.n	8002a54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e00d      	b.n	8002a32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3340      	adds	r3, #64	; 0x40
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	4413      	add	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d3ec      	bcc.n	8002a16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a3c:	883b      	ldrh	r3, [r7, #0]
 8002a3e:	0418      	lsls	r0, r3, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	4302      	orrs	r2, r0
 8002a4c:	3340      	adds	r3, #64	; 0x40
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e316      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	d903      	bls.n	8002abe <HAL_RCC_OscConfig+0x22>
 8002ab6:	21e8      	movs	r1, #232	; 0xe8
 8002ab8:	48a3      	ldr	r0, [pc, #652]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	f7fd fe79 	bl	80007b0 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8088 	beq.w	8002bdc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <HAL_RCC_OscConfig+0x54>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002adc:	d008      	beq.n	8002af0 <HAL_RCC_OscConfig+0x54>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae6:	d003      	beq.n	8002af0 <HAL_RCC_OscConfig+0x54>
 8002ae8:	21ed      	movs	r1, #237	; 0xed
 8002aea:	4897      	ldr	r0, [pc, #604]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	f7fd fe60 	bl	80007b0 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af0:	4b96      	ldr	r3, [pc, #600]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d00c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afc:	4b93      	ldr	r3, [pc, #588]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d112      	bne.n	8002b2e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b08:	4b90      	ldr	r3, [pc, #576]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b16:	4b8d      	ldr	r3, [pc, #564]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d05b      	beq.n	8002bda <HAL_RCC_OscConfig+0x13e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d157      	bne.n	8002bda <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e2d6      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0xaa>
 8002b38:	4b84      	ldr	r3, [pc, #528]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a83      	ldr	r2, [pc, #524]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e01d      	b.n	8002b82 <HAL_RCC_OscConfig+0xe6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0xce>
 8002b50:	4b7e      	ldr	r3, [pc, #504]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a7d      	ldr	r2, [pc, #500]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b7b      	ldr	r3, [pc, #492]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a7a      	ldr	r2, [pc, #488]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e00b      	b.n	8002b82 <HAL_RCC_OscConfig+0xe6>
 8002b6a:	4b78      	ldr	r3, [pc, #480]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a77      	ldr	r2, [pc, #476]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b75      	ldr	r3, [pc, #468]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a74      	ldr	r2, [pc, #464]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d013      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fd ff3d 	bl	8000a08 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b92:	f7fd ff39 	bl	8000a08 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b64      	cmp	r3, #100	; 0x64
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e29b      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba4:	4b69      	ldr	r3, [pc, #420]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0xf6>
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fd ff29 	bl	8000a08 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bba:	f7fd ff25 	bl	8000a08 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	; 0x64
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e287      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bcc:	4b5f      	ldr	r3, [pc, #380]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x11e>
 8002bd8:	e000      	b.n	8002bdc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d079      	beq.n	8002cdc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_OscConfig+0x166>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d004      	beq.n	8002c02 <HAL_RCC_OscConfig+0x166>
 8002bf8:	f240 111f 	movw	r1, #287	; 0x11f
 8002bfc:	4852      	ldr	r0, [pc, #328]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	f7fd fdd7 	bl	80007b0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b1f      	cmp	r3, #31
 8002c08:	d904      	bls.n	8002c14 <HAL_RCC_OscConfig+0x178>
 8002c0a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002c0e:	484e      	ldr	r0, [pc, #312]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	f7fd fdce 	bl	80007b0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c14:	4b4d      	ldr	r3, [pc, #308]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c20:	4b4a      	ldr	r3, [pc, #296]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d11c      	bne.n	8002c66 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2c:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d116      	bne.n	8002c66 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c38:	4b44      	ldr	r3, [pc, #272]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x1b4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e245      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c50:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	493b      	ldr	r1, [pc, #236]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c64:	e03a      	b.n	8002cdc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d020      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_RCC_OscConfig+0x2b4>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fd fec8 	bl	8000a08 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c7c:	f7fd fec4 	bl	8000a08 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e226      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4928      	ldr	r1, [pc, #160]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
 8002cae:	e015      	b.n	8002cdc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb0:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_RCC_OscConfig+0x2b4>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fd fea7 	bl	8000a08 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7fd fea3 	bl	8000a08 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e205      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd0:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d046      	beq.n	8002d76 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_OscConfig+0x266>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d004      	beq.n	8002d02 <HAL_RCC_OscConfig+0x266>
 8002cf8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002cfc:	4812      	ldr	r0, [pc, #72]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	f7fd fd57 	bl	80007b0 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_OscConfig+0x2b8>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fd fe7a 	bl	8000a08 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fd fe76 	bl	8000a08 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1d8      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x27c>
 8002d36:	e01e      	b.n	8002d76 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_OscConfig+0x2b8>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fd fe63 	bl	8000a08 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	e011      	b.n	8002d6a <HAL_RCC_OscConfig+0x2ce>
 8002d46:	bf00      	nop
 8002d48:	080071b8 	.word	0x080071b8
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	42470000 	.word	0x42470000
 8002d54:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fd fe56 	bl	8000a08 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1b8      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6a:	4b97      	ldr	r3, [pc, #604]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80a8 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00c      	beq.n	8002daa <HAL_RCC_OscConfig+0x30e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_OscConfig+0x30e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d004      	beq.n	8002daa <HAL_RCC_OscConfig+0x30e>
 8002da0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002da4:	4889      	ldr	r0, [pc, #548]	; (8002fcc <HAL_RCC_OscConfig+0x530>)
 8002da6:	f7fd fd03 	bl	80007b0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002daa:	4b87      	ldr	r3, [pc, #540]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	4b83      	ldr	r3, [pc, #524]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a82      	ldr	r2, [pc, #520]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b80      	ldr	r3, [pc, #512]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b7e      	ldr	r3, [pc, #504]	; (8002fd0 <HAL_RCC_OscConfig+0x534>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4b7b      	ldr	r3, [pc, #492]	; (8002fd0 <HAL_RCC_OscConfig+0x534>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7a      	ldr	r2, [pc, #488]	; (8002fd0 <HAL_RCC_OscConfig+0x534>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7fd fe0b 	bl	8000a08 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fd fe07 	bl	8000a08 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e169      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b71      	ldr	r3, [pc, #452]	; (8002fd0 <HAL_RCC_OscConfig+0x534>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x38e>
 8002e1c:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a69      	ldr	r2, [pc, #420]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	e01c      	b.n	8002e64 <HAL_RCC_OscConfig+0x3c8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x3b0>
 8002e32:	4b65      	ldr	r3, [pc, #404]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a64      	ldr	r2, [pc, #400]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	4b62      	ldr	r3, [pc, #392]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a61      	ldr	r2, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	e00b      	b.n	8002e64 <HAL_RCC_OscConfig+0x3c8>
 8002e4c:	4b5e      	ldr	r3, [pc, #376]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a5d      	ldr	r2, [pc, #372]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a5a      	ldr	r2, [pc, #360]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e5e:	f023 0304 	bic.w	r3, r3, #4
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7fd fdcc 	bl	8000a08 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e74:	f7fd fdc8 	bl	8000a08 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e128      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ee      	beq.n	8002e74 <HAL_RCC_OscConfig+0x3d8>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fd fdb6 	bl	8000a08 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fd fdb2 	bl	8000a08 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e112      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb6:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	4a3e      	ldr	r2, [pc, #248]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x45a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x45a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d004      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x45a>
 8002eec:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002ef0:	4836      	ldr	r0, [pc, #216]	; (8002fcc <HAL_RCC_OscConfig+0x530>)
 8002ef2:	f7fd fc5d 	bl	80007b0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80ed 	beq.w	80030da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_RCC_OscConfig+0x52c>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	f000 80ae 	beq.w	800306a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	f040 8092 	bne.w	800303c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <HAL_RCC_OscConfig+0x498>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f28:	d004      	beq.n	8002f34 <HAL_RCC_OscConfig+0x498>
 8002f2a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002f2e:	4827      	ldr	r0, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x530>)
 8002f30:	f7fd fc3e 	bl	80007b0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	2b3f      	cmp	r3, #63	; 0x3f
 8002f3a:	d904      	bls.n	8002f46 <HAL_RCC_OscConfig+0x4aa>
 8002f3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002f40:	4822      	ldr	r0, [pc, #136]	; (8002fcc <HAL_RCC_OscConfig+0x530>)
 8002f42:	f7fd fc35 	bl	80007b0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b31      	cmp	r3, #49	; 0x31
 8002f4c:	d904      	bls.n	8002f58 <HAL_RCC_OscConfig+0x4bc>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002f56:	d904      	bls.n	8002f62 <HAL_RCC_OscConfig+0x4c6>
 8002f58:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002f5c:	481b      	ldr	r0, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x530>)
 8002f5e:	f7fd fc27 	bl	80007b0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4f0>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d00c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4f0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d008      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4f0>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d004      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4f0>
 8002f82:	f240 11db 	movw	r1, #475	; 0x1db
 8002f86:	4811      	ldr	r0, [pc, #68]	; (8002fcc <HAL_RCC_OscConfig+0x530>)
 8002f88:	f7fd fc12 	bl	80007b0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d903      	bls.n	8002f9c <HAL_RCC_OscConfig+0x500>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2b0f      	cmp	r3, #15
 8002f9a:	d904      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x50a>
 8002f9c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002fa0:	480a      	ldr	r0, [pc, #40]	; (8002fcc <HAL_RCC_OscConfig+0x530>)
 8002fa2:	f7fd fc05 	bl	80007b0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_OscConfig+0x538>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fd fd2c 	bl	8000a08 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	e011      	b.n	8002fd8 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fd fd28 	bl	8000a08 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d90a      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e08a      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	080071b8 	.word	0x080071b8
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd8:	4b42      	ldr	r3, [pc, #264]	; (80030e4 <HAL_RCC_OscConfig+0x648>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e7      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	019b      	lsls	r3, r3, #6
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	4936      	ldr	r1, [pc, #216]	; (80030e4 <HAL_RCC_OscConfig+0x648>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300e:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_OscConfig+0x64c>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fd fcf8 	bl	8000a08 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fd fcf4 	bl	8000a08 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e056      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_RCC_OscConfig+0x648>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x580>
 800303a:	e04e      	b.n	80030da <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303c:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_RCC_OscConfig+0x64c>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fd fce1 	bl	8000a08 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304a:	f7fd fcdd 	bl	8000a08 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e03f      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x648>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x5ae>
 8003068:	e037      	b.n	80030da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e032      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x648>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d028      	beq.n	80030d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d121      	bne.n	80030d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d11a      	bne.n	80030d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030a6:	4013      	ands	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d111      	bne.n	80030d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	3b01      	subs	r3, #1
 80030c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	42470060 	.word	0x42470060

080030ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e174      	b.n	80033ea <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_RCC_ClockConfig+0x24>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b0f      	cmp	r3, #15
 800310e:	d904      	bls.n	800311a <HAL_RCC_ClockConfig+0x2e>
 8003110:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8003114:	487b      	ldr	r0, [pc, #492]	; (8003304 <HAL_RCC_ClockConfig+0x218>)
 8003116:	f7fd fb4b 	bl	80007b0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d019      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d016      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d013      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d010      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d00d      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b05      	cmp	r3, #5
 800313c:	d00a      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b06      	cmp	r3, #6
 8003142:	d007      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b07      	cmp	r3, #7
 8003148:	d004      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
 800314a:	f240 215d 	movw	r1, #605	; 0x25d
 800314e:	486d      	ldr	r0, [pc, #436]	; (8003304 <HAL_RCC_ClockConfig+0x218>)
 8003150:	f7fd fb2e 	bl	80007b0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b6c      	ldr	r3, [pc, #432]	; (8003308 <HAL_RCC_ClockConfig+0x21c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d90c      	bls.n	800317c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b69      	ldr	r3, [pc, #420]	; (8003308 <HAL_RCC_ClockConfig+0x21c>)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b67      	ldr	r3, [pc, #412]	; (8003308 <HAL_RCC_ClockConfig+0x21c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e136      	b.n	80033ea <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d049      	beq.n	800321c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b5d      	ldr	r3, [pc, #372]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a5c      	ldr	r2, [pc, #368]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 800319a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800319e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b57      	ldr	r3, [pc, #348]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a56      	ldr	r2, [pc, #344]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 80031b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d024      	beq.n	800320a <HAL_RCC_ClockConfig+0x11e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b80      	cmp	r3, #128	; 0x80
 80031c6:	d020      	beq.n	800320a <HAL_RCC_ClockConfig+0x11e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b90      	cmp	r3, #144	; 0x90
 80031ce:	d01c      	beq.n	800320a <HAL_RCC_ClockConfig+0x11e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2ba0      	cmp	r3, #160	; 0xa0
 80031d6:	d018      	beq.n	800320a <HAL_RCC_ClockConfig+0x11e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2bb0      	cmp	r3, #176	; 0xb0
 80031de:	d014      	beq.n	800320a <HAL_RCC_ClockConfig+0x11e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2bc0      	cmp	r3, #192	; 0xc0
 80031e6:	d010      	beq.n	800320a <HAL_RCC_ClockConfig+0x11e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2bd0      	cmp	r3, #208	; 0xd0
 80031ee:	d00c      	beq.n	800320a <HAL_RCC_ClockConfig+0x11e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2be0      	cmp	r3, #224	; 0xe0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x11e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2bf0      	cmp	r3, #240	; 0xf0
 80031fe:	d004      	beq.n	800320a <HAL_RCC_ClockConfig+0x11e>
 8003200:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003204:	483f      	ldr	r0, [pc, #252]	; (8003304 <HAL_RCC_ClockConfig+0x218>)
 8003206:	f7fd fad3 	bl	80007b0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320a:	4b40      	ldr	r3, [pc, #256]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	493d      	ldr	r1, [pc, #244]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d059      	beq.n	80032dc <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_RCC_ClockConfig+0x166>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d00c      	beq.n	8003252 <HAL_RCC_ClockConfig+0x166>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x166>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d004      	beq.n	8003252 <HAL_RCC_ClockConfig+0x166>
 8003248:	f240 2187 	movw	r1, #647	; 0x287
 800324c:	482d      	ldr	r0, [pc, #180]	; (8003304 <HAL_RCC_ClockConfig+0x218>)
 800324e:	f7fd faaf 	bl	80007b0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d119      	bne.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0bf      	b.n	80033ea <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d003      	beq.n	800327a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003276:	2b03      	cmp	r3, #3
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0af      	b.n	80033ea <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0a7      	b.n	80033ea <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4919      	ldr	r1, [pc, #100]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ac:	f7fd fbac 	bl	8000a08 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7fd fba8 	bl	8000a08 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e08f      	b.n	80033ea <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_RCC_ClockConfig+0x220>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 020c 	and.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1eb      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RCC_ClockConfig+0x21c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d212      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <HAL_RCC_ClockConfig+0x21c>)
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_ClockConfig+0x21c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d007      	beq.n	8003310 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e072      	b.n	80033ea <HAL_RCC_ClockConfig+0x2fe>
 8003304:	080071b8 	.word	0x080071b8
 8003308:	40023c00 	.word	0x40023c00
 800330c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d025      	beq.n	8003368 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d018      	beq.n	8003356 <HAL_RCC_ClockConfig+0x26a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332c:	d013      	beq.n	8003356 <HAL_RCC_ClockConfig+0x26a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003336:	d00e      	beq.n	8003356 <HAL_RCC_ClockConfig+0x26a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x26a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800334a:	d004      	beq.n	8003356 <HAL_RCC_ClockConfig+0x26a>
 800334c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8003350:	4828      	ldr	r0, [pc, #160]	; (80033f4 <HAL_RCC_ClockConfig+0x308>)
 8003352:	f7fd fa2d 	bl	80007b0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003356:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <HAL_RCC_ClockConfig+0x30c>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4925      	ldr	r1, [pc, #148]	; (80033f8 <HAL_RCC_ClockConfig+0x30c>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d026      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d018      	beq.n	80033ae <HAL_RCC_ClockConfig+0x2c2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003384:	d013      	beq.n	80033ae <HAL_RCC_ClockConfig+0x2c2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800338e:	d00e      	beq.n	80033ae <HAL_RCC_ClockConfig+0x2c2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x2c2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80033a2:	d004      	beq.n	80033ae <HAL_RCC_ClockConfig+0x2c2>
 80033a4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80033a8:	4812      	ldr	r0, [pc, #72]	; (80033f4 <HAL_RCC_ClockConfig+0x308>)
 80033aa:	f7fd fa01 	bl	80007b0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCC_ClockConfig+0x30c>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	490e      	ldr	r1, [pc, #56]	; (80033f8 <HAL_RCC_ClockConfig+0x30c>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c2:	f000 f821 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80033c6:	4602      	mov	r2, r0
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_ClockConfig+0x30c>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	490a      	ldr	r1, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x310>)
 80033d4:	5ccb      	ldrb	r3, [r1, r3]
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	4a09      	ldr	r2, [pc, #36]	; (8003400 <HAL_RCC_ClockConfig+0x314>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x318>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd facc 	bl	8000980 <HAL_InitTick>

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	080071b8 	.word	0x080071b8
 80033f8:	40023800 	.word	0x40023800
 80033fc:	08007238 	.word	0x08007238
 8003400:	20000004 	.word	0x20000004
 8003404:	20000008 	.word	0x20000008

08003408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	2300      	movs	r3, #0
 800341a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003420:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b08      	cmp	r3, #8
 800342a:	d00d      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x40>
 800342c:	2b08      	cmp	r3, #8
 800342e:	f200 80bd 	bhi.w	80035ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x34>
 8003436:	2b04      	cmp	r3, #4
 8003438:	d003      	beq.n	8003442 <HAL_RCC_GetSysClockFreq+0x3a>
 800343a:	e0b7      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800343e:	60bb      	str	r3, [r7, #8]
       break;
 8003440:	e0b7      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003442:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003444:	60bb      	str	r3, [r7, #8]
      break;
 8003446:	e0b4      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003448:	4b5d      	ldr	r3, [pc, #372]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003450:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003452:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d04d      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345e:	4b58      	ldr	r3, [pc, #352]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	461a      	mov	r2, r3
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	ea02 0800 	and.w	r8, r2, r0
 8003476:	ea03 0901 	and.w	r9, r3, r1
 800347a:	4640      	mov	r0, r8
 800347c:	4649      	mov	r1, r9
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	014b      	lsls	r3, r1, #5
 8003488:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800348c:	0142      	lsls	r2, r0, #5
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	ebb0 0008 	subs.w	r0, r0, r8
 8003496:	eb61 0109 	sbc.w	r1, r1, r9
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	018b      	lsls	r3, r1, #6
 80034a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034a8:	0182      	lsls	r2, r0, #6
 80034aa:	1a12      	subs	r2, r2, r0
 80034ac:	eb63 0301 	sbc.w	r3, r3, r1
 80034b0:	f04f 0000 	mov.w	r0, #0
 80034b4:	f04f 0100 	mov.w	r1, #0
 80034b8:	00d9      	lsls	r1, r3, #3
 80034ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034be:	00d0      	lsls	r0, r2, #3
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	eb12 0208 	adds.w	r2, r2, r8
 80034c8:	eb43 0309 	adc.w	r3, r3, r9
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	0259      	lsls	r1, r3, #9
 80034d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034da:	0250      	lsls	r0, r2, #9
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	f7fc fe6c 	bl	80001c8 <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4613      	mov	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e04a      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	461a      	mov	r2, r3
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	f240 10ff 	movw	r0, #511	; 0x1ff
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	ea02 0400 	and.w	r4, r2, r0
 8003512:	ea03 0501 	and.w	r5, r3, r1
 8003516:	4620      	mov	r0, r4
 8003518:	4629      	mov	r1, r5
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	014b      	lsls	r3, r1, #5
 8003524:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003528:	0142      	lsls	r2, r0, #5
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	1b00      	subs	r0, r0, r4
 8003530:	eb61 0105 	sbc.w	r1, r1, r5
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	018b      	lsls	r3, r1, #6
 800353e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003542:	0182      	lsls	r2, r0, #6
 8003544:	1a12      	subs	r2, r2, r0
 8003546:	eb63 0301 	sbc.w	r3, r3, r1
 800354a:	f04f 0000 	mov.w	r0, #0
 800354e:	f04f 0100 	mov.w	r1, #0
 8003552:	00d9      	lsls	r1, r3, #3
 8003554:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003558:	00d0      	lsls	r0, r2, #3
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	1912      	adds	r2, r2, r4
 8003560:	eb45 0303 	adc.w	r3, r5, r3
 8003564:	f04f 0000 	mov.w	r0, #0
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	0299      	lsls	r1, r3, #10
 800356e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003572:	0290      	lsls	r0, r2, #10
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	461a      	mov	r2, r3
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	f7fc fe20 	bl	80001c8 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	60bb      	str	r3, [r7, #8]
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035ae:	60bb      	str	r3, [r7, #8]
      break;
 80035b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b2:	68bb      	ldr	r3, [r7, #8]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	007a1200 	.word	0x007a1200

080035cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000004 	.word	0x20000004

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035e8:	f7ff fff0 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0a9b      	lsrs	r3, r3, #10
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	08007248 	.word	0x08007248

0800360c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800360c:	b084      	sub	sp, #16
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	f107 001c 	add.w	r0, r7, #28
 800361a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	2b01      	cmp	r3, #1
 8003622:	d122      	bne.n	800366a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800364c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d105      	bne.n	800365e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f001 fb1c 	bl	8004c9c <USB_CoreReset>
 8003664:	4603      	mov	r3, r0
 8003666:	73fb      	strb	r3, [r7, #15]
 8003668:	e01a      	b.n	80036a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f001 fb10 	bl	8004c9c <USB_CoreReset>
 800367c:	4603      	mov	r3, r0
 800367e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
 8003692:	e005      	b.n	80036a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10b      	bne.n	80036be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f043 0206 	orr.w	r2, r3, #6
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f043 0220 	orr.w	r2, r3, #32
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036ca:	b004      	add	sp, #16
 80036cc:	4770      	bx	lr
	...

080036d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d165      	bne.n	80037b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a41      	ldr	r2, [pc, #260]	; (80037ec <USB_SetTurnaroundTime+0x11c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d906      	bls.n	80036fa <USB_SetTurnaroundTime+0x2a>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a40      	ldr	r2, [pc, #256]	; (80037f0 <USB_SetTurnaroundTime+0x120>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d202      	bcs.n	80036fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036f4:	230f      	movs	r3, #15
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e062      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a3c      	ldr	r2, [pc, #240]	; (80037f0 <USB_SetTurnaroundTime+0x120>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d306      	bcc.n	8003710 <USB_SetTurnaroundTime+0x40>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a3b      	ldr	r2, [pc, #236]	; (80037f4 <USB_SetTurnaroundTime+0x124>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d202      	bcs.n	8003710 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800370a:	230e      	movs	r3, #14
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e057      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4a38      	ldr	r2, [pc, #224]	; (80037f4 <USB_SetTurnaroundTime+0x124>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d306      	bcc.n	8003726 <USB_SetTurnaroundTime+0x56>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a37      	ldr	r2, [pc, #220]	; (80037f8 <USB_SetTurnaroundTime+0x128>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d202      	bcs.n	8003726 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003720:	230d      	movs	r3, #13
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e04c      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4a33      	ldr	r2, [pc, #204]	; (80037f8 <USB_SetTurnaroundTime+0x128>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d306      	bcc.n	800373c <USB_SetTurnaroundTime+0x6c>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a32      	ldr	r2, [pc, #200]	; (80037fc <USB_SetTurnaroundTime+0x12c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d802      	bhi.n	800373c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003736:	230c      	movs	r3, #12
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e041      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4a2f      	ldr	r2, [pc, #188]	; (80037fc <USB_SetTurnaroundTime+0x12c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d906      	bls.n	8003752 <USB_SetTurnaroundTime+0x82>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <USB_SetTurnaroundTime+0x130>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d802      	bhi.n	8003752 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800374c:	230b      	movs	r3, #11
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e036      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <USB_SetTurnaroundTime+0x130>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d906      	bls.n	8003768 <USB_SetTurnaroundTime+0x98>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4a29      	ldr	r2, [pc, #164]	; (8003804 <USB_SetTurnaroundTime+0x134>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d802      	bhi.n	8003768 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003762:	230a      	movs	r3, #10
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e02b      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4a26      	ldr	r2, [pc, #152]	; (8003804 <USB_SetTurnaroundTime+0x134>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d906      	bls.n	800377e <USB_SetTurnaroundTime+0xae>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4a25      	ldr	r2, [pc, #148]	; (8003808 <USB_SetTurnaroundTime+0x138>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d202      	bcs.n	800377e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003778:	2309      	movs	r3, #9
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e020      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4a21      	ldr	r2, [pc, #132]	; (8003808 <USB_SetTurnaroundTime+0x138>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d306      	bcc.n	8003794 <USB_SetTurnaroundTime+0xc4>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4a20      	ldr	r2, [pc, #128]	; (800380c <USB_SetTurnaroundTime+0x13c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d802      	bhi.n	8003794 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800378e:	2308      	movs	r3, #8
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e015      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4a1d      	ldr	r2, [pc, #116]	; (800380c <USB_SetTurnaroundTime+0x13c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d906      	bls.n	80037aa <USB_SetTurnaroundTime+0xda>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <USB_SetTurnaroundTime+0x140>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d202      	bcs.n	80037aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037a4:	2307      	movs	r3, #7
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e00a      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037aa:	2306      	movs	r3, #6
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	e007      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037b6:	2309      	movs	r3, #9
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e001      	b.n	80037c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037bc:	2309      	movs	r3, #9
 80037be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	029b      	lsls	r3, r3, #10
 80037d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	00d8acbf 	.word	0x00d8acbf
 80037f0:	00e4e1c0 	.word	0x00e4e1c0
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	01067380 	.word	0x01067380
 80037fc:	011a499f 	.word	0x011a499f
 8003800:	01312cff 	.word	0x01312cff
 8003804:	014ca43f 	.word	0x014ca43f
 8003808:	016e3600 	.word	0x016e3600
 800380c:	01a6ab1f 	.word	0x01a6ab1f
 8003810:	01e84800 	.word	0x01e84800

08003814 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f023 0201 	bic.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d115      	bne.n	80038a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003886:	2001      	movs	r0, #1
 8003888:	f7fd f8ca 	bl	8000a20 <HAL_Delay>
      ms++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3301      	adds	r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f001 f972 	bl	8004b7c <USB_GetMode>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d01e      	beq.n	80038dc <USB_SetCurrentMode+0x84>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b31      	cmp	r3, #49	; 0x31
 80038a2:	d9f0      	bls.n	8003886 <USB_SetCurrentMode+0x2e>
 80038a4:	e01a      	b.n	80038dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d115      	bne.n	80038d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038b8:	2001      	movs	r0, #1
 80038ba:	f7fd f8b1 	bl	8000a20 <HAL_Delay>
      ms++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f001 f959 	bl	8004b7c <USB_GetMode>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <USB_SetCurrentMode+0x84>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b31      	cmp	r3, #49	; 0x31
 80038d4:	d9f0      	bls.n	80038b8 <USB_SetCurrentMode+0x60>
 80038d6:	e001      	b.n	80038dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e005      	b.n	80038e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b32      	cmp	r3, #50	; 0x32
 80038e0:	d101      	bne.n	80038e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038f0:	b084      	sub	sp, #16
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	e009      	b.n	8003924 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	3340      	adds	r3, #64	; 0x40
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	2200      	movs	r2, #0
 800391c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	3301      	adds	r3, #1
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b0e      	cmp	r3, #14
 8003928:	d9f2      	bls.n	8003910 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800392a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11c      	bne.n	800396a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
 8003968:	e00b      	b.n	8003982 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003988:	461a      	mov	r2, r3
 800398a:	2300      	movs	r3, #0
 800398c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003994:	4619      	mov	r1, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399c:	461a      	mov	r2, r3
 800399e:	680b      	ldr	r3, [r1, #0]
 80039a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d10c      	bne.n	80039c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039ae:	2100      	movs	r1, #0
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f945 	bl	8003c40 <USB_SetDevSpeed>
 80039b6:	e008      	b.n	80039ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039b8:	2101      	movs	r1, #1
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f940 	bl	8003c40 <USB_SetDevSpeed>
 80039c0:	e003      	b.n	80039ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039c2:	2103      	movs	r1, #3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f93b 	bl	8003c40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039ca:	2110      	movs	r1, #16
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8f3 	bl	8003bb8 <USB_FlushTxFifo>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f90f 	bl	8003c00 <USB_FlushRxFifo>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fe:	461a      	mov	r2, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	e043      	b.n	8003a9e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a2c:	d118      	bne.n	8003a60 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a40:	461a      	mov	r2, r3
 8003a42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	e013      	b.n	8003a72 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a56:	461a      	mov	r2, r3
 8003a58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e008      	b.n	8003a72 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2300      	movs	r3, #0
 8003a70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2300      	movs	r3, #0
 8003a82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a90:	461a      	mov	r2, r3
 8003a92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d3b7      	bcc.n	8003a16 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	e043      	b.n	8003b34 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac2:	d118      	bne.n	8003af6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e013      	b.n	8003b08 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aec:	461a      	mov	r2, r3
 8003aee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e008      	b.n	8003b08 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	461a      	mov	r2, r3
 8003b04:	2300      	movs	r3, #0
 8003b06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	461a      	mov	r2, r3
 8003b16:	2300      	movs	r3, #0
 8003b18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b26:	461a      	mov	r2, r3
 8003b28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3301      	adds	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d3b7      	bcc.n	8003aac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f043 0210 	orr.w	r2, r3, #16
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <USB_DevInit+0x2c4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f043 0208 	orr.w	r2, r3, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bb0:	b004      	add	sp, #16
 8003bb2:	4770      	bx	lr
 8003bb4:	803c3800 	.word	0x803c3800

08003bb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	f043 0220 	orr.w	r2, r3, #32
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <USB_FlushTxFifo+0x44>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e006      	b.n	8003bf0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d0f1      	beq.n	8003bd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	00030d40 	.word	0x00030d40

08003c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2210      	movs	r2, #16
 8003c10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <USB_FlushRxFifo+0x3c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e006      	b.n	8003c30 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d0f1      	beq.n	8003c12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	00030d40 	.word	0x00030d40

08003c40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b087      	sub	sp, #28
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0306 	and.w	r3, r3, #6
 8003c8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]
 8003c96:	e00a      	b.n	8003cae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d002      	beq.n	8003ca4 <USB_GetDevSpeed+0x32>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b06      	cmp	r3, #6
 8003ca2:	d102      	bne.n	8003caa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	75fb      	strb	r3, [r7, #23]
 8003ca8:	e001      	b.n	8003cae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003caa:	230f      	movs	r3, #15
 8003cac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	785b      	ldrb	r3, [r3, #1]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d13a      	bne.n	8003d4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	2101      	movs	r1, #1
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	68f9      	ldr	r1, [r7, #12]
 8003cf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d155      	bne.n	8003dbc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	78db      	ldrb	r3, [r3, #3]
 8003d2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	059b      	lsls	r3, r3, #22
 8003d32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d34:	4313      	orrs	r3, r2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	0151      	lsls	r1, r2, #5
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e036      	b.n	8003dbc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	2101      	movs	r1, #1
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d11a      	bne.n	8003dbc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	78db      	ldrb	r3, [r3, #3]
 8003da0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003da2:	430b      	orrs	r3, r1
 8003da4:	4313      	orrs	r3, r2
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	0151      	lsls	r1, r2, #5
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	440a      	add	r2, r1
 8003dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d161      	bne.n	8003eac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dfe:	d11f      	bne.n	8003e40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	0151      	lsls	r1, r2, #5
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	440a      	add	r2, r1
 8003e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	0151      	lsls	r1, r2, #5
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	440a      	add	r2, r1
 8003e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e60:	4013      	ands	r3, r2
 8003e62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	69da      	ldr	r2, [r3, #28]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	2101      	movs	r1, #1
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	68f9      	ldr	r1, [r7, #12]
 8003e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e84:	4013      	ands	r3, r2
 8003e86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	0159      	lsls	r1, r3, #5
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <USB_DeactivateEndpoint+0x1b0>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
 8003eaa:	e060      	b.n	8003f6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec2:	d11f      	bne.n	8003f04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ee2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f24:	4013      	ands	r3, r2
 8003f26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	2101      	movs	r1, #1
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	43db      	mvns	r3, r3
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	0159      	lsls	r1, r3, #5
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	440b      	add	r3, r1
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	4619      	mov	r1, r3
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <USB_DeactivateEndpoint+0x1b4>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	ec337800 	.word	0xec337800
 8003f80:	eff37800 	.word	0xeff37800

08003f84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	f040 815c 	bne.w	800425e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d132      	bne.n	8004014 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400c:	0cdb      	lsrs	r3, r3, #19
 800400e:	04db      	lsls	r3, r3, #19
 8004010:	6113      	str	r3, [r2, #16]
 8004012:	e074      	b.n	80040fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	0151      	lsls	r1, r2, #5
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	440a      	add	r2, r1
 800402a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402e:	0cdb      	lsrs	r3, r3, #19
 8004030:	04db      	lsls	r3, r3, #19
 8004032:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	0151      	lsls	r1, r2, #5
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	440a      	add	r2, r1
 800404a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004052:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6959      	ldr	r1, [r3, #20]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	440b      	add	r3, r1
 8004070:	1e59      	subs	r1, r3, #1
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	fbb1 f3f3 	udiv	r3, r1, r3
 800407a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800407c:	4b9d      	ldr	r3, [pc, #628]	; (80042f4 <USB_EPStartXfer+0x370>)
 800407e:	400b      	ands	r3, r1
 8004080:	69b9      	ldr	r1, [r7, #24]
 8004082:	0148      	lsls	r0, r1, #5
 8004084:	69f9      	ldr	r1, [r7, #28]
 8004086:	4401      	add	r1, r0
 8004088:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800408c:	4313      	orrs	r3, r2
 800408e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a6:	69b9      	ldr	r1, [r7, #24]
 80040a8:	0148      	lsls	r0, r1, #5
 80040aa:	69f9      	ldr	r1, [r7, #28]
 80040ac:	4401      	add	r1, r0
 80040ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040b2:	4313      	orrs	r3, r2
 80040b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	78db      	ldrb	r3, [r3, #3]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d11f      	bne.n	80040fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d14b      	bne.n	800419c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	461a      	mov	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	78db      	ldrb	r3, [r3, #3]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d128      	bne.n	800417a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d110      	bne.n	800415a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	0151      	lsls	r1, r2, #5
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	440a      	add	r2, r1
 800414e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004152:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	e00f      	b.n	800417a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	0151      	lsls	r1, r2, #5
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	440a      	add	r2, r1
 8004170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004178:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004194:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e12f      	b.n	80043fc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	78db      	ldrb	r3, [r3, #3]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d015      	beq.n	80041f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8117 	beq.w	80043fc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	2101      	movs	r1, #1
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	69f9      	ldr	r1, [r7, #28]
 80041e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ea:	4313      	orrs	r3, r2
 80041ec:	634b      	str	r3, [r1, #52]	; 0x34
 80041ee:	e105      	b.n	80043fc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d110      	bne.n	8004222 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	440a      	add	r2, r1
 8004216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	e00f      	b.n	8004242 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	68d9      	ldr	r1, [r3, #12]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	b298      	uxth	r0, r3
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	4603      	mov	r3, r0
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fa2b 	bl	80046b2 <USB_WritePacket>
 800425c:	e0ce      	b.n	80043fc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	0151      	lsls	r1, r2, #5
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	440a      	add	r2, r1
 8004274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004278:	0cdb      	lsrs	r3, r3, #19
 800427a:	04db      	lsls	r3, r3, #19
 800427c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	0151      	lsls	r1, r2, #5
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	440a      	add	r2, r1
 8004294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004298:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800429c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d126      	bne.n	80042f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c0:	69b9      	ldr	r1, [r7, #24]
 80042c2:	0148      	lsls	r0, r1, #5
 80042c4:	69f9      	ldr	r1, [r7, #28]
 80042c6:	4401      	add	r1, r0
 80042c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042cc:	4313      	orrs	r3, r2
 80042ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ee:	6113      	str	r3, [r2, #16]
 80042f0:	e036      	b.n	8004360 <USB_EPStartXfer+0x3dc>
 80042f2:	bf00      	nop
 80042f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4413      	add	r3, r2
 8004302:	1e5a      	subs	r2, r3, #1
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	8afb      	ldrh	r3, [r7, #22]
 800431e:	04d9      	lsls	r1, r3, #19
 8004320:	4b39      	ldr	r3, [pc, #228]	; (8004408 <USB_EPStartXfer+0x484>)
 8004322:	400b      	ands	r3, r1
 8004324:	69b9      	ldr	r1, [r7, #24]
 8004326:	0148      	lsls	r0, r1, #5
 8004328:	69f9      	ldr	r1, [r7, #28]
 800432a:	4401      	add	r1, r0
 800432c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004330:	4313      	orrs	r3, r2
 8004332:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	8af9      	ldrh	r1, [r7, #22]
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	0148      	lsls	r0, r1, #5
 8004354:	69f9      	ldr	r1, [r7, #28]
 8004356:	4401      	add	r1, r0
 8004358:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800435c:	4313      	orrs	r3, r2
 800435e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10d      	bne.n	8004382 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	68d9      	ldr	r1, [r3, #12]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	460a      	mov	r2, r1
 8004380:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d128      	bne.n	80043dc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d110      	bne.n	80043bc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e00f      	b.n	80043dc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	1ff80000 	.word	0x1ff80000

0800440c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	2b01      	cmp	r3, #1
 800442a:	f040 80cd 	bne.w	80045c8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d132      	bne.n	800449c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004450:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004454:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004458:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004494:	0cdb      	lsrs	r3, r3, #19
 8004496:	04db      	lsls	r3, r3, #19
 8004498:	6113      	str	r3, [r2, #16]
 800449a:	e04e      	b.n	800453a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b6:	0cdb      	lsrs	r3, r3, #19
 80044b8:	04db      	lsls	r3, r3, #19
 80044ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d903      	bls.n	80044f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	0151      	lsls	r1, r2, #5
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	440a      	add	r2, r1
 800450a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	0148      	lsls	r0, r1, #5
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	4401      	add	r1, r0
 8004532:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004536:	4313      	orrs	r3, r2
 8004538:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d11e      	bne.n	800457e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004554:	461a      	mov	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004576:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	e092      	b.n	80046a4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	440a      	add	r2, r1
 8004594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004598:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800459c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d07e      	beq.n	80046a4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	2101      	movs	r1, #1
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c2:	4313      	orrs	r3, r2
 80045c4:	634b      	str	r3, [r1, #52]	; 0x34
 80045c6:	e06d      	b.n	80046a4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	0151      	lsls	r1, r2, #5
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	440a      	add	r2, r1
 80045de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e2:	0cdb      	lsrs	r3, r3, #19
 80045e4:	04db      	lsls	r3, r3, #19
 80045e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004602:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004606:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800460a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800463a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004652:	6939      	ldr	r1, [r7, #16]
 8004654:	0148      	lsls	r0, r1, #5
 8004656:	6979      	ldr	r1, [r7, #20]
 8004658:	4401      	add	r1, r0
 800465a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800465e:	4313      	orrs	r3, r2
 8004660:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d10d      	bne.n	8004684 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	68d9      	ldr	r1, [r3, #12]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	460a      	mov	r2, r1
 8004682:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	440a      	add	r2, r1
 800469a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800469e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b089      	sub	sp, #36	; 0x24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	4611      	mov	r1, r2
 80046be:	461a      	mov	r2, r3
 80046c0:	460b      	mov	r3, r1
 80046c2:	71fb      	strb	r3, [r7, #7]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d123      	bne.n	8004720 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046d8:	88bb      	ldrh	r3, [r7, #4]
 80046da:	3303      	adds	r3, #3
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	e018      	b.n	8004718 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	031a      	lsls	r2, r3, #12
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f2:	461a      	mov	r2, r3
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	3301      	adds	r3, #1
 8004704:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3301      	adds	r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	3301      	adds	r3, #1
 8004710:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	3301      	adds	r3, #1
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d3e2      	bcc.n	80046e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3724      	adds	r7, #36	; 0x24
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800472e:	b480      	push	{r7}
 8004730:	b08b      	sub	sp, #44	; 0x2c
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	4613      	mov	r3, r2
 800473a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	089b      	lsrs	r3, r3, #2
 8004748:	b29b      	uxth	r3, r3
 800474a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004754:	2300      	movs	r3, #0
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	e014      	b.n	8004784 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	601a      	str	r2, [r3, #0]
    pDest++;
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	3301      	adds	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	3301      	adds	r3, #1
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	3301      	adds	r3, #1
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	3301      	adds	r3, #1
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	3301      	adds	r3, #1
 8004782:	623b      	str	r3, [r7, #32]
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	429a      	cmp	r2, r3
 800478a:	d3e6      	bcc.n	800475a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800478c:	8bfb      	ldrh	r3, [r7, #30]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01e      	beq.n	80047d0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479c:	461a      	mov	r2, r3
 800479e:	f107 0310 	add.w	r3, r7, #16
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	701a      	strb	r2, [r3, #0]
      i++;
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	3301      	adds	r3, #1
 80047bc:	623b      	str	r3, [r7, #32]
      pDest++;
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	3301      	adds	r3, #1
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047c4:	8bfb      	ldrh	r3, [r7, #30]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047ca:	8bfb      	ldrh	r3, [r7, #30]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ea      	bne.n	80047a6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	372c      	adds	r7, #44	; 0x2c
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d12c      	bne.n	8004854 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db12      	blt.n	8004832 <USB_EPSetStall+0x54>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00f      	beq.n	8004832 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	440a      	add	r2, r1
 8004828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004830:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	0151      	lsls	r1, r2, #5
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	440a      	add	r2, r1
 8004848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e02b      	b.n	80048ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	db12      	blt.n	800488c <USB_EPSetStall+0xae>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00f      	beq.n	800488c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	440a      	add	r2, r1
 8004882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800488a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	0151      	lsls	r1, r2, #5
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	440a      	add	r2, r1
 80048a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d128      	bne.n	8004928 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	78db      	ldrb	r3, [r3, #3]
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d003      	beq.n	8004906 <USB_EPClearStall+0x4c>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d138      	bne.n	8004978 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e027      	b.n	8004978 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004946:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	78db      	ldrb	r3, [r3, #3]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d003      	beq.n	8004958 <USB_EPClearStall+0x9e>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	78db      	ldrb	r3, [r3, #3]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d10f      	bne.n	8004978 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	440a      	add	r2, r1
 800496e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004976:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	460b      	mov	r3, r1
 8004990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80049ba:	68f9      	ldr	r1, [r7, #12]
 80049bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049ec:	f023 0303 	bic.w	r3, r3, #3
 80049f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a00:	f023 0302 	bic.w	r3, r3, #2
 8004a04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a42:	f043 0302 	orr.w	r3, r3, #2
 8004a46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	0c1b      	lsrs	r3, r3, #16
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	b29b      	uxth	r3, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b12:	68bb      	ldr	r3, [r7, #8]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	01db      	lsls	r3, r3, #7
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f003 0301 	and.w	r3, r3, #1
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bb6:	f023 0307 	bic.w	r3, r3, #7
 8004bba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	460b      	mov	r3, r1
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	333c      	adds	r3, #60	; 0x3c
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <USB_EP0_OutStart+0xb8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d90a      	bls.n	8004c1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c14:	d101      	bne.n	8004c1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e037      	b.n	8004c8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	2300      	movs	r3, #0
 8004c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c48:	f043 0318 	orr.w	r3, r3, #24
 8004c4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c62:	7afb      	ldrb	r3, [r7, #11]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d10f      	bne.n	8004c88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6e:	461a      	mov	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	4f54300a 	.word	0x4f54300a

08004c9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <USB_CoreReset+0x60>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e01a      	b.n	8004cee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	daf3      	bge.n	8004ca8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f043 0201 	orr.w	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <USB_CoreReset+0x60>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d901      	bls.n	8004ce0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d0f1      	beq.n	8004cd0 <USB_CoreReset+0x34>

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	00030d40 	.word	0x00030d40

08004d00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d10:	f002 f962 	bl	8006fd8 <USBD_static_malloc>
 8004d14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004d24:	2302      	movs	r3, #2
 8004d26:	e066      	b.n	8004df6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7c1b      	ldrb	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d119      	bne.n	8004d6c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	2181      	movs	r1, #129	; 0x81
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f002 f826 	bl	8006d92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d50:	2202      	movs	r2, #2
 8004d52:	2101      	movs	r1, #1
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f002 f81c 	bl	8006d92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2210      	movs	r2, #16
 8004d66:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004d6a:	e016      	b.n	8004d9a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d6c:	2340      	movs	r3, #64	; 0x40
 8004d6e:	2202      	movs	r2, #2
 8004d70:	2181      	movs	r1, #129	; 0x81
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f002 f80d 	bl	8006d92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d7e:	2340      	movs	r3, #64	; 0x40
 8004d80:	2202      	movs	r2, #2
 8004d82:	2101      	movs	r1, #1
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f002 f804 	bl	8006d92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2210      	movs	r2, #16
 8004d96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	2182      	movs	r1, #130	; 0x82
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 fff6 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7c1b      	ldrb	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dda:	2101      	movs	r1, #1
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f002 f8c7 	bl	8006f70 <USBD_LL_PrepareReceive>
 8004de2:	e007      	b.n	8004df4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dea:	2340      	movs	r3, #64	; 0x40
 8004dec:	2101      	movs	r1, #1
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f002 f8be 	bl	8006f70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e0a:	2181      	movs	r1, #129	; 0x81
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f001 ffe6 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e18:	2101      	movs	r1, #1
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 ffdf 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004e28:	2182      	movs	r1, #130	; 0x82
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 ffd7 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00e      	beq.n	8004e68 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f002 f8ca 	bl	8006ff4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0af      	b.n	8004ffc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d03f      	beq.n	8004f28 <USBD_CDC_Setup+0xb4>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	f040 809f 	bne.w	8004fec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	88db      	ldrh	r3, [r3, #6]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d02e      	beq.n	8004f14 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b25b      	sxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	da16      	bge.n	8004eee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004ecc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	88d2      	ldrh	r2, [r2, #6]
 8004ed2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	88db      	ldrh	r3, [r3, #6]
 8004ed8:	2b07      	cmp	r3, #7
 8004eda:	bf28      	it	cs
 8004edc:	2307      	movcs	r3, #7
 8004ede:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	89fa      	ldrh	r2, [r7, #14]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 fb19 	bl	800651e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004eec:	e085      	b.n	8004ffa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	785a      	ldrb	r2, [r3, #1]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	88db      	ldrh	r3, [r3, #6]
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004f04:	6939      	ldr	r1, [r7, #16]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	88db      	ldrh	r3, [r3, #6]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f001 fb32 	bl	8006576 <USBD_CtlPrepareRx>
      break;
 8004f12:	e072      	b.n	8004ffa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	7850      	ldrb	r0, [r2, #1]
 8004f20:	2200      	movs	r2, #0
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	4798      	blx	r3
      break;
 8004f26:	e068      	b.n	8004ffa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	785b      	ldrb	r3, [r3, #1]
 8004f2c:	2b0b      	cmp	r3, #11
 8004f2e:	d852      	bhi.n	8004fd6 <USBD_CDC_Setup+0x162>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <USBD_CDC_Setup+0xc4>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f69 	.word	0x08004f69
 8004f3c:	08004fe5 	.word	0x08004fe5
 8004f40:	08004fd7 	.word	0x08004fd7
 8004f44:	08004fd7 	.word	0x08004fd7
 8004f48:	08004fd7 	.word	0x08004fd7
 8004f4c:	08004fd7 	.word	0x08004fd7
 8004f50:	08004fd7 	.word	0x08004fd7
 8004f54:	08004fd7 	.word	0x08004fd7
 8004f58:	08004fd7 	.word	0x08004fd7
 8004f5c:	08004fd7 	.word	0x08004fd7
 8004f60:	08004f93 	.word	0x08004f93
 8004f64:	08004fbd 	.word	0x08004fbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d107      	bne.n	8004f84 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f74:	f107 030a 	add.w	r3, r7, #10
 8004f78:	2202      	movs	r2, #2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 face 	bl	800651e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f82:	e032      	b.n	8004fea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 fa58 	bl	800643c <USBD_CtlError>
            ret = USBD_FAIL;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8004f90:	e02b      	b.n	8004fea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d107      	bne.n	8004fae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f9e:	f107 030d 	add.w	r3, r7, #13
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f001 fab9 	bl	800651e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fac:	e01d      	b.n	8004fea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 fa43 	bl	800643c <USBD_CtlError>
            ret = USBD_FAIL;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8004fba:	e016      	b.n	8004fea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d00f      	beq.n	8004fe8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 fa36 	bl	800643c <USBD_CtlError>
            ret = USBD_FAIL;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004fd4:	e008      	b.n	8004fe8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fa2f 	bl	800643c <USBD_CtlError>
          ret = USBD_FAIL;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fe2:	e002      	b.n	8004fea <USBD_CDC_Setup+0x176>
          break;
 8004fe4:	bf00      	nop
 8004fe6:	e008      	b.n	8004ffa <USBD_CDC_Setup+0x186>
          break;
 8004fe8:	bf00      	nop
      }
      break;
 8004fea:	e006      	b.n	8004ffa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 fa24 	bl	800643c <USBD_CtlError>
      ret = USBD_FAIL;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff8:	bf00      	nop
  }

  return (uint8_t)ret;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005022:	2303      	movs	r3, #3
 8005024:	e04f      	b.n	80050c6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800502c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	3318      	adds	r3, #24
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d029      	beq.n	8005098 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	3318      	adds	r3, #24
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	78f9      	ldrb	r1, [r7, #3]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	460b      	mov	r3, r1
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	1a5b      	subs	r3, r3, r1
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4403      	add	r3, r0
 8005064:	3344      	adds	r3, #68	; 0x44
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	fbb2 f1f3 	udiv	r1, r2, r3
 800506c:	fb03 f301 	mul.w	r3, r3, r1
 8005070:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005072:	2b00      	cmp	r3, #0
 8005074:	d110      	bne.n	8005098 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005076:	78fa      	ldrb	r2, [r7, #3]
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	3318      	adds	r3, #24
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800508a:	78f9      	ldrb	r1, [r7, #3]
 800508c:	2300      	movs	r3, #0
 800508e:	2200      	movs	r2, #0
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 ff4c 	bl	8006f2e <USBD_LL_Transmit>
 8005096:	e015      	b.n	80050c4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00b      	beq.n	80050c4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e015      	b.n	800511c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f001 ff5c 	bl	8006fb2 <USBD_LL_GetRxDataSize>
 80050fa:	4602      	mov	r2, r0
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005116:	4611      	mov	r1, r2
 8005118:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005132:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800513a:	2303      	movs	r3, #3
 800513c:	e01b      	b.n	8005176 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d015      	beq.n	8005174 <USBD_CDC_EP0_RxReady+0x50>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800514e:	2bff      	cmp	r3, #255	; 0xff
 8005150:	d010      	beq.n	8005174 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005160:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005168:	b292      	uxth	r2, r2
 800516a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	22ff      	movs	r2, #255	; 0xff
 8005170:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2243      	movs	r2, #67	; 0x43
 800518c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800518e:	4b03      	ldr	r3, [pc, #12]	; (800519c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	20000098 	.word	0x20000098

080051a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2243      	movs	r2, #67	; 0x43
 80051ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80051ae:	4b03      	ldr	r3, [pc, #12]	; (80051bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000054 	.word	0x20000054

080051c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2243      	movs	r2, #67	; 0x43
 80051cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80051ce:	4b03      	ldr	r3, [pc, #12]	; (80051dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	200000dc 	.word	0x200000dc

080051e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	220a      	movs	r2, #10
 80051ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80051ee:	4b03      	ldr	r3, [pc, #12]	; (80051fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	20000010 	.word	0x20000010

08005200 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005210:	2303      	movs	r3, #3
 8005212:	e004      	b.n	800521e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800522a:	b480      	push	{r7}
 800522c:	b087      	sub	sp, #28
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800523c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005244:	2303      	movs	r3, #3
 8005246:	e008      	b.n	800525a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005276:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800527e:	2303      	movs	r3, #3
 8005280:	e004      	b.n	800528c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e01a      	b.n	80052f0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d114      	bne.n	80052ee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80052e2:	2181      	movs	r1, #129	; 0x81
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f001 fe22 	bl	8006f2e <USBD_LL_Transmit>

    ret = USBD_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005306:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005312:	2303      	movs	r3, #3
 8005314:	e016      	b.n	8005344 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	7c1b      	ldrb	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005328:	2101      	movs	r1, #1
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f001 fe20 	bl	8006f70 <USBD_LL_PrepareReceive>
 8005330:	e007      	b.n	8005342 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	2101      	movs	r1, #1
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 fe17 	bl	8006f70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	4613      	mov	r3, r2
 8005358:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005360:	2303      	movs	r3, #3
 8005362:	e01f      	b.n	80053a4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	79fa      	ldrb	r2, [r7, #7]
 8005396:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f001 fc93 	bl	8006cc4 <USBD_LL_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e016      	b.n	80053f2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	f107 020e 	add.w	r2, r7, #14
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
 80053e8:	4602      	mov	r2, r0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fcaa 	bl	8006d5c <USBD_LL_Start>
 8005408:	4603      	mov	r3, r0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005434:	2303      	movs	r3, #3
 8005436:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	4611      	mov	r1, r2
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	4611      	mov	r1, r2
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
  }

  return USBD_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 ff90 	bl	80063c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80054b6:	461a      	mov	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d01a      	beq.n	8005502 <USBD_LL_SetupStage+0x72>
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d822      	bhi.n	8005516 <USBD_LL_SetupStage+0x86>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <USBD_LL_SetupStage+0x4a>
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d00a      	beq.n	80054ee <USBD_LL_SetupStage+0x5e>
 80054d8:	e01d      	b.n	8005516 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa62 	bl	80059ac <USBD_StdDevReq>
 80054e8:	4603      	mov	r3, r0
 80054ea:	73fb      	strb	r3, [r7, #15]
      break;
 80054ec:	e020      	b.n	8005530 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fac6 	bl	8005a88 <USBD_StdItfReq>
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005500:	e016      	b.n	8005530 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fb05 	bl	8005b1a <USBD_StdEPReq>
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]
      break;
 8005514:	e00c      	b.n	8005530 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800551c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005520:	b2db      	uxtb	r3, r3
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 fc79 	bl	8006e1c <USBD_LL_StallEP>
 800552a:	4603      	mov	r3, r0
 800552c:	73fb      	strb	r3, [r7, #15]
      break;
 800552e:	bf00      	nop
  }

  return ret;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	460b      	mov	r3, r1
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005548:	7afb      	ldrb	r3, [r7, #11]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d138      	bne.n	80055c0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005554:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800555c:	2b03      	cmp	r3, #3
 800555e:	d14a      	bne.n	80055f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	429a      	cmp	r2, r3
 800556a:	d913      	bls.n	8005594 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	1ad2      	subs	r2, r2, r3
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	4293      	cmp	r3, r2
 8005584:	bf28      	it	cs
 8005586:	4613      	movcs	r3, r2
 8005588:	461a      	mov	r2, r3
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f001 f80f 	bl	80065b0 <USBD_CtlContinueRx>
 8005592:	e030      	b.n	80055f6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b03      	cmp	r3, #3
 800559e:	d10b      	bne.n	80055b8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f001 f80a 	bl	80065d2 <USBD_CtlSendStatus>
 80055be:	e01a      	b.n	80055f6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d114      	bne.n	80055f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	7afa      	ldrb	r2, [r7, #11]
 80055e2:	4611      	mov	r1, r2
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	4798      	blx	r3
 80055e8:	4603      	mov	r3, r0
 80055ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	e000      	b.n	80055f8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	460b      	mov	r3, r1
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800560e:	7afb      	ldrb	r3, [r7, #11]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d16b      	bne.n	80056ec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3314      	adds	r3, #20
 8005618:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005620:	2b02      	cmp	r3, #2
 8005622:	d156      	bne.n	80056d2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	429a      	cmp	r2, r3
 800562e:	d914      	bls.n	800565a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	1ad2      	subs	r2, r2, r3
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	461a      	mov	r2, r3
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 ff84 	bl	8006554 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800564c:	2300      	movs	r3, #0
 800564e:	2200      	movs	r2, #0
 8005650:	2100      	movs	r1, #0
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f001 fc8c 	bl	8006f70 <USBD_LL_PrepareReceive>
 8005658:	e03b      	b.n	80056d2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d11c      	bne.n	80056a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800566e:	429a      	cmp	r2, r3
 8005670:	d316      	bcc.n	80056a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800567c:	429a      	cmp	r2, r3
 800567e:	d20f      	bcs.n	80056a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005680:	2200      	movs	r2, #0
 8005682:	2100      	movs	r1, #0
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 ff65 	bl	8006554 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005692:	2300      	movs	r3, #0
 8005694:	2200      	movs	r2, #0
 8005696:	2100      	movs	r1, #0
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f001 fc69 	bl	8006f70 <USBD_LL_PrepareReceive>
 800569e:	e018      	b.n	80056d2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d10b      	bne.n	80056c4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d005      	beq.n	80056c4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f001 fba8 	bl	8006e1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 ff93 	bl	80065f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d122      	bne.n	8005722 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff fe98 	bl	8005412 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056ea:	e01a      	b.n	8005722 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d114      	bne.n	8005722 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00e      	beq.n	8005722 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	7afa      	ldrb	r2, [r7, #11]
 800570e:	4611      	mov	r1, r2
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	4798      	blx	r3
 8005714:	4603      	mov	r3, r0
 8005716:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005718:	7dfb      	ldrb	r3, [r7, #23]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800571e:	7dfb      	ldrb	r3, [r7, #23]
 8005720:	e000      	b.n	8005724 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	e02f      	b.n	80057c0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00f      	beq.n	800578a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6852      	ldr	r2, [r2, #4]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	4611      	mov	r1, r2
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800578a:	2340      	movs	r3, #64	; 0x40
 800578c:	2200      	movs	r2, #0
 800578e:	2100      	movs	r1, #0
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f001 fafe 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2240      	movs	r2, #64	; 0x40
 80057a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057a6:	2340      	movs	r3, #64	; 0x40
 80057a8:	2200      	movs	r2, #0
 80057aa:	2180      	movs	r1, #128	; 0x80
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 faf0 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2204      	movs	r2, #4
 8005802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b04      	cmp	r3, #4
 8005826:	d106      	bne.n	8005836 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800582e:	b2da      	uxtb	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005856:	2303      	movs	r3, #3
 8005858:	e012      	b.n	8005880 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b03      	cmp	r3, #3
 8005864:	d10b      	bne.n	800587e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800589e:	2303      	movs	r3, #3
 80058a0:	e014      	b.n	80058cc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d10d      	bne.n	80058ca <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	78fa      	ldrb	r2, [r7, #3]
 80058c4:	4611      	mov	r1, r2
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e014      	b.n	8005918 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d10d      	bne.n	8005916 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	4611      	mov	r1, r2
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d009      	beq.n	8005964 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6852      	ldr	r2, [r2, #4]
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	4611      	mov	r1, r2
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
  }

  return USBD_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800596e:	b480      	push	{r7}
 8005970:	b087      	sub	sp, #28
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	3301      	adds	r3, #1
 8005984:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800598c:	8a3b      	ldrh	r3, [r7, #16]
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	b21a      	sxth	r2, r3
 8005992:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005996:	4313      	orrs	r3, r2
 8005998:	b21b      	sxth	r3, r3
 800599a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800599c:	89fb      	ldrh	r3, [r7, #14]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d005      	beq.n	80059d2 <USBD_StdDevReq+0x26>
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d853      	bhi.n	8005a72 <USBD_StdDevReq+0xc6>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <USBD_StdDevReq+0x3a>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d14f      	bne.n	8005a72 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]
      break;
 80059e4:	e04a      	b.n	8005a7c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	d83b      	bhi.n	8005a66 <USBD_StdDevReq+0xba>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <USBD_StdDevReq+0x48>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a49 	.word	0x08005a49
 80059f8:	08005a5d 	.word	0x08005a5d
 80059fc:	08005a67 	.word	0x08005a67
 8005a00:	08005a53 	.word	0x08005a53
 8005a04:	08005a67 	.word	0x08005a67
 8005a08:	08005a27 	.word	0x08005a27
 8005a0c:	08005a1d 	.word	0x08005a1d
 8005a10:	08005a67 	.word	0x08005a67
 8005a14:	08005a3f 	.word	0x08005a3f
 8005a18:	08005a31 	.word	0x08005a31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f9de 	bl	8005de0 <USBD_GetDescriptor>
          break;
 8005a24:	e024      	b.n	8005a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fb43 	bl	80060b4 <USBD_SetAddress>
          break;
 8005a2e:	e01f      	b.n	8005a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fb82 	bl	800613c <USBD_SetConfig>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73fb      	strb	r3, [r7, #15]
          break;
 8005a3c:	e018      	b.n	8005a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fc21 	bl	8006288 <USBD_GetConfig>
          break;
 8005a46:	e013      	b.n	8005a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fc52 	bl	80062f4 <USBD_GetStatus>
          break;
 8005a50:	e00e      	b.n	8005a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fc81 	bl	800635c <USBD_SetFeature>
          break;
 8005a5a:	e009      	b.n	8005a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fc90 	bl	8006384 <USBD_ClrFeature>
          break;
 8005a64:	e004      	b.n	8005a70 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fce7 	bl	800643c <USBD_CtlError>
          break;
 8005a6e:	bf00      	nop
      }
      break;
 8005a70:	e004      	b.n	8005a7c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fce1 	bl	800643c <USBD_CtlError>
      break;
 8005a7a:	bf00      	nop
  }

  return ret;
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop

08005a88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d005      	beq.n	8005aae <USBD_StdItfReq+0x26>
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	d82f      	bhi.n	8005b06 <USBD_StdItfReq+0x7e>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <USBD_StdItfReq+0x26>
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d12b      	bne.n	8005b06 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d81d      	bhi.n	8005af8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	889b      	ldrh	r3, [r3, #4]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d813      	bhi.n	8005aee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	4798      	blx	r3
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	88db      	ldrh	r3, [r3, #6]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d110      	bne.n	8005b02 <USBD_StdItfReq+0x7a>
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10d      	bne.n	8005b02 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fd73 	bl	80065d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005aec:	e009      	b.n	8005b02 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fca3 	bl	800643c <USBD_CtlError>
          break;
 8005af6:	e004      	b.n	8005b02 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fc9e 	bl	800643c <USBD_CtlError>
          break;
 8005b00:	e000      	b.n	8005b04 <USBD_StdItfReq+0x7c>
          break;
 8005b02:	bf00      	nop
      }
      break;
 8005b04:	e004      	b.n	8005b10 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc97 	bl	800643c <USBD_CtlError>
      break;
 8005b0e:	bf00      	nop
  }

  return ret;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	889b      	ldrh	r3, [r3, #4]
 8005b2c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d007      	beq.n	8005b4a <USBD_StdEPReq+0x30>
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	f200 8145 	bhi.w	8005dca <USBD_StdEPReq+0x2b0>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <USBD_StdEPReq+0x44>
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	f040 8140 	bne.w	8005dca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5c:	e13a      	b.n	8005dd4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	785b      	ldrb	r3, [r3, #1]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d007      	beq.n	8005b76 <USBD_StdEPReq+0x5c>
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	f300 8129 	bgt.w	8005dbe <USBD_StdEPReq+0x2a4>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d07f      	beq.n	8005c70 <USBD_StdEPReq+0x156>
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d03c      	beq.n	8005bee <USBD_StdEPReq+0xd4>
 8005b74:	e123      	b.n	8005dbe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d002      	beq.n	8005b88 <USBD_StdEPReq+0x6e>
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d016      	beq.n	8005bb4 <USBD_StdEPReq+0x9a>
 8005b86:	e02c      	b.n	8005be2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b88:	7bbb      	ldrb	r3, [r7, #14]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <USBD_StdEPReq+0x90>
 8005b8e:	7bbb      	ldrb	r3, [r7, #14]
 8005b90:	2b80      	cmp	r3, #128	; 0x80
 8005b92:	d00a      	beq.n	8005baa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f001 f93f 	bl	8006e1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b9e:	2180      	movs	r1, #128	; 0x80
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 f93b 	bl	8006e1c <USBD_LL_StallEP>
 8005ba6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ba8:	e020      	b.n	8005bec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fc45 	bl	800643c <USBD_CtlError>
              break;
 8005bb2:	e01b      	b.n	8005bec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	885b      	ldrh	r3, [r3, #2]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10e      	bne.n	8005bda <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <USBD_StdEPReq+0xc0>
 8005bc2:	7bbb      	ldrb	r3, [r7, #14]
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d008      	beq.n	8005bda <USBD_StdEPReq+0xc0>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	88db      	ldrh	r3, [r3, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 f921 	bl	8006e1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fcf9 	bl	80065d2 <USBD_CtlSendStatus>

              break;
 8005be0:	e004      	b.n	8005bec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fc29 	bl	800643c <USBD_CtlError>
              break;
 8005bea:	bf00      	nop
          }
          break;
 8005bec:	e0ec      	b.n	8005dc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d002      	beq.n	8005c00 <USBD_StdEPReq+0xe6>
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d016      	beq.n	8005c2c <USBD_StdEPReq+0x112>
 8005bfe:	e030      	b.n	8005c62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00d      	beq.n	8005c22 <USBD_StdEPReq+0x108>
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	2b80      	cmp	r3, #128	; 0x80
 8005c0a:	d00a      	beq.n	8005c22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c0c:	7bbb      	ldrb	r3, [r7, #14]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 f903 	bl	8006e1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c16:	2180      	movs	r1, #128	; 0x80
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f8ff 	bl	8006e1c <USBD_LL_StallEP>
 8005c1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c20:	e025      	b.n	8005c6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fc09 	bl	800643c <USBD_CtlError>
              break;
 8005c2a:	e020      	b.n	8005c6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	885b      	ldrh	r3, [r3, #2]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11b      	bne.n	8005c6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c3e:	7bbb      	ldrb	r3, [r7, #14]
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 f909 	bl	8006e5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fcc2 	bl	80065d2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005c60:	e004      	b.n	8005c6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fbe9 	bl	800643c <USBD_CtlError>
              break;
 8005c6a:	e000      	b.n	8005c6e <USBD_StdEPReq+0x154>
              break;
 8005c6c:	bf00      	nop
          }
          break;
 8005c6e:	e0ab      	b.n	8005dc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d002      	beq.n	8005c82 <USBD_StdEPReq+0x168>
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d032      	beq.n	8005ce6 <USBD_StdEPReq+0x1cc>
 8005c80:	e097      	b.n	8005db2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <USBD_StdEPReq+0x17e>
 8005c88:	7bbb      	ldrb	r3, [r7, #14]
 8005c8a:	2b80      	cmp	r3, #128	; 0x80
 8005c8c:	d004      	beq.n	8005c98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fbd3 	bl	800643c <USBD_CtlError>
                break;
 8005c96:	e091      	b.n	8005dbc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	da0b      	bge.n	8005cb8 <USBD_StdEPReq+0x19e>
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	3310      	adds	r3, #16
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	e00b      	b.n	8005cd0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	3304      	adds	r3, #4
 8005cd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fc1d 	bl	800651e <USBD_CtlSendData>
              break;
 8005ce4:	e06a      	b.n	8005dbc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da11      	bge.n	8005d12 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	f003 020f 	and.w	r2, r3, #15
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	3324      	adds	r3, #36	; 0x24
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d117      	bne.n	8005d38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fb96 	bl	800643c <USBD_CtlError>
                  break;
 8005d10:	e054      	b.n	8005dbc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d12:	7bbb      	ldrb	r3, [r7, #14]
 8005d14:	f003 020f 	and.w	r2, r3, #15
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d104      	bne.n	8005d38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fb83 	bl	800643c <USBD_CtlError>
                  break;
 8005d36:	e041      	b.n	8005dbc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	da0b      	bge.n	8005d58 <USBD_StdEPReq+0x23e>
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	3310      	adds	r3, #16
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	3304      	adds	r3, #4
 8005d56:	e00b      	b.n	8005d70 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3304      	adds	r3, #4
 8005d70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <USBD_StdEPReq+0x264>
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d103      	bne.n	8005d86 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e00e      	b.n	8005da4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 f884 	bl	8006e98 <USBD_LL_IsStallEP>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	e002      	b.n	8005da4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2202      	movs	r2, #2
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fbb7 	bl	800651e <USBD_CtlSendData>
              break;
 8005db0:	e004      	b.n	8005dbc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fb41 	bl	800643c <USBD_CtlError>
              break;
 8005dba:	bf00      	nop
          }
          break;
 8005dbc:	e004      	b.n	8005dc8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fb3b 	bl	800643c <USBD_CtlError>
          break;
 8005dc6:	bf00      	nop
      }
      break;
 8005dc8:	e004      	b.n	8005dd4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fb35 	bl	800643c <USBD_CtlError>
      break;
 8005dd2:	bf00      	nop
  }

  return ret;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	885b      	ldrh	r3, [r3, #2]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	2b06      	cmp	r3, #6
 8005e02:	f200 8128 	bhi.w	8006056 <USBD_GetDescriptor+0x276>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <USBD_GetDescriptor+0x2c>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e41 	.word	0x08005e41
 8005e14:	08005e81 	.word	0x08005e81
 8005e18:	08006057 	.word	0x08006057
 8005e1c:	08006057 	.word	0x08006057
 8005e20:	08005ff7 	.word	0x08005ff7
 8005e24:	08006023 	.word	0x08006023
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	7c12      	ldrb	r2, [r2, #16]
 8005e34:	f107 0108 	add.w	r1, r7, #8
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4798      	blx	r3
 8005e3c:	60f8      	str	r0, [r7, #12]
      break;
 8005e3e:	e112      	b.n	8006066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	7c1b      	ldrb	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	f107 0208 	add.w	r2, r7, #8
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
 8005e58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	2202      	movs	r2, #2
 8005e60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e62:	e100      	b.n	8006066 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	f107 0208 	add.w	r2, r7, #8
 8005e70:	4610      	mov	r0, r2
 8005e72:	4798      	blx	r3
 8005e74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	701a      	strb	r2, [r3, #0]
      break;
 8005e7e:	e0f2      	b.n	8006066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	885b      	ldrh	r3, [r3, #2]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b05      	cmp	r3, #5
 8005e88:	f200 80ac 	bhi.w	8005fe4 <USBD_GetDescriptor+0x204>
 8005e8c:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <USBD_GetDescriptor+0xb4>)
 8005e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e92:	bf00      	nop
 8005e94:	08005ead 	.word	0x08005ead
 8005e98:	08005ee1 	.word	0x08005ee1
 8005e9c:	08005f15 	.word	0x08005f15
 8005ea0:	08005f49 	.word	0x08005f49
 8005ea4:	08005f7d 	.word	0x08005f7d
 8005ea8:	08005fb1 	.word	0x08005fb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	7c12      	ldrb	r2, [r2, #16]
 8005ec4:	f107 0108 	add.w	r1, r7, #8
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
 8005ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ece:	e091      	b.n	8005ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fab2 	bl	800643c <USBD_CtlError>
            err++;
 8005ed8:	7afb      	ldrb	r3, [r7, #11]
 8005eda:	3301      	adds	r3, #1
 8005edc:	72fb      	strb	r3, [r7, #11]
          break;
 8005ede:	e089      	b.n	8005ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	7c12      	ldrb	r2, [r2, #16]
 8005ef8:	f107 0108 	add.w	r1, r7, #8
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
 8005f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f02:	e077      	b.n	8005ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa98 	bl	800643c <USBD_CtlError>
            err++;
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	72fb      	strb	r3, [r7, #11]
          break;
 8005f12:	e06f      	b.n	8005ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	7c12      	ldrb	r2, [r2, #16]
 8005f2c:	f107 0108 	add.w	r1, r7, #8
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
 8005f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f36:	e05d      	b.n	8005ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa7e 	bl	800643c <USBD_CtlError>
            err++;
 8005f40:	7afb      	ldrb	r3, [r7, #11]
 8005f42:	3301      	adds	r3, #1
 8005f44:	72fb      	strb	r3, [r7, #11]
          break;
 8005f46:	e055      	b.n	8005ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	7c12      	ldrb	r2, [r2, #16]
 8005f60:	f107 0108 	add.w	r1, r7, #8
 8005f64:	4610      	mov	r0, r2
 8005f66:	4798      	blx	r3
 8005f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f6a:	e043      	b.n	8005ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa64 	bl	800643c <USBD_CtlError>
            err++;
 8005f74:	7afb      	ldrb	r3, [r7, #11]
 8005f76:	3301      	adds	r3, #1
 8005f78:	72fb      	strb	r3, [r7, #11]
          break;
 8005f7a:	e03b      	b.n	8005ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00b      	beq.n	8005fa0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	7c12      	ldrb	r2, [r2, #16]
 8005f94:	f107 0108 	add.w	r1, r7, #8
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
 8005f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f9e:	e029      	b.n	8005ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa4a 	bl	800643c <USBD_CtlError>
            err++;
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	3301      	adds	r3, #1
 8005fac:	72fb      	strb	r3, [r7, #11]
          break;
 8005fae:	e021      	b.n	8005ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00b      	beq.n	8005fd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	7c12      	ldrb	r2, [r2, #16]
 8005fc8:	f107 0108 	add.w	r1, r7, #8
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4798      	blx	r3
 8005fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fd2:	e00f      	b.n	8005ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa30 	bl	800643c <USBD_CtlError>
            err++;
 8005fdc:	7afb      	ldrb	r3, [r7, #11]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8005fe2:	e007      	b.n	8005ff4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa28 	bl	800643c <USBD_CtlError>
          err++;
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005ff2:	bf00      	nop
      }
      break;
 8005ff4:	e037      	b.n	8006066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	7c1b      	ldrb	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006006:	f107 0208 	add.w	r2, r7, #8
 800600a:	4610      	mov	r0, r2
 800600c:	4798      	blx	r3
 800600e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006010:	e029      	b.n	8006066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa11 	bl	800643c <USBD_CtlError>
        err++;
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	3301      	adds	r3, #1
 800601e:	72fb      	strb	r3, [r7, #11]
      break;
 8006020:	e021      	b.n	8006066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	7c1b      	ldrb	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10d      	bne.n	8006046 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	f107 0208 	add.w	r2, r7, #8
 8006036:	4610      	mov	r0, r2
 8006038:	4798      	blx	r3
 800603a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3301      	adds	r3, #1
 8006040:	2207      	movs	r2, #7
 8006042:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006044:	e00f      	b.n	8006066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9f7 	bl	800643c <USBD_CtlError>
        err++;
 800604e:	7afb      	ldrb	r3, [r7, #11]
 8006050:	3301      	adds	r3, #1
 8006052:	72fb      	strb	r3, [r7, #11]
      break;
 8006054:	e007      	b.n	8006066 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9ef 	bl	800643c <USBD_CtlError>
      err++;
 800605e:	7afb      	ldrb	r3, [r7, #11]
 8006060:	3301      	adds	r3, #1
 8006062:	72fb      	strb	r3, [r7, #11]
      break;
 8006064:	bf00      	nop
  }

  if (err != 0U)
 8006066:	7afb      	ldrb	r3, [r7, #11]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d11e      	bne.n	80060aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	88db      	ldrh	r3, [r3, #6]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d016      	beq.n	80060a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006074:	893b      	ldrh	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	88da      	ldrh	r2, [r3, #6]
 800607e:	893b      	ldrh	r3, [r7, #8]
 8006080:	4293      	cmp	r3, r2
 8006082:	bf28      	it	cs
 8006084:	4613      	movcs	r3, r2
 8006086:	b29b      	uxth	r3, r3
 8006088:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800608a:	893b      	ldrh	r3, [r7, #8]
 800608c:	461a      	mov	r2, r3
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fa44 	bl	800651e <USBD_CtlSendData>
 8006096:	e009      	b.n	80060ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9ce 	bl	800643c <USBD_CtlError>
 80060a0:	e004      	b.n	80060ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa95 	bl	80065d2 <USBD_CtlSendStatus>
 80060a8:	e000      	b.n	80060ac <USBD_GetDescriptor+0x2cc>
    return;
 80060aa:	bf00      	nop
  }
}
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop

080060b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	889b      	ldrh	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d131      	bne.n	800612a <USBD_SetAddress+0x76>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	88db      	ldrh	r3, [r3, #6]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d12d      	bne.n	800612a <USBD_SetAddress+0x76>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	885b      	ldrh	r3, [r3, #2]
 80060d2:	2b7f      	cmp	r3, #127	; 0x7f
 80060d4:	d829      	bhi.n	800612a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	885b      	ldrh	r3, [r3, #2]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d104      	bne.n	80060f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f9a3 	bl	800643c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f6:	e01d      	b.n	8006134 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	7bfa      	ldrb	r2, [r7, #15]
 80060fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fef3 	bl	8006ef0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa61 	bl	80065d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d004      	beq.n	8006120 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800611e:	e009      	b.n	8006134 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006128:	e004      	b.n	8006134 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f985 	bl	800643c <USBD_CtlError>
  }
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	885b      	ldrh	r3, [r3, #2]
 800614e:	b2da      	uxtb	r2, r3
 8006150:	4b4c      	ldr	r3, [pc, #304]	; (8006284 <USBD_SetConfig+0x148>)
 8006152:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006154:	4b4b      	ldr	r3, [pc, #300]	; (8006284 <USBD_SetConfig+0x148>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d905      	bls.n	8006168 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f96c 	bl	800643c <USBD_CtlError>
    return USBD_FAIL;
 8006164:	2303      	movs	r3, #3
 8006166:	e088      	b.n	800627a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d002      	beq.n	800617a <USBD_SetConfig+0x3e>
 8006174:	2b03      	cmp	r3, #3
 8006176:	d025      	beq.n	80061c4 <USBD_SetConfig+0x88>
 8006178:	e071      	b.n	800625e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800617a:	4b42      	ldr	r3, [pc, #264]	; (8006284 <USBD_SetConfig+0x148>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01c      	beq.n	80061bc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006182:	4b40      	ldr	r3, [pc, #256]	; (8006284 <USBD_SetConfig+0x148>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800618c:	4b3d      	ldr	r3, [pc, #244]	; (8006284 <USBD_SetConfig+0x148>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff f948 	bl	8005428 <USBD_SetClassConfig>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f949 	bl	800643c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80061aa:	e065      	b.n	8006278 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fa10 	bl	80065d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2203      	movs	r2, #3
 80061b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80061ba:	e05d      	b.n	8006278 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fa08 	bl	80065d2 <USBD_CtlSendStatus>
      break;
 80061c2:	e059      	b.n	8006278 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80061c4:	4b2f      	ldr	r3, [pc, #188]	; (8006284 <USBD_SetConfig+0x148>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d112      	bne.n	80061f2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80061d4:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <USBD_SetConfig+0x148>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061de:	4b29      	ldr	r3, [pc, #164]	; (8006284 <USBD_SetConfig+0x148>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff f93b 	bl	8005460 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9f1 	bl	80065d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80061f0:	e042      	b.n	8006278 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80061f2:	4b24      	ldr	r3, [pc, #144]	; (8006284 <USBD_SetConfig+0x148>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d02a      	beq.n	8006256 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff f929 	bl	8005460 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800620e:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <USBD_SetConfig+0x148>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006218:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <USBD_SetConfig+0x148>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff f902 	bl	8005428 <USBD_SetClassConfig>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f903 	bl	800643c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff f90e 	bl	8005460 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800624c:	e014      	b.n	8006278 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9bf 	bl	80065d2 <USBD_CtlSendStatus>
      break;
 8006254:	e010      	b.n	8006278 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f9bb 	bl	80065d2 <USBD_CtlSendStatus>
      break;
 800625c:	e00c      	b.n	8006278 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f8eb 	bl	800643c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <USBD_SetConfig+0x148>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff f8f7 	bl	8005460 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006272:	2303      	movs	r3, #3
 8006274:	73fb      	strb	r3, [r7, #15]
      break;
 8006276:	bf00      	nop
  }

  return ret;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	200001a0 	.word	0x200001a0

08006288 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	88db      	ldrh	r3, [r3, #6]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d004      	beq.n	80062a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f8cd 	bl	800643c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062a2:	e023      	b.n	80062ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	dc02      	bgt.n	80062b6 <USBD_GetConfig+0x2e>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dc03      	bgt.n	80062bc <USBD_GetConfig+0x34>
 80062b4:	e015      	b.n	80062e2 <USBD_GetConfig+0x5a>
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d00b      	beq.n	80062d2 <USBD_GetConfig+0x4a>
 80062ba:	e012      	b.n	80062e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3308      	adds	r3, #8
 80062c6:	2201      	movs	r2, #1
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f927 	bl	800651e <USBD_CtlSendData>
        break;
 80062d0:	e00c      	b.n	80062ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3304      	adds	r3, #4
 80062d6:	2201      	movs	r2, #1
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f91f 	bl	800651e <USBD_CtlSendData>
        break;
 80062e0:	e004      	b.n	80062ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f8a9 	bl	800643c <USBD_CtlError>
        break;
 80062ea:	bf00      	nop
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006304:	b2db      	uxtb	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	2b02      	cmp	r3, #2
 800630a:	d81e      	bhi.n	800634a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	88db      	ldrh	r3, [r3, #6]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d004      	beq.n	800631e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f890 	bl	800643c <USBD_CtlError>
        break;
 800631c:	e01a      	b.n	8006354 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f043 0202 	orr.w	r2, r3, #2
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	330c      	adds	r3, #12
 800633e:	2202      	movs	r2, #2
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f8eb 	bl	800651e <USBD_CtlSendData>
      break;
 8006348:	e004      	b.n	8006354 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f875 	bl	800643c <USBD_CtlError>
      break;
 8006352:	bf00      	nop
  }
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	885b      	ldrh	r3, [r3, #2]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d106      	bne.n	800637c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f92b 	bl	80065d2 <USBD_CtlSendStatus>
  }
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006394:	b2db      	uxtb	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	2b02      	cmp	r3, #2
 800639a:	d80b      	bhi.n	80063b4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	885b      	ldrh	r3, [r3, #2]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d10c      	bne.n	80063be <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f910 	bl	80065d2 <USBD_CtlSendStatus>
      }
      break;
 80063b2:	e004      	b.n	80063be <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f840 	bl	800643c <USBD_CtlError>
      break;
 80063bc:	e000      	b.n	80063c0 <USBD_ClrFeature+0x3c>
      break;
 80063be:	bf00      	nop
  }
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	781a      	ldrb	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff fabb 	bl	800596e <SWAPBYTE>
 80063f8:	4603      	mov	r3, r0
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3301      	adds	r3, #1
 800640a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff faae 	bl	800596e <SWAPBYTE>
 8006412:	4603      	mov	r3, r0
 8006414:	461a      	mov	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff faa1 	bl	800596e <SWAPBYTE>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	80da      	strh	r2, [r3, #6]
}
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006446:	2180      	movs	r1, #128	; 0x80
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fce7 	bl	8006e1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800644e:	2100      	movs	r1, #0
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fce3 	bl	8006e1c <USBD_LL_StallEP>
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d036      	beq.n	80064e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006478:	6938      	ldr	r0, [r7, #16]
 800647a:	f000 f836 	bl	80064ea <USBD_GetLen>
 800647e:	4603      	mov	r3, r0
 8006480:	3301      	adds	r3, #1
 8006482:	b29b      	uxth	r3, r3
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	4413      	add	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	701a      	strb	r2, [r3, #0]
  idx++;
 8006498:	7dfb      	ldrb	r3, [r7, #23]
 800649a:	3301      	adds	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	4413      	add	r3, r2
 80064a4:	2203      	movs	r2, #3
 80064a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	3301      	adds	r3, #1
 80064ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80064ae:	e013      	b.n	80064d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4413      	add	r3, r2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	3301      	adds	r3, #1
 80064c0:	613b      	str	r3, [r7, #16]
    idx++;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	3301      	adds	r3, #1
 80064c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4413      	add	r3, r2
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
    idx++;
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
 80064d4:	3301      	adds	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e7      	bne.n	80064b0 <USBD_GetString+0x52>
 80064e0:	e000      	b.n	80064e4 <USBD_GetString+0x86>
    return;
 80064e2:	bf00      	nop
  }
}
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b085      	sub	sp, #20
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80064fa:	e005      	b.n	8006508 <USBD_GetLen+0x1e>
  {
    len++;
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	3301      	adds	r3, #1
 8006500:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	3301      	adds	r3, #1
 8006506:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f5      	bne.n	80064fc <USBD_GetLen+0x12>
  }

  return len;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2202      	movs	r2, #2
 800652e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	2100      	movs	r1, #0
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fcf2 	bl	8006f2e <USBD_LL_Transmit>

  return USBD_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	2100      	movs	r1, #0
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fce1 	bl	8006f2e <USBD_LL_Transmit>

  return USBD_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2203      	movs	r2, #3
 8006586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	2100      	movs	r1, #0
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fce5 	bl	8006f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	2100      	movs	r1, #0
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fcd4 	bl	8006f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2204      	movs	r2, #4
 80065de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80065e2:	2300      	movs	r3, #0
 80065e4:	2200      	movs	r2, #0
 80065e6:	2100      	movs	r1, #0
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fca0 	bl	8006f2e <USBD_LL_Transmit>

  return USBD_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2205      	movs	r2, #5
 8006604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006608:	2300      	movs	r3, #0
 800660a:	2200      	movs	r2, #0
 800660c:	2100      	movs	r1, #0
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fcae 	bl	8006f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006624:	2200      	movs	r2, #0
 8006626:	4912      	ldr	r1, [pc, #72]	; (8006670 <MX_USB_DEVICE_Init+0x50>)
 8006628:	4812      	ldr	r0, [pc, #72]	; (8006674 <MX_USB_DEVICE_Init+0x54>)
 800662a:	f7fe fe8f 	bl	800534c <USBD_Init>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006634:	f7fa f8ac 	bl	8000790 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006638:	490f      	ldr	r1, [pc, #60]	; (8006678 <MX_USB_DEVICE_Init+0x58>)
 800663a:	480e      	ldr	r0, [pc, #56]	; (8006674 <MX_USB_DEVICE_Init+0x54>)
 800663c:	f7fe feb6 	bl	80053ac <USBD_RegisterClass>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006646:	f7fa f8a3 	bl	8000790 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800664a:	490c      	ldr	r1, [pc, #48]	; (800667c <MX_USB_DEVICE_Init+0x5c>)
 800664c:	4809      	ldr	r0, [pc, #36]	; (8006674 <MX_USB_DEVICE_Init+0x54>)
 800664e:	f7fe fdd7 	bl	8005200 <USBD_CDC_RegisterInterface>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006658:	f7fa f89a 	bl	8000790 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800665c:	4805      	ldr	r0, [pc, #20]	; (8006674 <MX_USB_DEVICE_Init+0x54>)
 800665e:	f7fe fecc 	bl	80053fa <USBD_Start>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006668:	f7fa f892 	bl	8000790 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800666c:	bf00      	nop
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000134 	.word	0x20000134
 8006674:	2000041c 	.word	0x2000041c
 8006678:	2000001c 	.word	0x2000001c
 800667c:	20000120 	.word	0x20000120

08006680 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006684:	2200      	movs	r2, #0
 8006686:	4905      	ldr	r1, [pc, #20]	; (800669c <CDC_Init_FS+0x1c>)
 8006688:	4805      	ldr	r0, [pc, #20]	; (80066a0 <CDC_Init_FS+0x20>)
 800668a:	f7fe fdce 	bl	800522a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800668e:	4905      	ldr	r1, [pc, #20]	; (80066a4 <CDC_Init_FS+0x24>)
 8006690:	4803      	ldr	r0, [pc, #12]	; (80066a0 <CDC_Init_FS+0x20>)
 8006692:	f7fe fde8 	bl	8005266 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006696:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006698:	4618      	mov	r0, r3
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000eec 	.word	0x20000eec
 80066a0:	2000041c 	.word	0x2000041c
 80066a4:	200006ec 	.word	0x200006ec

080066a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80066ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	6039      	str	r1, [r7, #0]
 80066c2:	71fb      	strb	r3, [r7, #7]
 80066c4:	4613      	mov	r3, r2
 80066c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	2b23      	cmp	r3, #35	; 0x23
 80066cc:	d84a      	bhi.n	8006764 <CDC_Control_FS+0xac>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <CDC_Control_FS+0x1c>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	08006765 	.word	0x08006765
 80066d8:	08006765 	.word	0x08006765
 80066dc:	08006765 	.word	0x08006765
 80066e0:	08006765 	.word	0x08006765
 80066e4:	08006765 	.word	0x08006765
 80066e8:	08006765 	.word	0x08006765
 80066ec:	08006765 	.word	0x08006765
 80066f0:	08006765 	.word	0x08006765
 80066f4:	08006765 	.word	0x08006765
 80066f8:	08006765 	.word	0x08006765
 80066fc:	08006765 	.word	0x08006765
 8006700:	08006765 	.word	0x08006765
 8006704:	08006765 	.word	0x08006765
 8006708:	08006765 	.word	0x08006765
 800670c:	08006765 	.word	0x08006765
 8006710:	08006765 	.word	0x08006765
 8006714:	08006765 	.word	0x08006765
 8006718:	08006765 	.word	0x08006765
 800671c:	08006765 	.word	0x08006765
 8006720:	08006765 	.word	0x08006765
 8006724:	08006765 	.word	0x08006765
 8006728:	08006765 	.word	0x08006765
 800672c:	08006765 	.word	0x08006765
 8006730:	08006765 	.word	0x08006765
 8006734:	08006765 	.word	0x08006765
 8006738:	08006765 	.word	0x08006765
 800673c:	08006765 	.word	0x08006765
 8006740:	08006765 	.word	0x08006765
 8006744:	08006765 	.word	0x08006765
 8006748:	08006765 	.word	0x08006765
 800674c:	08006765 	.word	0x08006765
 8006750:	08006765 	.word	0x08006765
 8006754:	08006765 	.word	0x08006765
 8006758:	08006765 	.word	0x08006765
 800675c:	08006765 	.word	0x08006765
 8006760:	08006765 	.word	0x08006765
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006764:	bf00      	nop
  }

  return (USBD_OK);
 8006766:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Transmit_FS(Buf,*Len);//添加数据原样返回
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f80e 	bl	80067a8 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4805      	ldr	r0, [pc, #20]	; (80067a4 <CDC_Receive_FS+0x30>)
 8006790:	f7fe fd69 	bl	8005266 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006794:	4803      	ldr	r0, [pc, #12]	; (80067a4 <CDC_Receive_FS+0x30>)
 8006796:	f7fe fdaf 	bl	80052f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800679a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	2000041c 	.word	0x2000041c

080067a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067b8:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <CDC_Transmit_FS+0x48>)
 80067ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e00b      	b.n	80067e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80067ce:	887b      	ldrh	r3, [r7, #2]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4806      	ldr	r0, [pc, #24]	; (80067f0 <CDC_Transmit_FS+0x48>)
 80067d6:	f7fe fd28 	bl	800522a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80067da:	4805      	ldr	r0, [pc, #20]	; (80067f0 <CDC_Transmit_FS+0x48>)
 80067dc:	f7fe fd5c 	bl	8005298 <USBD_CDC_TransmitPacket>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	2000041c 	.word	0x2000041c

080067f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800680a:	4618      	mov	r0, r3
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	6039      	str	r1, [r7, #0]
 8006822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2212      	movs	r2, #18
 8006828:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800682a:	4b03      	ldr	r3, [pc, #12]	; (8006838 <USBD_FS_DeviceDescriptor+0x20>)
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	20000150 	.word	0x20000150

0800683c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	6039      	str	r1, [r7, #0]
 8006846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2204      	movs	r2, #4
 800684c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800684e:	4b03      	ldr	r3, [pc, #12]	; (800685c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	20000164 	.word	0x20000164

08006860 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	6039      	str	r1, [r7, #0]
 800686a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4907      	ldr	r1, [pc, #28]	; (8006894 <USBD_FS_ProductStrDescriptor+0x34>)
 8006876:	4808      	ldr	r0, [pc, #32]	; (8006898 <USBD_FS_ProductStrDescriptor+0x38>)
 8006878:	f7ff fdf1 	bl	800645e <USBD_GetString>
 800687c:	e004      	b.n	8006888 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4904      	ldr	r1, [pc, #16]	; (8006894 <USBD_FS_ProductStrDescriptor+0x34>)
 8006882:	4805      	ldr	r0, [pc, #20]	; (8006898 <USBD_FS_ProductStrDescriptor+0x38>)
 8006884:	f7ff fdeb 	bl	800645e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006888:	4b02      	ldr	r3, [pc, #8]	; (8006894 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	200016ec 	.word	0x200016ec
 8006898:	080071f0 	.word	0x080071f0

0800689c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	6039      	str	r1, [r7, #0]
 80068a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	4904      	ldr	r1, [pc, #16]	; (80068bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068ac:	4804      	ldr	r0, [pc, #16]	; (80068c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068ae:	f7ff fdd6 	bl	800645e <USBD_GetString>
  return USBD_StrDesc;
 80068b2:	4b02      	ldr	r3, [pc, #8]	; (80068bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	200016ec 	.word	0x200016ec
 80068c0:	08007208 	.word	0x08007208

080068c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	6039      	str	r1, [r7, #0]
 80068ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	221a      	movs	r2, #26
 80068d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068d6:	f000 f843 	bl	8006960 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068da:	4b02      	ldr	r3, [pc, #8]	; (80068e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000168 	.word	0x20000168

080068e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	4907      	ldr	r1, [pc, #28]	; (800691c <USBD_FS_ConfigStrDescriptor+0x34>)
 80068fe:	4808      	ldr	r0, [pc, #32]	; (8006920 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006900:	f7ff fdad 	bl	800645e <USBD_GetString>
 8006904:	e004      	b.n	8006910 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4904      	ldr	r1, [pc, #16]	; (800691c <USBD_FS_ConfigStrDescriptor+0x34>)
 800690a:	4805      	ldr	r0, [pc, #20]	; (8006920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800690c:	f7ff fda7 	bl	800645e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006910:	4b02      	ldr	r3, [pc, #8]	; (800691c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	200016ec 	.word	0x200016ec
 8006920:	0800721c 	.word	0x0800721c

08006924 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	6039      	str	r1, [r7, #0]
 800692e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d105      	bne.n	8006942 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	4907      	ldr	r1, [pc, #28]	; (8006958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800693a:	4808      	ldr	r0, [pc, #32]	; (800695c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800693c:	f7ff fd8f 	bl	800645e <USBD_GetString>
 8006940:	e004      	b.n	800694c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	4904      	ldr	r1, [pc, #16]	; (8006958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006946:	4805      	ldr	r0, [pc, #20]	; (800695c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006948:	f7ff fd89 	bl	800645e <USBD_GetString>
  }
  return USBD_StrDesc;
 800694c:	4b02      	ldr	r3, [pc, #8]	; (8006958 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	200016ec 	.word	0x200016ec
 800695c:	08007228 	.word	0x08007228

08006960 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006966:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <Get_SerialNum+0x44>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800696c:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <Get_SerialNum+0x48>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006972:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <Get_SerialNum+0x4c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006986:	2208      	movs	r2, #8
 8006988:	4909      	ldr	r1, [pc, #36]	; (80069b0 <Get_SerialNum+0x50>)
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 f814 	bl	80069b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006990:	2204      	movs	r2, #4
 8006992:	4908      	ldr	r1, [pc, #32]	; (80069b4 <Get_SerialNum+0x54>)
 8006994:	68b8      	ldr	r0, [r7, #8]
 8006996:	f000 f80f 	bl	80069b8 <IntToUnicode>
  }
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	1fff7a10 	.word	0x1fff7a10
 80069a8:	1fff7a14 	.word	0x1fff7a14
 80069ac:	1fff7a18 	.word	0x1fff7a18
 80069b0:	2000016a 	.word	0x2000016a
 80069b4:	2000017a 	.word	0x2000017a

080069b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]
 80069ce:	e027      	b.n	8006a20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	0f1b      	lsrs	r3, r3, #28
 80069d4:	2b09      	cmp	r3, #9
 80069d6:	d80b      	bhi.n	80069f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	0f1b      	lsrs	r3, r3, #28
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	4619      	mov	r1, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	440b      	add	r3, r1
 80069e8:	3230      	adds	r2, #48	; 0x30
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e00a      	b.n	8006a06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	0f1b      	lsrs	r3, r3, #28
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	4619      	mov	r1, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	440b      	add	r3, r1
 8006a00:	3237      	adds	r2, #55	; 0x37
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	3301      	adds	r3, #1
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
 8006a20:	7dfa      	ldrb	r2, [r7, #23]
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d3d3      	bcc.n	80069d0 <IntToUnicode+0x18>
  }
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	; 0x28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a40:	f107 0314 	add.w	r3, r7, #20
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	605a      	str	r2, [r3, #4]
 8006a4a:	609a      	str	r2, [r3, #8]
 8006a4c:	60da      	str	r2, [r3, #12]
 8006a4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a58:	d13a      	bne.n	8006ad0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a84:	2303      	movs	r3, #3
 8006a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a88:	230a      	movs	r3, #10
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a8c:	f107 0314 	add.w	r3, r7, #20
 8006a90:	4619      	mov	r1, r3
 8006a92:	4812      	ldr	r0, [pc, #72]	; (8006adc <HAL_PCD_MspInit+0xa4>)
 8006a94:	f7fa f928 	bl	8000ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a98:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9c:	4a0e      	ldr	r2, [pc, #56]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa2:	6353      	str	r3, [r2, #52]	; 0x34
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aac:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	2043      	movs	r0, #67	; 0x43
 8006ac6:	f7fa f8bf 	bl	8000c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006aca:	2043      	movs	r0, #67	; 0x43
 8006acc:	f7fa f8e8 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	3728      	adds	r7, #40	; 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	40020000 	.word	0x40020000

08006ae0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fe fcca 	bl	8005490 <USBD_LL_SetupStage>
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b16:	78fa      	ldrb	r2, [r7, #3]
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	1a9b      	subs	r3, r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	f7fe fd04 	bl	800553a <USBD_LL_DataOutStage>
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b4c:	78fa      	ldrb	r2, [r7, #3]
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	3348      	adds	r3, #72	; 0x48
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7fe fd4d 	bl	8005600 <USBD_LL_DataInStage>
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fe61 	bl	8005844 <USBD_LL_SOF>
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b92:	2301      	movs	r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]
 8006ba2:	e008      	b.n	8006bb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d102      	bne.n	8006bb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
 8006bb0:	e001      	b.n	8006bb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006bb2:	f7f9 fded 	bl	8000790 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bbc:	7bfa      	ldrb	r2, [r7, #15]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe fe01 	bl	80057c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fdad 	bl	800572c <USBD_LL_Reset>
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fe fdfc 	bl	80057e8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c02:	f043 0301 	orr.w	r3, r3, #1
 8006c06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c10:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <HAL_PCD_SuspendCallback+0x48>)
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	4a03      	ldr	r2, [pc, #12]	; (8006c24 <HAL_PCD_SuspendCallback+0x48>)
 8006c16:	f043 0306 	orr.w	r3, r3, #6
 8006c1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	e000ed00 	.word	0xe000ed00

08006c28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fdec 	bl	8005814 <USBD_LL_Resume>
}
 8006c3c:	bf00      	nop
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fe3a 	bl	80058d4 <USBD_LL_IsoOUTIncomplete>
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fe02 	bl	8005888 <USBD_LL_IsoINIncomplete>
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fe40 	bl	8005920 <USBD_LL_DevConnected>
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fe3d 	bl	8005936 <USBD_LL_DevDisconnected>
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d13c      	bne.n	8006d4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006cd4:	4a20      	ldr	r2, [pc, #128]	; (8006d58 <USBD_LL_Init+0x94>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <USBD_LL_Init+0x94>)
 8006ce0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ce4:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <USBD_LL_Init+0x94>)
 8006ce6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006cea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006cec:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <USBD_LL_Init+0x94>)
 8006cee:	2204      	movs	r2, #4
 8006cf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cf2:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <USBD_LL_Init+0x94>)
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cf8:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <USBD_LL_Init+0x94>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006cfe:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d00:	2202      	movs	r2, #2
 8006d02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d04:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d0a:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d10:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d22:	480d      	ldr	r0, [pc, #52]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d24:	f7fa fd24 	bl	8001770 <HAL_PCD_Init>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d2e:	f7f9 fd2f 	bl	8000790 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	4808      	ldr	r0, [pc, #32]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d36:	f7fb fe94 	bl	8002a62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d3a:	2240      	movs	r2, #64	; 0x40
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4806      	ldr	r0, [pc, #24]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d40:	f7fb fe48 	bl	80029d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d44:	2280      	movs	r2, #128	; 0x80
 8006d46:	2101      	movs	r1, #1
 8006d48:	4803      	ldr	r0, [pc, #12]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d4a:	f7fb fe43 	bl	80029d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	200018ec 	.word	0x200018ec

08006d5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fa fe2c 	bl	80019d0 <HAL_PCD_Start>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f942 	bl	8007008 <USBD_Get_USB_Status>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	70fb      	strb	r3, [r7, #3]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70bb      	strb	r3, [r7, #2]
 8006da8:	4613      	mov	r3, r2
 8006daa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006dba:	78bb      	ldrb	r3, [r7, #2]
 8006dbc:	883a      	ldrh	r2, [r7, #0]
 8006dbe:	78f9      	ldrb	r1, [r7, #3]
 8006dc0:	f7fb fa10 	bl	80021e4 <HAL_PCD_EP_Open>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f91c 	bl	8007008 <USBD_Get_USB_Status>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fb fa59 	bl	80022b4 <HAL_PCD_EP_Close>
 8006e02:	4603      	mov	r3, r0
 8006e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f8fd 	bl	8007008 <USBD_Get_USB_Status>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fb fb31 	bl	80024a2 <HAL_PCD_EP_SetStall>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f8de 	bl	8007008 <USBD_Get_USB_Status>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fb fb76 	bl	800256a <HAL_PCD_EP_ClrStall>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 f8bf 	bl	8007008 <USBD_Get_USB_Status>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da0b      	bge.n	8006ecc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	333e      	adds	r3, #62	; 0x3e
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	e00b      	b.n	8006ee4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fb f943 	bl	800219a <HAL_PCD_SetAddress>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f874 	bl	8007008 <USBD_Get_USB_Status>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f4c:	7af9      	ldrb	r1, [r7, #11]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	f7fb fa5c 	bl	800240e <HAL_PCD_EP_Transmit>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 f853 	bl	8007008 <USBD_Get_USB_Status>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f66:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	607a      	str	r2, [r7, #4]
 8006f7a:	603b      	str	r3, [r7, #0]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f8e:	7af9      	ldrb	r1, [r7, #11]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	f7fb f9d8 	bl	8002348 <HAL_PCD_EP_Receive>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f832 	bl	8007008 <USBD_Get_USB_Status>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fa8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fc4:	78fa      	ldrb	r2, [r7, #3]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fb fa08 	bl	80023de <HAL_PCD_EP_GetRxCount>
 8006fce:	4603      	mov	r3, r0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006fe0:	4b03      	ldr	r3, [pc, #12]	; (8006ff0 <USBD_static_malloc+0x18>)
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	200001a4 	.word	0x200001a4

08006ff4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]

}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	2b03      	cmp	r3, #3
 800701a:	d817      	bhi.n	800704c <USBD_Get_USB_Status+0x44>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <USBD_Get_USB_Status+0x1c>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	08007035 	.word	0x08007035
 8007028:	0800703b 	.word	0x0800703b
 800702c:	08007041 	.word	0x08007041
 8007030:	08007047 	.word	0x08007047
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	73fb      	strb	r3, [r7, #15]
    break;
 8007038:	e00b      	b.n	8007052 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800703a:	2303      	movs	r3, #3
 800703c:	73fb      	strb	r3, [r7, #15]
    break;
 800703e:	e008      	b.n	8007052 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007040:	2301      	movs	r3, #1
 8007042:	73fb      	strb	r3, [r7, #15]
    break;
 8007044:	e005      	b.n	8007052 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007046:	2303      	movs	r3, #3
 8007048:	73fb      	strb	r3, [r7, #15]
    break;
 800704a:	e002      	b.n	8007052 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800704c:	2303      	movs	r3, #3
 800704e:	73fb      	strb	r3, [r7, #15]
    break;
 8007050:	bf00      	nop
  }
  return usb_status;
 8007052:	7bfb      	ldrb	r3, [r7, #15]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <__libc_init_array>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	4d0d      	ldr	r5, [pc, #52]	; (8007098 <__libc_init_array+0x38>)
 8007064:	4c0d      	ldr	r4, [pc, #52]	; (800709c <__libc_init_array+0x3c>)
 8007066:	1b64      	subs	r4, r4, r5
 8007068:	10a4      	asrs	r4, r4, #2
 800706a:	2600      	movs	r6, #0
 800706c:	42a6      	cmp	r6, r4
 800706e:	d109      	bne.n	8007084 <__libc_init_array+0x24>
 8007070:	4d0b      	ldr	r5, [pc, #44]	; (80070a0 <__libc_init_array+0x40>)
 8007072:	4c0c      	ldr	r4, [pc, #48]	; (80070a4 <__libc_init_array+0x44>)
 8007074:	f000 f820 	bl	80070b8 <_init>
 8007078:	1b64      	subs	r4, r4, r5
 800707a:	10a4      	asrs	r4, r4, #2
 800707c:	2600      	movs	r6, #0
 800707e:	42a6      	cmp	r6, r4
 8007080:	d105      	bne.n	800708e <__libc_init_array+0x2e>
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	f855 3b04 	ldr.w	r3, [r5], #4
 8007088:	4798      	blx	r3
 800708a:	3601      	adds	r6, #1
 800708c:	e7ee      	b.n	800706c <__libc_init_array+0xc>
 800708e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007092:	4798      	blx	r3
 8007094:	3601      	adds	r6, #1
 8007096:	e7f2      	b.n	800707e <__libc_init_array+0x1e>
 8007098:	08007258 	.word	0x08007258
 800709c:	08007258 	.word	0x08007258
 80070a0:	08007258 	.word	0x08007258
 80070a4:	0800725c 	.word	0x0800725c

080070a8 <memset>:
 80070a8:	4402      	add	r2, r0
 80070aa:	4603      	mov	r3, r0
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d100      	bne.n	80070b2 <memset+0xa>
 80070b0:	4770      	bx	lr
 80070b2:	f803 1b01 	strb.w	r1, [r3], #1
 80070b6:	e7f9      	b.n	80070ac <memset+0x4>

080070b8 <_init>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr

080070c4 <_fini>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr
